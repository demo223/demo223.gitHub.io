(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{500:function(s,a,t){"use strict";t.r(a);var e=t(14),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"mybatis动态插入数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis动态插入数据"}},[s._v("#")]),s._v(" Mybatis动态插入数据")]),s._v(" "),a("h3",{attrs:{id:"存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[s._v("#")]),s._v(" 存在的问题")]),s._v(" "),a("p",[s._v("为什么要这么做呢？这是为了解决两个问题：")]),s._v(" "),a("ol",[a("li",[s._v("在插入新记录时，可能只有部分字段有值，而其他字段为空。如果直接将所有字段都添加到 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句中，则会使语句变得冗长且难以维护。使用 "),a("code",[s._v("<trim>")]),s._v(" 标签可以解决这个问题，只有当字段有值时才将其添加到语句中。")]),s._v(" "),a("li",[s._v("在插入新记录时，需要保证字段列表和值列表中的字段数量相同，且对应位置的字段名称和值相对应。")])]),s._v(" "),a("p",[s._v("如果在 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句中添加了所有字段，但是没有传递给语句的参数对象中的值为空，则这些字段在执行插入操作时会被赋值为 "),a("code",[s._v("NULL")]),s._v("。")]),s._v(" "),a("p",[s._v("例如，如果有一个表结构如下：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("CREATE TABLE table_name (\n  id INT NOT NULL AUTO_INCREMENT,\n  name VARCHAR(255) NOT NULL,\n  age INT DEFAULT 0,\n  PRIMARY KEY (id)\n);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("并执行如下语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO table_name (id, name, age)\nVALUES (1, 'John', null);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("则会在表中插入一条新记录，其中 "),a("code",[s._v("name")]),s._v(" 字段的值为 "),a("code",[s._v("'John'")]),s._v("，"),a("code",[s._v("age")]),s._v(" 字段的值为 "),a("code",[s._v("NULL")]),s._v("。")]),s._v(" "),a("blockquote",[a("p",[s._v("注意：")]),s._v(" "),a("ul",[a("li",[s._v("如果表中的某个字段有默认值，那么在插入新记录时，如果不为这个字段赋值，则会使用默认值。")])])]),s._v(" "),a("p",[s._v("如果在 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句中添加了所有字段，并且有些字段的值为空，则会使用这些字段的默认值。例如，在上面的表结构中，如果执行如下语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO table_name (id, name)\nVALUES (1, 'John');\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("则会在表中插入一条新记录，其中 "),a("code",[s._v("name")]),s._v(" 字段的值为 "),a("code",[s._v("'John'")]),s._v("，"),a("code",[s._v("age")]),s._v(" 字段的值为默认值 "),a("code",[s._v("0")]),s._v("。")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("但是，如果表中的某个字段没有默认值，并且设置了 "),a("code",[s._v("NOT NULL")]),s._v(" 约束，则在插入新记录时必须为这个字段赋值。否则，就会抛出一个异常，表示无法插入空值。")]),s._v(" "),a("p",[s._v("例如，在上面的表结构中，如果执行如下语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO table_name (id)\nVALUES (1);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("则会抛出一个异常，因为 "),a("code",[s._v("name")]),s._v(" 字段没有默认值，并且设置了 "),a("code",[s._v("NOT NULL")]),s._v(" 约束。")]),s._v(" "),a("blockquote",[a("p",[s._v("如果你的表中的所有列都是允许为空的，那么在你的代码中判断是否为"),a("code",[s._v("null")]),s._v("就没有意义了。但是，如果你的表中有些列是不允许为空的，那么在你的代码中判断是否为"),a("code",[s._v("null")]),s._v("就很有意义了。这样你可以在插入之前就发现哪些列未赋值，从而避免在数据库中插入非法数据。")])]),s._v(" "),a("h3",{attrs:{id:"解决的办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决的办法"}},[s._v("#")]),s._v(" 解决的办法")]),s._v(" "),a("p",[s._v("​\t\t  我们可以使用 "),a("code",[s._v("<trim>")]),s._v(" 标签和 "),a("code",[s._v("<if>")]),s._v(" 标签可以动态构建 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句，只将传入的参数对象中的非空属性添加到语句中。这样可以避免插入无效的空值，并且可以使语句更简洁、易于维护。")]),s._v(" "),a("p",[s._v("例如，如果使用如下的 MyBatis 映射语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<insert id="insertRecord" parameterType="Record">\n  INSERT INTO table_name\n  <trim prefix="(" suffix=")" suffixOverrides=",">\n    <if test="id != null">id,</if>\n    <if test="name != null">name,</if>\n    <if test="age != null">age,</if>\n  </trim>\n  VALUES\n  <trim prefix="(" suffix=")" suffixOverrides=",">\n    <if test="id != null">#{id},</if>\n    <if test="name != null">#{name},</if>\n    <if test="age != null">#{age},</if>\n  </trim>\n</insert>\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("那么调用这个映射语句时，可以传入一个参数对象(例如上面的"),a("code",[s._v("Record")]),s._v(")，其中的非空属性值会被添加到 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句中，并作为新记录的值插入到表中。")]),s._v(" "),a("p",[s._v("例如，如果传入的参数对象为：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Record")]),s._v(" record "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Record")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("则会执行如下的 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO table_name (id, name)\nVALUES (1, 'John');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果传入的参数对象为：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Record")]),s._v(" record "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Record")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("则会执行如下的 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO table_name (name, age)\nVALUES ('John', 30);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("注意，使用 "),a("code",[s._v("<trim>")]),s._v(" 标签和 "),a("code",[s._v("<if>")]),s._v(" 标签动态构建 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句时，需要注意以下几点：")]),s._v(" "),a("ul",[a("li",[s._v("使用 "),a("code",[s._v("prefix")]),s._v(" 属性指定字段列表和值列表的前缀，使用 "),a("code",[s._v("suffix")]),s._v(" 属性指定后缀。")]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("suffixOverrides")]),s._v(" 属性去掉列表末尾多余的分隔符。")]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("test")]),s._v(" 属性指定判断条件，只有当条件为真时，才会将字段或值添加到语句中。")])])]),s._v(" "),a("p",[s._v("例如，有如下的 MyBatis 映射语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<insert id="insertRecord" parameterType="Record">\n  INSERT INTO table_name\n  <trim prefix="(" suffix=")" suffixOverrides=",">\n    id,name,age,\n  </trim>\n  VALUES\n  <trim prefix="(" suffix=")" suffixOverrides=",">\n    #{id},#{name},#{age},\n  </trim>\n</insert>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("例如，如果传入的参数对象为：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Record")]),s._v(" record "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Record")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrecord"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("则会执行如下的 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO table_name (id, name, age)\nVALUES (1, 'John', 30);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("使用 "),a("code",[s._v("suffixOverrides")]),s._v(" 属性可以避免在列表末尾多余的分隔符。")]),s._v(" "),a("p",[s._v("使用这个映射语句可以动态构建 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句，只将传入的参数对象中的非空属性添加到语句中。这样可以避免插入无效的空值，并且可以使语句更简洁、易于维护。")]),s._v(" "),a("h2",{attrs:{id:"mybatis批量插入数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis批量插入数据"}},[s._v("#")]),s._v(" Mybatis批量插入数据")]),s._v(" "),a("h3",{attrs:{id:"场景一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景一"}},[s._v("#")]),s._v(" 场景一")]),s._v(" "),a("p",[s._v("例如，如果要向 "),a("code",[s._v("tb_user")]),s._v(" 表中插入多条记录，可以在 XML 配置文件中定义如下 SQL 语句")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<insert id="insertUsers" parameterType="java.util.List">\n  INSERT INTO tb_user\n  <trim prefix="(" suffix=")" suffixOverrides=",">\n    <if test="item.name != null">name,</if>\n    <if test="item.age != null">age,</if>\n    <if test="item.address != null">address,</if>\n  </trim>\n  VALUES\n  <foreach collection="list" item="item" separator=",">\n    <trim prefix="(" suffix=")" suffixOverrides=",">\n      <if test="item.name != null">#{item.name},</if>\n      <if test="item.age != null">#{item.age},</if>\n      <if test="item.address != null">#{item.address},</if>\n    </trim>\n  </foreach>\n</insert>\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("但是这里存在局限性，只有在批量插入的记录的参数都是一样的情况下，才能这样做。")]),s._v(" "),a("p",[s._v("如果参数是可选的，前端传过来的多条数据的参数个数不是一样的，那就不能使用上面的写法。")]),s._v(" "),a("h3",{attrs:{id:"场景二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景二"}},[s._v("#")]),s._v(" 场景二")]),s._v(" "),a("p",[s._v("在场景一的场景下加一个条件，就是批量插入的数据的参数不统一的情况。")]),s._v(" "),a("p",[s._v("如果要插入多条记录，并且每条记录的参数个数也是动态的，则需要在 XML 配置文件中使用 "),a("code",[s._v("<foreach>")]),s._v(" 标签遍历每一条记录，并使用 "),a("code",[s._v("<trim>")]),s._v(" 和 "),a("code",[s._v("<if>")]),s._v(" 标签分别处理字段列表和值列表。")]),s._v(" "),a("p",[s._v("例如，如果要向 "),a("code",[s._v("tb_user")]),s._v(" 表中插入多条记录，每条记录的参数个数也是动态的，可以在 XML 配置文件中定义如下 SQL 语句：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<insert id="insertUsers" parameterType="java.util.List">\n  INSERT INTO tb_user\n  <foreach collection="list" item="item" index="index" separator=",">\n    <trim prefix="(" suffix=")" suffixOverrides=",">\n      <if test="item.name != null">name,</if>\n      <if test="item.age != null">age,</if>\n      <if test="item.address != null">address,</if>\n  \t</trim>\n  \tVALUES\n    <trim prefix="(" suffix=")" suffixOverrides=",">\n      <if test="item.name != null">#{item.name},</if>\n      <if test="item.age != null">#{item.age},</if>\n      <if test="item.address != null">#{item.address},</if>\n    </trim>\n</insert>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("然后在 Java 中调用 insert 方法执行插入操作")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" users "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nusers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Tom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"New York"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nusers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Jerry"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Chicago"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nusers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Mike"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nsqlSession"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"insertUsers"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("关于上面的 "),a("code",[s._v("parameterType")]),s._v(" 属性的解释")])]),s._v(" "),a("p",[s._v("注意上面的"),a("code",[s._v("parameterType")]),s._v(" 属性指定了传入参数的类型，在这里，"),a("code",[s._v("parameterType")]),s._v(" 属性的值为 "),a("code",[s._v("java.util.List")]),s._v("，表示传入的是一个泛型为 "),a("code",[s._v("User")]),s._v(" 的 "),a("code",[s._v("List")]),s._v("。所以在 Java 中调用 "),a("code",[s._v("insert")]),s._v(" 方法时，需要传入一个泛型为 "),a("code",[s._v("User")]),s._v(" 的 "),a("code",[s._v("List")]),s._v("。")]),s._v(" "),a("p",[s._v("如果你希望传入的是一个 "),a("code",[s._v("User")]),s._v(" 类型的对象，则可以将 "),a("code",[s._v("parameterType")]),s._v(" 设置为 "),a("code",[s._v("User")]),s._v("。例如：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<insert id="insertUser" parameterType="com.example.domain.User">\n  insert into user (name, age, address) values (#{name}, #{age}, #{address})\n</insert>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("但是，如果你希望传入的是一个包含多个 "),a("code",[s._v("User")]),s._v(" 类型的对象的 "),a("code",[s._v("List")]),s._v("，则可以将 "),a("code",[s._v("parameterType")]),s._v(" 设置为 "),a("code",[s._v("List")]),s._v("。例如：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<insert id="insertUsers" parameterType="java.util.List">\n  insert into user\n  <foreach collection="list" item="item" index="index" separator=",">\n    (name, age, address) values (#{item.name}, #{item.age}, #{item.address})\n  </foreach>\n</insert>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("由于传入的是一个 "),a("code",[s._v("List")]),s._v("，所以在处理参数时，需要使用 "),a("code",[s._v("item")]),s._v(" 和 "),a("code",[s._v("index")]),s._v(" 属性获取 "),a("code",[s._v("List")]),s._v(" 中的每一个元素和索引。例如，在 XML 配置文件中，我们可以使用 "),a("code",[s._v("#{item.name}")]),s._v(" 获取 "),a("code",[s._v("List")]),s._v(" 中每一个 "),a("code",[s._v("User")]),s._v(" 对象的 "),a("code",[s._v("name")]),s._v(" 属性。")]),s._v(" "),a("p",[s._v("总之，在使用 "),a("code",[s._v("<insert>")]),s._v(" 标签时，"),a("code",[s._v("parameterType")]),s._v(" 可以是单个对象类型，也可以是包含多个对象的 "),a("code",[s._v("List")]),s._v(" 类型。")]),s._v(" "),a("h3",{attrs:{id:"场景三"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景三"}},[s._v("#")]),s._v(" 场景三")]),s._v(" "),a("p",[s._v("关于上面的那个代码如下，某些情况会存在问题")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<insert id="insertUsers" parameterType="java.util.List">\n  INSERT INTO tb_user\n  <foreach collection="list" item="item" index="index" separator=",">\n    <trim prefix="(" suffix=")" suffixOverrides=",">\n      <if test="item.name != null">name,</if>\n      <if test="item.age != null">age,</if>\n      <if test="item.address != null">address,</if>\n  \t</trim>\n  \tVALUES\n    <trim prefix="(" suffix=")" suffixOverrides=",">\n      <if test="item.name != null">#{item.name},</if>\n      <if test="item.age != null">#{item.age},</if>\n      <if test="item.address != null">#{item.address},</if>\n    </trim>\n</insert>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("这段代码可以避免列数和数据类型不一致的问题。但是如果传入的参数中有空值，那么这条 "),a("code",[s._v("INSERT")]),s._v(" 语句可能会出现问题。例如，如果传入的 "),a("code",[s._v("list")]),s._v(" 中有一条记录 "),a("code",[s._v("name")]),s._v(" 和 "),a("code",[s._v("age")]),s._v(" 字段都为空，那么这条记录会被生成出来 "),a("code",[s._v("(null,null)")]),s._v("，这样就会导致语法错误。")]),s._v(" "),a("p",[a("strong",[s._v("解决办法")]),s._v("：")]),s._v(" "),a("p",[a("strong",[s._v("思路")]),s._v("：")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("service")]),s._v(" 层中进行判断和过滤掉整条数据全为 "),a("code",[s._v("null")]),s._v(" 的数据然后再进行插入操作可以有效避免出现 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句报错的情况，并且这样也更加符合程序设计的规范和原则。")]),s._v(" "),a("p",[s._v("但是还存在的一个问题就是当"),a("code",[s._v("List")]),s._v("集合中所有的数据全为"),a("code",[s._v("null")]),s._v("的时候还是会报错，所以我们这里还需要判断"),a("code",[s._v("List")]),s._v("集合的大小，在过滤掉所有数据中全为 "),a("code",[s._v("null")]),s._v(" 的数据后，再判断此时"),a("code",[s._v("List")]),s._v("集合的大小。")]),s._v(" "),a("p",[a("strong",[s._v("代码实现")])]),s._v(" "),a("p",[s._v("首先，我们可以在 "),a("code",[s._v("service")]),s._v(" 层中进行判断和过滤，将 "),a("code",[s._v("List")]),s._v(" 集合中整条数据全为 "),a("code",[s._v("null")]),s._v(" 的数据进行过滤：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" filteredList "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("stream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("item "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("collect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collectors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toList")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后，再判断过滤后的 "),a("code",[s._v("List")]),s._v(" 集合的大小，如果大小为 "),a("code",[s._v("0")]),s._v("，说明所有数据都为 "),a("code",[s._v("null")]),s._v("，此时不执行 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句；如果大小大于 "),a("code",[s._v("0")]),s._v("，则执行 INSERT INTO 语句。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filteredList"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行 INSERT INTO 语句")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不执行 INSERT INTO 语句")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("p",[s._v("实际上使用 "),a("code",[s._v("SELECT")]),s._v(" 语句的 "),a("code",[s._v("UNION ALL")]),s._v(" 连接多条 "),a("code",[s._v("SELECT")]),s._v(" 语句并使用 "),a("code",[s._v("FROM dual")]),s._v("(MySQL中可省略) 语句创建虚拟表的方式也可以实现多行插入的功能。")]),s._v(" "),a("p",[s._v("例如，向表中插入两条记录：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO user(name, birthday) SELECT 'A','19950902' FROM DUAL;\nINSERT INTO user(name, birthday) SELECT 'B','19950903' FROM DUAL;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("实际上等同于")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("INSERT INTO user(name, birthday) VALUES ('A','19950902');\nINSERT INTO user(name, birthday) VALUES ('B','19950903');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这两种方式在效率上并没有明显的差异，可以根据个人喜好选择使用。")]),s._v(" "),a("p",[s._v("需要注意的是，在使用 "),a("code",[s._v("SELECT")]),s._v(" 语句的 "),a("code",[s._v("UNION ALL")]),s._v(" 连接多条 "),a("code",[s._v("SELECT")]),s._v(" 语句时，必须保证每条 "),a("code",[s._v("SELECT")]),s._v(" 语句的列数和数据类型与 "),a("code",[s._v("INSERT INTO")]),s._v(" 语句中指定的列数和数据类型一致。")])])}),[],!1,null,null,null);a.default=n.exports}}]);