(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{504:function(_,v,t){"use strict";t.r(v);var r=t(14),a=Object(r.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"sql优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sql优化"}},[_._v("#")]),_._v(" SQL优化")]),_._v(" "),v("h2",{attrs:{id:"一、sql的优化手段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、sql的优化手段"}},[_._v("#")]),_._v(" 一、SQL的优化手段")]),_._v(" "),v("h3",{attrs:{id:"_1-1-表结构优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-表结构优化"}},[_._v("#")]),_._v(" 1.1 表结构优化")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("一般说来数据库的表越小，那么它的查询速度就越快，因此为了提高表的效率，应该将表的字段设置的尽可能小，比如身份证号，可以设置为 "),v("code",[_._v("char(18)")]),_._v(" 就不要设置为 "),v("code",[_._v("varchar(18)")]),_._v("。")])]),_._v(" "),v("li",[v("p",[_._v("使用最简单数据类型，能使用 "),v("code",[_._v("int")]),_._v("类型就不要使用 "),v("code",[_._v("varchar")]),_._v("类型，因为 "),v("strong",[v("code",[_._v("int")]),_._v("类型比 "),v("code",[_._v("varchar")]),_._v("类型的查询效率更高")]),_._v("。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("适当分表、分库")])]),_._v(" "),v("p",[v("strong",[_._v("分表")]),_._v("是指当一张表中的字段更多时，可以尝试将一张大表拆分为多张子表，==把使用比较高频的主信息放入主表中，其他的放入子表==，这样我们大部分查询只需要查询字段更少的主表就可以完成了，从而有效的提高了查询的效率。")]),_._v(" "),v("p",[v("strong",[_._v("分库")]),_._v("是指将一个数据库分为多个数据库。比如我们把一个数据库拆分为了多个数据库，==一个主数据库用于写入和修改数据，其他的用于同步主数据并提供给客户端查询==，这样就把一个库的读和写的压力，分摊给了多个库，从而提高了数据库整体的运行效率。")])])]),_._v(" "),v("h3",{attrs:{id:"_1-2-索引优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-索引优化"}},[_._v("#")]),_._v(" 1.2 索引优化")]),_._v(" "),v("ul",[v("li",[_._v("表的主键、外键必须有索引；")]),_._v(" "),v("li",[_._v("数据量大的表应该有索引；")]),_._v(" "),v("li",[_._v("经常与其他表进行连接的表，在连接字段上应该建立索引；")]),_._v(" "),v("li",[_._v("经常出现在where子句中的字段，特别是大表的字段，应该建立索引；")]),_._v(" "),v("li",[_._v("索引应该建在选择性高的字段上； （sex 性别这种就不适合）")]),_._v(" "),v("li",[_._v("索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；")]),_._v(" "),v("li",[_._v("频繁进行数据操作的表，不要建立太多的索引；")]),_._v(" "),v("li",[_._v("删除无用的索引，避免对执行计划造成负面影响；")])]),_._v(" "),v("h3",{attrs:{id:"_1-3-sql语句优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-sql语句优化"}},[_._v("#")]),_._v(" 1.3 SQL语句优化")]),_._v(" "),v("ul",[v("li",[_._v("SELECT语句务必指明字段名称（避免直接使用"),v("code",[_._v("select *")]),_._v("）")]),_._v(" "),v("li",[_._v("SQL语句要避免造成索引失效的写法")]),_._v(" "),v("li",[_._v("SQL语句中"),v("code",[_._v("IN")]),_._v("包含的值不应过多")]),_._v(" "),v("li",[_._v("当只需要一条数据的时候，使用"),v("code",[_._v("limit 1")])]),_._v(" "),v("li",[_._v("如果排序字段没有用到索引，就尽量少排序")]),_._v(" "),v("li",[_._v("如果限制条件中其他字段没有索引，尽量少用"),v("code",[_._v("or")])]),_._v(" "),v("li",[_._v("尽量用"),v("code",[_._v("union all")]),_._v("代替"),v("code",[_._v("union")])]),_._v(" "),v("li",[_._v("避免在where子句中对字段进行null值判断")]),_._v(" "),v("li",[_._v("不建议使用%前缀模糊查询")]),_._v(" "),v("li",[_._v("避免在where子句中对字段进行表达式操作")]),_._v(" "),v("li",[_._v("Join优化 能用"),v("code",[_._v("inner join")]),_._v(" 就不用"),v("code",[_._v("left join right join")]),_._v("，如必须使用 一定要以小表为驱动")])]),_._v(" "),v("h3",{attrs:{id:"_1-4-主从复制、读写分离"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-主从复制、读写分离"}},[_._v("#")]),_._v(" 1.4 主从复制、读写分离")]),_._v(" "),v("p",[_._v("如果数据库的使用场景读的操作比较的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构，读写分离，解决的是，数据库的写入，影响了查询的效率。读写分离的基本原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。 数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。")]),_._v(" "),v("h3",{attrs:{id:"_1-5-分表分库"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-分表分库"}},[_._v("#")]),_._v(" 1.5 分表分库")]),_._v(" "),v("p",[v("strong",[_._v("分表")]),_._v("是指当一张表中的字段更多时，可以尝试将一张大表拆分为多张子表，==把使用比较高频的主信息放入主表中，其他的放入子表==，这样我们大部分查询只需要查询字段更少的主表就可以完成了，从而有效的提高了查询的效率。")]),_._v(" "),v("p",[v("strong",[_._v("分库")]),_._v("是指将一个数据库分为多个数据库。比如我们把一个数据库拆分为了多个数据库，==一个主数据库用于写入和修改数据，其他的用于同步主数据并提供给客户端查询==，这样就把一个库的读和写的压力，分摊给了多个库，从而提高了数据库整体的运行效率。")]),_._v(" "),v("p",[_._v("分库分表的形式，主要是两种："),v("strong",[_._v("垂直拆分")]),_._v("和"),v("strong",[_._v("水平拆分")]),_._v("。而拆分的粒度，一般又分为分库和分表，所以组成的拆分策略最终如下：")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911220948216.png",alt:"image-20220911220948216"}})])])}),[],!1,null,null,null);v.default=a.exports}}]);