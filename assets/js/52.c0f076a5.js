(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{333:function(v,_,l){"use strict";l.r(_);var s=l(14),a=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"请说说你对反射的了解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请说说你对反射的了解"}},[v._v("#")]),v._v(" 请说说你对反射的了解？")]),v._v(" "),_("p",[v._v("得分点")]),v._v(" "),_("ul",[_("li",[v._v("反射概念")]),v._v(" "),_("li",[v._v("通过反射机制可以实现什么")])]),v._v(" "),_("p",[v._v("加分回答")]),v._v(" "),_("ul",[_("li",[v._v("Java的反射机制在实际项目中应用广泛，常见的应用场景有哪些")])]),v._v(" "),_("p",[v._v("标准回答：")]),v._v(" "),_("p",[_("strong",[v._v("反射概念")]),v._v("：")]),v._v(" "),_("p",[v._v("​\t\t  在 Java 中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能成为 Java 语言的反射机制。")]),v._v(" "),_("p",[_("strong",[v._v("作用")]),v._v("：")]),v._v(" "),_("ul",[_("li",[v._v("程序运行时，可以通过反射获得任意一个类的Class对象，并通过这个对象查看这个类的信息；")]),v._v(" "),_("li",[v._v("程序运行时，可以通过反射创建任意一个类的实例，并访问该实例的成员；")]),v._v(" "),_("li",[v._v("程序运行时，可以通过反射机制生成一个类的动态代理类或动态代理对象。")])]),v._v(" "),_("p",[_("strong",[v._v("加分项")]),v._v("：加分回答 Java的反射机制在实际项目中应用广泛，常见的应用场景有")]),v._v(" "),_("ol",[_("li",[v._v("使用"),_("code",[v._v("JDBC")]),v._v("时，如果要创建数据库的连接，则需要先通过反射机制加载数据库的驱动程序；")]),v._v(" "),_("li",[v._v("多数框架都支持注解"),_("code",[v._v("XML")]),v._v("配置，从配置中解析出来的类是字符串，需要利用反射机制实例化；")]),v._v(" "),_("li",[v._v("面向切面编程（"),_("code",[v._v("AOP")]),v._v("）的实现方案，是在程序运行时创建目标对象的代理类，这必须由反射机制来实现")])]),v._v(" "),_("p",[v._v("获取 Class 对象的 3 种方法：")]),v._v(" "),_("ol",[_("li",[v._v("调用某个对象的 "),_("code",[v._v("getClass()")]),v._v("方法")]),v._v(" "),_("li",[v._v("调用某个类的 "),_("code",[v._v("class")]),v._v(" 属性来获取该类对应的 Class 对象")]),v._v(" "),_("li",[v._v("使用 Class 类中的 "),_("code",[v._v("Class.forName()")]),v._v("静态方法来获取(最安全/性能最好/最常用)")])])])}),[],!1,null,null,null);_.default=a.exports}}]);