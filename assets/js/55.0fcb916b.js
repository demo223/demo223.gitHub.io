(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{339:function(t,s,a){"use strict";a.r(s);var _=a(14),v=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mysql相关面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql相关面试题"}},[t._v("#")]),t._v(" MySQL相关面试题")]),t._v(" "),s("h2",{attrs:{id:"_1-sql规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-sql规范"}},[t._v("#")]),t._v(" 1 SQL规范")]),t._v(" "),s("h3",{attrs:{id:"_1-1-mysql查询语句的执行顺序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-mysql查询语句的执行顺序"}},[t._v("#")]),t._v(" 1.1 Mysql查询语句的执行顺序？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("sql的编写顺序")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("           字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("             表名列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v("          表关联\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("            条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         分组字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v("           分组后的条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         排序字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v("            分页参数\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("sql的执行顺序")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("             表名列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v("          表关联\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("            条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         分组字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v("           分组后的条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("           字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         排序字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v("            分页参数\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("blockquote",[s("p",[t._v("举例:")]),t._v(" "),s("p",[t._v("sql1：select name ,age from tb_user where name = '张三'  order by age limit 10;")]),t._v(" "),s("p",[t._v("给表起别名")]),t._v(" "),s("p",[t._v("sql2：select "),s("strong",[t._v("u.name")]),t._v(" ,"),s("strong",[t._v("u.age")]),t._v(" from tb_user "),s("strong",[t._v("u")]),t._v(" where name = '张三'  order by "),s("strong",[t._v("u.age")]),t._v(" limit 10;")]),t._v(" "),s("p",[t._v("可以正常执行，如果from后不先执行，则select和order by无法引用")]),t._v(" "),s("p",[t._v("给sql的字段起别名")]),t._v(" "),s("p",[t._v("sql3：select u.name "),s("strong",[t._v("uname")]),t._v(" ,u.age "),s("strong",[t._v("uage")]),t._v(" from tb_user u where "),s("strong",[t._v("uname")]),t._v("= '张三'  order by u.age limit 10;")]),t._v(" "),s("p",[t._v("在where之后使用别名，执行报错，因为where在select 之前执行")]),t._v(" "),s("p",[t._v("sql4：select u.name "),s("strong",[t._v("uname")]),t._v(" ,u.age "),s("strong",[t._v("uage")]),t._v(" from tb_user u where u.name= '张三'  order by "),s("strong",[t._v("uage")]),t._v(" limit 10;")]),t._v(" "),s("p",[t._v("在order by后面使用别名，可以正常执行，因为select执行完成后才会执行order by")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-mysql-如何实现多表查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-mysql-如何实现多表查询"}},[t._v("#")]),t._v(" 1.2 Mysql 如何实现多表查询？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("多表关系")]),t._v(" "),s("ul",[s("li",[t._v("一对多：在多的一方设置外键，关联一的一方的主键")]),t._v(" "),s("li",[t._v("一对一：用于表结构拆分，在其中任何一方设置外键（给唯一约束UNIQUE）,关联另一方的主键")]),t._v(" "),s("li",[t._v("对多对：需要建立中间表，中间表包含两个外键，关联两张表的主键")])]),t._v(" "),s("p",[t._v("多表查询")]),t._v(" "),s("ul",[s("li",[t._v("内连接\n"),s("ul",[s("li",[t._v("隐式："),s("code",[t._v("select ...from 表A,表B where 条件...")])]),t._v(" "),s("li",[t._v("显式："),s("code",[t._v("select ... from 表A inner join 表B on 条件...")])])])]),t._v(" "),s("li",[t._v("外连接\n"),s("ul",[s("li",[t._v("左外连接："),s("code",[t._v("select ...from 表A left join 表B on 条件...")])]),t._v(" "),s("li",[t._v("右外连接："),s("code",[t._v("select ...from 表A right join 表B on 条件...")])])])]),t._v(" "),s("li",[t._v("自连接："),s("code",[t._v("select ...from 表A 别名1,表A 别名2 where 条件...")])]),t._v(" "),s("li",[t._v("子查询：列子查询、行子查询、表子查询")])]),t._v(" "),s("h3",{attrs:{id:"_1-3-mysql内连接和外连接的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-mysql内连接和外连接的区别"}},[t._v("#")]),t._v(" 1.3 MYSQL内连接和外连接的区别 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("内连接会取出连接表中匹配到的数据，匹配不到的不保留；")])]),t._v(" "),s("li",[s("p",[t._v("外连接会取出连接表中匹配到的数据，匹配不到的也会保留，其值为NULL。")]),t._v(" "),s("ul",[s("li",[t._v("左外连接，以左边的表为主表")]),t._v(" "),s("li",[t._v("右外连接，以右边的表为主表")])]),t._v(" "),s("p",[t._v("以某一个表为主表后，进行关联查询，不管能不能关联的上，主表的数据都会保留，关联不上的以NULL显示")])])]),t._v(" "),s("h3",{attrs:{id:"_1-4-char和varchar的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-char和varchar的区别"}},[t._v("#")]),t._v(" 1.4 CHAR和VARCHAR的区别？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆")])]),t._v(" "),s("p",[t._v("区别主要有以下几个方面")]),t._v(" "),s("p",[t._v("1、最大长度：char最大长度是255字符，varchar最大长度是65535个字节。")]),t._v(" "),s("p",[t._v("2、定长：char是定长的，不足的部分用隐藏空格填充，varchar是不定长的。")]),t._v(" "),s("p",[t._v("3、空间使用：char会浪费空间，varchar会更加节省空间。")]),t._v(" "),s("p",[t._v("4、查找效率：char查找效率会很高，varchar查找效率会更低。")]),t._v(" "),s("p",[t._v("​\t   varchar需要计算内容占用的长度，而char不会，所以char的效率稍高一些")]),t._v(" "),s("p",[t._v("在项目中的使用，这两种方式都会用到，比如像一些枚举值可以选择使用char，像一些描述信息或名字类可以选择使用varchar")]),t._v(" "),s("h2",{attrs:{id:"_2-事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-事务"}},[t._v("#")]),t._v(" 2 事务")]),t._v(" "),s("h3",{attrs:{id:"_2-1-什么是事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是事务"}},[t._v("#")]),t._v(" 2.1 什么是事务？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("概述：由多个操作组成的一个逻辑单元，组成这个逻辑单元的多个操作要么都成功，要么都失败。")]),t._v(" "),s("blockquote",[s("p",[t._v("举例：转账")]),t._v(" "),s("p",[t._v("A向B转账500，转账成功，A扣除500元，B增加500元")]),t._v(" "),s("p",[t._v("A向B转账500，转账未成功，A已经扣除的500元要恢复，B不变")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-acid是什么-可以详细说一下吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-acid是什么-可以详细说一下吗"}},[t._v("#")]),t._v(" 2.2 ACID是什么？可以详细说一下吗？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆☆")])]),t._v(" "),s("p",[t._v("A=Atomicity原子性：就是上面说的,要么全部成功,要么全部失败，不可能只执行一部分操作。")]),t._v(" "),s("p",[t._v("C=Consistency一致性：系统(数据库)总是从一个一致性的状态转移到另一个一致性的状态,不会存在中间状态。")]),t._v(" "),s("p",[t._v("I=Isolation隔离性: "),s("strong",[t._v("通常")]),t._v("来说:一个事务在完全提交之前,对其他事务是不可见的.注意前面的通常来说加了红色,意味着有例外情况。")]),t._v(" "),s("p",[t._v("D=Durability持久性：一旦事务提交,那么就永远是这样子了,哪怕系统崩溃也不会影响到这个事务的结果。")]),t._v(" "),s("blockquote",[s("p",[t._v("举例：转账")]),t._v(" "),s("p",[t._v("A向B转账500，转账成功，A扣除500元，B增加500元，原子操作体现在要么都成功，要么都失败")]),t._v(" "),s("p",[t._v("在转账的过程中，数据要一致，A扣除了500，B必须增加500")]),t._v(" "),s("p",[t._v("在转账的过程中，隔离性体现在A像B转账，不能受其他事务干扰")]),t._v(" "),s("p",[t._v("在转账的过程中，持久性体现在事务提交后，要把数据持久化（可以说是落盘操作）")])]),t._v(" "),s("h3",{attrs:{id:"_2-3-并发事务带来哪些问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-并发事务带来哪些问题"}},[t._v("#")]),t._v(" 2.3 并发事务带来哪些问题？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆")])]),t._v(" "),s("p",[t._v("在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。")]),t._v(" "),s("p",[s("strong",[t._v("脏读（Dirty read）")]),t._v(": 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。")]),t._v(" "),s("p",[s("strong",[t._v("丢失修改（Lost to modify）")]),t._v("：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。")]),t._v(" "),s("p",[s("strong",[t._v("不可重复读（Unrepeatableread）")]),t._v("：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。")]),t._v(" "),s("p",[s("strong",[t._v("幻读（Phantom read）")]),t._v("：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。")]),t._v(" "),s("h3",{attrs:{id:"_2-4-怎么解决这些问题呢-mysql的默认隔离级别是"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-怎么解决这些问题呢-mysql的默认隔离级别是"}},[t._v("#")]),t._v(" 2.4 怎么解决这些问题呢？MySQL的默认隔离级别是？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆")])]),t._v(" "),s("p",[t._v("解决方案：对事务进行隔离")]),t._v(" "),s("p",[t._v("MySQL的四种隔离级别如下:")]),t._v(" "),s("p",[s("strong",[t._v("未提交读(READ UNCOMMITTED)")]),t._v("：这个隔离级别下,其他事务可以看到本事务没有提交的部分修改。因此会造成脏读的问题(读取到了其他事务未提交的部分,而之后该事务进行了回滚)。这个级别的性能没有足够大的优势,但是又有很多的问题,因此很少使用.")]),t._v(" "),s("p",[t._v("sql演示：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 插入数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" goods_innodb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'华为'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" goods_innodb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'小米'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uncommitted")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置事务的隔离级别为read uncommitted")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("uncommitted")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置事务的隔离级别为read uncommitted")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'中兴'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[s("strong",[t._v("已提交读(READ COMMITTED)")]),t._v("：其他事务只能读取到本事务已经提交的部分。这个隔离级别有不可重复读的问题，在同一个事务内的两次读取,拿到的结果竟然不一样,因为另外一个事务对数据进行了修改。")]),t._v(" "),s("p",[t._v("sql演示：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("committed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置事务的隔离级别为read committed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("session")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("isolation")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("level")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("read")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("committed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置事务的隔离级别为read committed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'中兴'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交事务")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[s("strong",[t._v("REPEATABLE READ(可重复读)")]),t._v("：可重复读隔离级别解决了上面不可重复读的问题(看名字也知道)，但是不能完全解决幻读。MySql默认的事务隔离级别就是："),s("strong",[t._v("REPEATABLE READ")])]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@tx_isolation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220208091344590.png",alt:"image-20220208091344590"}})]),t._v(" "),s("p",[t._v("sql演示(解决不可重复读)：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'荣耀'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交事务")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("p",[t._v("sql演示(测试不会出现幻读的情况)：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" goods_innodb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'小米'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t   \t   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 插入数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交事务")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询数据")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("sql演示(测试出现幻读的情况)：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表结构进行修改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" version "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" version "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询一条不满足条件的数据")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("start")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transaction")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" goods_innodb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vivo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 插入一条满足条件的数据 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交事务")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会话一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'金立'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" version "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\t   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将version为1的数据更改为'金立'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" goods_innodb "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" version "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查询一条不满足条件的数据")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[s("strong",[t._v("SERIALIZABLE(可串行化)")]),t._v("：这是最高的隔离级别,可以解决上面提到的所有问题,因为他强制将所以的操作串行执行,这会导致并发性能极速下降,因此也不是很常用。")]),t._v(" "),s("h2",{attrs:{id:"_3-索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-索引"}},[t._v("#")]),t._v(" 3 索引")]),t._v(" "),s("h3",{attrs:{id:"_3-1-mysql支持的存储引擎有哪些-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-mysql支持的存储引擎有哪些-有什么区别"}},[t._v("#")]),t._v(" 3.1 MYSQL支持的存储引擎有哪些, 有什么区别 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆")])]),t._v(" "),s("ul",[s("li",[t._v("常用的存储引擎\n"),s("ul",[s("li",[t._v("MyISAM存储引擎\n"),s("ul",[s("li",[t._v("访问快,不支持事务和外键。表结构保存在.frm文件中，表数据保存在.MYD文件中，索引保存在.MYI文件中。")])])]),t._v(" "),s("li",[t._v("InnoDB存储引擎(MySQL5.5版本后默认的存储引擎)\n"),s("ul",[s("li",[t._v("支持事务 ,占用磁盘空间大 ,支持并发控制。表结构保存在.frm文件中，如果是共享表空间，数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。如果是多表空间存储，每个表的数据和索引单独保存在 .ibd 中。")])])]),t._v(" "),s("li",[t._v("MEMORY存储引擎\n"),s("ul",[s("li",[t._v("内存存储 , 速度快 ,不安全 ,适合小量快速访问的数据。表结构保存在.frm中。")])])])])]),t._v(" "),s("li",[t._v("特性对比")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("特性")]),t._v(" "),s("th",[t._v("MyISAM")]),t._v(" "),s("th",[t._v("InnoDB")]),t._v(" "),s("th",[t._v("MEMORY")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("strong",[t._v("事务安全")])]),t._v(" "),s("td",[s("strong",[t._v("不支持")])]),t._v(" "),s("td",[s("strong",[t._v("支持")])]),t._v(" "),s("td",[s("strong",[t._v("不支持")])])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("锁机制")])]),t._v(" "),s("td",[s("strong",[t._v("表锁")])]),t._v(" "),s("td",[s("strong",[t._v("表锁/行锁")])]),t._v(" "),s("td",[s("strong",[t._v("表锁")])])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("外键")])]),t._v(" "),s("td",[s("strong",[t._v("不支持")])]),t._v(" "),s("td",[s("strong",[t._v("支持")])]),t._v(" "),s("td",[s("strong",[t._v("不支持")])])])])]),t._v(" "),s("h3",{attrs:{id:"_3-2-了解过mysql的索引嘛"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-了解过mysql的索引嘛"}},[t._v("#")]),t._v(" 3.2 了解过Mysql的索引嘛 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（B+树），这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。")]),t._v(" "),s("h3",{attrs:{id:"_3-3-索引的底层数据结构了解过嘛"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-索引的底层数据结构了解过嘛"}},[t._v("#")]),t._v(" 3.3 索引的底层数据结构了解过嘛 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆☆")])]),t._v(" "),s("p",[t._v("MySQL默认使用的索引底层数据结构是B+树。再聊B+树之前，我们先聊聊二叉树和B树")]),t._v(" "),s("h4",{attrs:{id:"_2-3-1-二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-二叉树"}},[t._v("#")]),t._v(" 2.3.1 二叉树")]),t._v(" "),s("p",[t._v("假如说MySQL的索引结构采用二叉树的数据结构，比较理想的结构如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911183152014.png",alt:"image-20220911183152014"}})]),t._v(" "),s("p",[t._v("如果主键是顺序插入的，则会形成一个单向链表，结构如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911183211048.png",alt:"image-20220911183211048"}})]),t._v(" "),s("p",[t._v("所以，如果选择二叉树作为索引结构，会存在以下缺点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("顺序插入时，会形成一个链表，查询性能大大降低。")])]),t._v(" "),s("li",[s("p",[t._v("大数据量情况下，层级较深，检索速度慢。")])])]),t._v(" "),s("p",[t._v("此时大家可能会想到，我们可以选择红黑树，红黑树是一颗自平衡二叉树，那这样即使是顺序插入数据，最终形成的数据结构也是一颗平衡的二叉树,结构如下:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911183128328.png",alt:"image-20220911183128328"}})]),t._v(" "),s("p",[t._v("但是，即使如此，由于红黑树也是一颗二叉树，所以也会存在一个缺点：")]),t._v(" "),s("ul",[s("li",[t._v("大数据量情况下，层级较深，检索速度慢。")])]),t._v(" "),s("p",[t._v("所以，在MySQL的索引结构中，并没有选择二叉树或者红黑树，而选择的是B+Tree，那么什么是B+Tree呢？在详解B+Tree之前，先来介绍一个B-Tree。")]),t._v(" "),s("h4",{attrs:{id:"_2-3-2-b-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-b-tree"}},[t._v("#")]),t._v(" 2.3.2 B-Tree")]),t._v(" "),s("p",[t._v("B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。")]),t._v(" "),s("p",[t._v("以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5个指针：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220120230814729.png",alt:"image-20220120230814729"}})]),t._v(" "),s("blockquote",[s("p",[t._v("知识小贴士: 树的度数指的是一个节点的子节点个数。")])]),t._v(" "),s("p",[t._v("我们可以通过一个数据结构可视化的网站来简单演示一下。 https://www.cs.usfca.edu/~galles/visualization/BTree.html")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220120231104019.png",alt:"image-20220120231104019"}})]),t._v(" "),s("p",[t._v("插入一组数据： 100 65 169 368 900 556 780 35 215 1200 234 888 158 90 1000 88 120 268 250 。然后观察一些数据插入过程中，节点的变化情况。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220120231135819.png",alt:"image-20220120231135819"}})]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("5阶的B树，每一个节点最多存储4个key，对应5个指针。")]),t._v(" "),s("li",[t._v("一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂。")]),t._v(" "),s("li",[t._v("在B树中，非叶子节点和叶子节点都会存放数据。")])]),t._v(" "),s("h4",{attrs:{id:"_2-2-3-b-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-b-tree"}},[t._v("#")]),t._v(" 2.2.3 B+Tree")]),t._v(" "),s("p",[t._v("B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，来看一下其结构示意图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220120233158924-1662891127168.png",alt:"image-20220120233158924"}})]),t._v(" "),s("p",[t._v("我们可以看到，两部分：")]),t._v(" "),s("ul",[s("li",[t._v("绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。")]),t._v(" "),s("li",[t._v("红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据。")])]),t._v(" "),s("p",[t._v("我们可以通过一个数据结构可视化的网站来简单演示一下。 https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220120233447695-1662891127168.png",alt:"image-20220120233447695"}})]),t._v(" "),s("p",[t._v("插入一组数据： 100 65 169 368 900 556 780 35 215 1200 234 888 158 90 1000 88 120 268 250 。然后观察一些数据插入过程中，节点的变化情况。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911183055238.png",alt:"image-20220911183055238"}})]),t._v(" "),s("p",[t._v("最终我们看到，B+Tree 与 B-Tree相比，主要有以下三点区别：")]),t._v(" "),s("ul",[s("li",[t._v("所有的数据都会出现在叶子节点。")]),t._v(" "),s("li",[t._v("叶子节点形成一个单向链表。")]),t._v(" "),s("li",[t._v("非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。")])]),t._v(" "),s("p",[t._v("上述我们所看到的结构是标准的B+Tree的数据结构，接下来，我们再来看看MySQL中优化之后的B+Tree。")]),t._v(" "),s("p",[t._v("MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220120235829054-1662891127168.png",alt:"image-20220120235829054"}})]),t._v(" "),s("h3",{attrs:{id:"_3-4-什么是聚簇索引什么是非聚簇索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-什么是聚簇索引什么是非聚簇索引"}},[t._v("#")]),t._v(" 3.4 什么是聚簇索引什么是非聚簇索引 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("而在在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("分类")]),t._v(" "),s("th",[t._v("含义")]),t._v(" "),s("th",[t._v("特点")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("聚集索引(Clustered  Index)")]),t._v(" "),s("td",[t._v("将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据")]),t._v(" "),s("td",[t._v("必须有,而且只有一个")])]),t._v(" "),s("tr",[s("td",[t._v("二级索引(Secondary  Index)")]),t._v(" "),s("td",[t._v("将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键")]),t._v(" "),s("td",[t._v("可以存在多个")])])])]),t._v(" "),s("p",[t._v("聚集索引选取规则:")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果存在主键，主键索引就是聚集索引。")])]),t._v(" "),s("li",[s("p",[t._v("如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。")])]),t._v(" "),s("li",[s("p",[t._v("如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。")])])]),t._v(" "),s("p",[t._v("聚集索引和二级索引的具体结构如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911183033682.png",alt:"image-20220911183033682"}})]),t._v(" "),s("ul",[s("li",[t._v("聚集索引的叶子节点下挂的是这一行的数据 。")]),t._v(" "),s("li",[t._v("二级索引的叶子节点下挂的是该字段值对应的主键值。")])]),t._v(" "),s("h3",{attrs:{id:"_3-5-知道什么是回表查询嘛"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-知道什么是回表查询嘛"}},[t._v("#")]),t._v(" 3.5  知道什么是回表查询嘛 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("介绍回表之前，我们先看一个例子")]),t._v(" "),s("p",[t._v("比如执行了一条sql语句"),s("code",[t._v("select * from user where name = 'Arm'")]),t._v("，其中name字段已经创建了索引")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911183010564.png",alt:"image-20220911183010564"}})]),t._v(" "),s("p",[t._v("具体过程如下:")]),t._v(" "),s("p",[t._v("①. 由于是根据name字段进行查询，所以先根据name='Arm'到name字段的二级索引中进行匹配查找。但是在二级索引中只能查找到 Arm 对应的主键值 10。")]),t._v(" "),s("p",[t._v("②. 由于查询返回的数据是*，所以此时，还需要根据主键值10，到聚集索引中查找10对应的记录，最终找到10对应的行row。")]),t._v(" "),s("p",[t._v("③. 最终拿到这一行的数据，直接返回即可。")]),t._v(" "),s("blockquote",[s("p",[t._v("回表查询： 这种先到二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式，就称之为回表查询。")])]),t._v(" "),s("h3",{attrs:{id:"_3-6-索引创建原则有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-索引创建原则有哪些"}},[t._v("#")]),t._v(" 3.6  索引创建原则有哪些？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆")])]),t._v(" "),s("p",[t._v("1). 针对于数据量较大，且查询比较频繁的表建立索引。")]),t._v(" "),s("p",[t._v("2). 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。")]),t._v(" "),s("p",[t._v("3). 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。")]),t._v(" "),s("p",[t._v("4). 如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。")]),t._v(" "),s("p",[t._v("5). 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。")]),t._v(" "),s("p",[t._v("6). 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。")]),t._v(" "),s("p",[t._v("7). 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。")]),t._v(" "),s("h3",{attrs:{id:"_3-7-知道什么是左前缀原则嘛"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-知道什么是左前缀原则嘛"}},[t._v("#")]),t._v(" 3.7 知道什么是左前缀原则嘛 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆")])]),t._v(" "),s("p",[t._v("如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效(后面的字段索引失效)。")]),t._v(" "),s("p",[t._v("以 tb_user 表为例，我们先来查看一下之前 tb_user 表所创建的索引。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220121230021077.png",alt:"image-20220121230021077"}})]),t._v(" "),s("p",[t._v("在 tb_user 表中，有一个联合索引，这个联合索引涉及到三个字段，顺序分别为：profession，age，status。")]),t._v(" "),s("p",[t._v("对于最左前缀法则指的是，查询时，最左变的列，也就是profession必须存在，否则索引全部失效。 而且中间不能跳过某一列，否则该列后面的字段索引将失效")]),t._v(" "),s("h3",{attrs:{id:"_3-8-知道什么叫覆盖索引嘛"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-知道什么叫覆盖索引嘛"}},[t._v("#")]),t._v(" 3.8 知道什么叫覆盖索引嘛 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("覆盖索引是指 查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。")]),t._v(" "),s("p",[t._v("例：")]),t._v(" "),s("p",[t._v("执行SQL : "),s("code",[t._v("select * from tb_user where id = 2")]),t._v(";")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911182940268.png",alt:"image-20220911182940268"}})]),t._v(" "),s("p",[t._v("根据id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。")]),t._v(" "),s("h3",{attrs:{id:"_3-9-索引是越多越好嘛-什么样的字段需要建索引-什么样的字段不需要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-索引是越多越好嘛-什么样的字段需要建索引-什么样的字段不需要"}},[t._v("#")]),t._v(" 3.9 索引是越多越好嘛? 什么样的字段需要建索引, 什么样的字段不需要 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆")])]),t._v(" "),s("p",[t._v("索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("针对于数据量较大，且查询比较频繁的表建立索引。")]),t._v(" "),s("p",[t._v("针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。")])]),t._v(" "),s("li",[s("p",[t._v("不适合常见索引的字段")]),t._v(" "),s("ul",[s("li",[t._v("更新频繁字段不适合创建索引")]),t._v(" "),s("li",[t._v("若是不能有效区分数据的列不适合做索引列(如性别，男女未知，最多也就三种，区分度实在太低)")]),t._v(" "),s("li",[t._v("对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。\n"),s("ul",[s("li",[t._v("比如省会，城市、月份")])])]),t._v(" "),s("li",[t._v("对于定义为text、image和bit的数据类型的列不要建立索引。")])])])]),t._v(" "),s("h2",{attrs:{id:"_4-调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-调优"}},[t._v("#")]),t._v(" 4 调优")]),t._v(" "),s("h3",{attrs:{id:"_4-1-如何定位慢查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-如何定位慢查询"}},[t._v("#")]),t._v(" 4.1 如何定位慢查询 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆☆")])]),t._v(" "),s("p",[t._v("可以开启mysql的慢查询日志")]),t._v(" "),s("p",[t._v("慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。")]),t._v(" "),s("p",[t._v("如果要开启慢查询日志，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：")]),t._v(" "),s("div",{staticClass:"language-properties line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启MySQL慢日志查询开关")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("slow_query_log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key attr-name"}},[t._v("long_query_time")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token value attr-value"}},[t._v("2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("配置完毕之后，通过以下指令重新启动MySQL服务器进行测试，查看慢日志文件中记录的信息 /var/lib/mysql/localhost-slow.log。")]),t._v(" "),s("p",[t._v("如果这个时候有一条sql执行的时间超过2秒，则会记录到慢日志文件中")]),t._v(" "),s("h3",{attrs:{id:"_4-2-一个sql语句执行很慢-如何分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-一个sql语句执行很慢-如何分析"}},[t._v("#")]),t._v(" 4.2 一个SQL语句执行很慢, 如何分析 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆☆")])]),t._v(" "),s("p",[t._v("可以采用EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。")]),t._v(" "),s("p",[t._v("语法:")]),t._v(" "),s("div",{staticClass:"language-SQL line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 直接在select语句之前加上关键字 explain / desc")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPLAIN")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v("   字段列表   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   表名   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v("  条件 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220121151322661.png",alt:"image-20220121151322661"}})]),t._v(" "),s("p",[t._v("Explain 执行计划中各个字段的含义:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字段")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("id")]),t._v(" "),s("td",[t._v("select查询的序列号，表示查询中执行select子句或者是操作表的顺序(id相同，执行顺序从上到下；id不同，值越大，越先执行)。")])]),t._v(" "),s("tr",[s("td",[t._v("select_type")]),t._v(" "),s("td",[t._v("表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、"),s("br"),t._v("UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等")])]),t._v(" "),s("tr",[s("td",[t._v("type")]),t._v(" "),s("td",[t._v("表示连接类型，性能由好到差的连接类型为NULL、system、const、eq_ref、ref、range、 index、all 。")])]),t._v(" "),s("tr",[s("td",[t._v("possible_key")]),t._v(" "),s("td",[t._v("显示可能应用在这张表上的索引，一个或多个。")])]),t._v(" "),s("tr",[s("td",[t._v("key")]),t._v(" "),s("td",[t._v("实际使用的索引，如果为NULL，则没有使用索引。")])]),t._v(" "),s("tr",[s("td",[t._v("key_len")]),t._v(" "),s("td",[t._v("表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。")])]),t._v(" "),s("tr",[s("td",[t._v("rows")]),t._v(" "),s("td",[t._v("MySQL认为必须要执行查询的行数，在innodb引擎的表中，是一个估计值，可能并不总是准确的。")])]),t._v(" "),s("tr",[s("td",[t._v("filtered")]),t._v(" "),s("td",[t._v("表示返回结果的行数占需读取行数的百分比， filtered 的值越大越好。")])]),t._v(" "),s("tr",[s("td",[t._v("Extra")]),t._v(" "),s("td",[t._v("额外的建议")])])])]),t._v(" "),s("p",[t._v("主要可以根据以下字段，判断sql是否需要优化，特别是是否能命中索引或命中索引的情况")]),t._v(" "),s("ul",[s("li",[t._v("type 通过sql的连接的类型进行优化")]),t._v(" "),s("li",[t._v("possible_key  通过它查看是否可能会命中索引")]),t._v(" "),s("li",[t._v("key 当前sql实际命中的索引")]),t._v(" "),s("li",[t._v("key_len 索引占用的大小")]),t._v(" "),s("li",[t._v("Extra 额外的优化建议")])]),t._v(" "),s("h3",{attrs:{id:"_4-3-什么情况下索引会失效"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-什么情况下索引会失效"}},[t._v("#")]),t._v(" 4.3 什么情况下索引会失效 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆☆")])]),t._v(" "),s("p",[t._v("1). 最左前缀法则\n如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。\n匹配最左前缀法则，走索引：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015342903.png",alt:"image-20220402015342903"}})]),t._v(" "),s("p",[t._v("违法最左前缀法则 ， 索引失效：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015405424.png",alt:"image-20220402015405424"}})]),t._v(" "),s("p",[t._v("如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015425744.png",alt:"image-20220402015425744"}})]),t._v(" "),s("p",[t._v("2). 范围查询右边的列，不能使用索引 。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015442589.png",alt:"image-20220402015442589"}})]),t._v(" "),s("p",[t._v("根据前面的两个字段 name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。")]),t._v(" "),s("p",[t._v("3). 不要在索引列上进行运算操作， 索引将失效。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015507834.png",alt:"image-20220402015507834"}})]),t._v(" "),s("p",[t._v("4). 字符串不加单引号，造成索引失效。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015524822.png",alt:"image-20220402015524822"}})]),t._v(" "),s("p",[t._v("由于，在查询是，没有对字符串加单引号， MySQL的查询优化器，会自动的进行类型转换，造成索引失效。")]),t._v(" "),s("p",[t._v("5). 尽量使用覆盖索引，避免select *\n尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015553678.png",alt:"image-20220402015553678"}})]),t._v(" "),s("p",[t._v("如果查询列，超出索引列，也会降低性能。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015610221.png",alt:"image-20220402015610221"}})]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[t._v("TIP :\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" ：使用覆盖索引的时候就会出现\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("：在查找使用索引的情况下，需要回表去查询所需的数据\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" condition：查找使用了索引，但是需要回表查询数据\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表\n查询数据\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("6). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。\n示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tb_seller "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'黑马程序员'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("or")]),t._v(" createtime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2088-01-01 12:00:00'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015711415.png",alt:"image-20220402015711415"}})]),t._v(" "),s("p",[t._v("7). 以%开头的Like模糊查询，索引失效。\n如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015729911.png",alt:"image-20220402015729911"}})]),t._v(" "),s("p",[t._v("解决方案 ：\n通过覆盖索引来解决")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015748294.png",alt:"image-20220402015748294"}})]),t._v(" "),s("p",[t._v("8). 如果MySQL评估使用索引比全表更慢，则不使用索引。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015838310.png",alt:"image-20220402015838310"}})]),t._v(" "),s("p",[t._v("9). is NULL ， is NOT NULL 有时索引失效。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015859587.png",alt:"image-20220402015859587"}})]),t._v(" "),s("p",[t._v("10). in 走索引， not in 索引失效。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220402015915816.png",alt:"image-20220402015915816"}})]),t._v(" "),s("h3",{attrs:{id:"_4-4-mysql超大分页怎么处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-mysql超大分页怎么处理"}},[t._v("#")]),t._v(" 4.4 MYSQL超大分页怎么处理 ?")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。")]),t._v(" "),s("p",[t._v("我们一起来看看执行limit分页查询耗时对比：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220123132838745.png",alt:"image-20220123132838745"}})]),t._v(" "),s("p",[t._v("通过测试我们会看到，越往后，分页查询效率越低，这就是分页查询的问题所在。")]),t._v(" "),s("p",[t._v("因为，当在进行分页查询时，如果执行 limit 2000000,10 ，此时需要MySQL排序前2000010 记录，仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。")]),t._v(" "),s("p",[t._v("优化思路: 一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explain")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("  tb_sku  t  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("  id  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("  tb_sku  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("  id  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  a  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"_4-5-谈谈你对sql的优化的经验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-谈谈你对sql的优化的经验"}},[t._v("#")]),t._v(" 4.5 谈谈你对sql的优化的经验")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆☆☆")])]),t._v(" "),s("h4",{attrs:{id:"_4-5-1-表的设计优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-1-表的设计优化"}},[t._v("#")]),t._v(" 4.5.1 表的设计优化")]),t._v(" "),s("p",[t._v("①选择表合适存储引擎：")]),t._v(" "),s("ul",[s("li",[t._v("myisam: 应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。")]),t._v(" "),s("li",[t._v("Innodb： 事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。尽量 设计 所有字段都得有默认值,尽量避免null。")])]),t._v(" "),s("p",[t._v("②选择合适的数据类型")]),t._v(" "),s("p",[t._v("数据库表设计时候更小的占磁盘空间尽可能使用更小的整数类型，一般来说，数据库中的表越小，在它上面执行的查询也就会越快。")]),t._v(" "),s("p",[t._v("比如设置合适的数值（tinyint   int   bigint），要根据实际情况选择")]),t._v(" "),s("p",[t._v("比如设置合适的字符串类型（char和varchar）char定长效率高，varchar可变长度，效率稍低")]),t._v(" "),s("h4",{attrs:{id:"_4-5-2-索引优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-2-索引优化"}},[t._v("#")]),t._v(" 4.5.2 索引优化")]),t._v(" "),s("ul",[s("li",[t._v("表的主键、外键必须有索引；")]),t._v(" "),s("li",[t._v("数据量大的表应该有索引；")]),t._v(" "),s("li",[t._v("经常与其他表进行连接的表，在连接字段上应该建立索引；")]),t._v(" "),s("li",[t._v("经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；")]),t._v(" "),s("li",[t._v("索引应该建在选择性高的字段上； （sex 性别这种就不适合）")]),t._v(" "),s("li",[t._v("索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；")]),t._v(" "),s("li",[t._v("频繁进行数据操作的表，不要建立太多的索引；")]),t._v(" "),s("li",[t._v("删除无用的索引，避免对执行计划造成负面影响；")])]),t._v(" "),s("h4",{attrs:{id:"_4-5-3-sql语句优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-3-sql语句优化"}},[t._v("#")]),t._v(" 4.5.3 sql语句优化")]),t._v(" "),s("ul",[s("li",[t._v("SELECT语句务必指明字段名称（避免直接使用select * ）")]),t._v(" "),s("li",[t._v("SQL语句要避免造成索引失效的写法")]),t._v(" "),s("li",[t._v("SQL语句中IN包含的值不应过多")]),t._v(" "),s("li",[t._v("当只需要一条数据的时候，使用limit 1")]),t._v(" "),s("li",[t._v("如果排序字段没有用到索引，就尽量少排序")]),t._v(" "),s("li",[t._v("如果限制条件中其他字段没有索引，尽量少用or")]),t._v(" "),s("li",[t._v("尽量用union all代替union")]),t._v(" "),s("li",[t._v("避免在where子句中对字段进行null值判断")]),t._v(" "),s("li",[t._v("不建议使用%前缀模糊查询")]),t._v(" "),s("li",[t._v("避免在where子句中对字段进行表达式操作")]),t._v(" "),s("li",[t._v("Join优化 能用innerjoin 就不用left join right join，如必须使用 一定要已小表为驱动")])]),t._v(" "),s("h4",{attrs:{id:"_4-5-4-主从复制、读写分离"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-4-主从复制、读写分离"}},[t._v("#")]),t._v(" 4.5.4 主从复制、读写分离")]),t._v(" "),s("p",[t._v("如果数据库的使用场景读的操作比较的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构，读写分离，解决的是，数据库的写入，影响了查询的效率。读写分离的基本原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。 数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。")]),t._v(" "),s("h4",{attrs:{id:"_4-5-5-mysql的分库分表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-5-mysql的分库分表"}},[t._v("#")]),t._v(" 4.5.5 mysql的分库分表")]),t._v(" "),s("p",[t._v("见下文")]),t._v(" "),s("h2",{attrs:{id:"_5-分库分表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-分库分表"}},[t._v("#")]),t._v(" 5 分库分表")]),t._v(" "),s("h3",{attrs:{id:"_5-1主从同步原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1主从同步原理"}},[t._v("#")]),t._v(" 5.1主从同步原理")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("p",[t._v("MySQL主从复制的核心就是二进制日志，")]),t._v(" "),s("blockquote",[s("p",[t._v("二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句。")])]),t._v(" "),s("p",[t._v("具体的主从同步过程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911213148696.png",alt:"image-20220911213148696"}})]),t._v(" "),s("p",[t._v("从上图来看，复制分成三步：")]),t._v(" "),s("ol",[s("li",[t._v("Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。")]),t._v(" "),s("li",[t._v("从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。")]),t._v(" "),s("li",[t._v("slave重做中继日志中的事件，将改变反映它自己的数据。")])]),t._v(" "),s("h3",{attrs:{id:"_5-2-读写分离的时候主从同步延时怎么解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-读写分离的时候主从同步延时怎么解决"}},[t._v("#")]),t._v(" 5.2 读写分离的时候主从同步延时怎么解决？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("h4",{attrs:{id:"_5-2-1-为什么会延时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-为什么会延时"}},[t._v("#")]),t._v(" 5.2.1 为什么会延时")]),t._v(" "),s("p",[s("strong",[t._v("随机重放")])]),t._v(" "),s("p",[t._v("MySQL的主从复制都是单线程的操作，主库对所有DDL和DML产生的日志写进binlog，由于binlog是顺序写，所以效率很高。Slave的SQL Thread线程将主库的DDL和DML操作事件在slave中重放。DML和DDL的IO操作是随机的，不是顺序的，成本高很多。所以SQL Thread线程的速度赶不上主库写binlog的速度，就会产生主从延迟")]),t._v(" "),s("p",[s("strong",[t._v("锁等待")])]),t._v(" "),s("p",[t._v("另一方面，由于SQL Thread也是单线程的，当主库的并发较高时，产生的DML数量超过slave的SQL Thread所能处理的速度，或者当slave中有大型query语句产生了锁等待那么延时就产生了。")]),t._v(" "),s("h4",{attrs:{id:"_5-2-2-解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-解决方案"}},[t._v("#")]),t._v(" 5.2.2 解决方案")]),t._v(" "),s("p",[s("strong",[t._v("强制读主库")]),t._v("\n如果你做的是类似支付这种对实时性要求非常高的业务，那么最直接的方法就是直接读主库，当然这种方法相当于从库做一个备份的功能了。")]),t._v(" "),s("p",[s("strong",[t._v("延迟读")]),t._v("\n就是在写入之后，等一段时间再读，Eg：写入后同步的时间是0.5s，读取的时候可以设置1s后再读，但是这个方案主要存在的问题就是，不知道主从同步完成所需要的时间。")]),t._v(" "),s("p",[s("strong",[t._v("降低并发")]),t._v("\n如果你理解了随机重放这个导致主从延迟的原因，那么就比较好理解了，控制主库写入的速度，主从延迟发生的概率自然就小了。{原因：因为主库中sql可能并发执行，可以控制并发速度}。")]),t._v(" "),s("p",[s("strong",[t._v("并行复制(推荐)")]),t._v("\nMySQL 5.6 版本后，提供了一种并行复制的方式，通过将 SQL 线程转换为多个 work 线程来进行重放，这样就解决了主从延迟的问题。")]),t._v(" "),s("h3",{attrs:{id:"_5-3-mysql为什么要分库分表-分库分表的策略有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-mysql为什么要分库分表-分库分表的策略有哪些"}},[t._v("#")]),t._v(" 5.3 Mysql为什么要分库分表？分库分表的策略有哪些？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆☆")])]),t._v(" "),s("h4",{attrs:{id:"_5-3-1-为什么要分库分表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-1-为什么要分库分表"}},[t._v("#")]),t._v(" 5.3.1 为什么要分库分表")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911220816527.png",alt:"image-20220911220816527"}})]),t._v(" "),s("p",[t._v("随着互联网及移动互联网的发展，应用系统的数据量也是成指数式增长，若采用单数据库进行数据存储，存在以下性能瓶颈：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("IO瓶颈：热点数据太多，数据库缓存不足，产生大量磁盘IO，效率较低。 请求数据太多，带宽不够，网络IO瓶颈。")])]),t._v(" "),s("li",[s("p",[t._v("CPU瓶颈：排序、分组、连接查询、聚合统计等SQL会耗费大量的CPU资源，请求数太多，CPU出现瓶颈。")])])]),t._v(" "),s("p",[t._v("为了解决上述问题，我们需要对数据库进行分库分表处理。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911220759014.png",alt:"image-20220911220759014"}})]),t._v(" "),s("p",[t._v("分库分表的中心思想都是将数据分散存储，使得单一数据库/表的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。")]),t._v(" "),s("h4",{attrs:{id:"_5-3-2-拆分策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-2-拆分策略"}},[t._v("#")]),t._v(" 5.3.2 拆分策略")]),t._v(" "),s("p",[t._v("分库分表的形式，主要是两种：垂直拆分和水平拆分。而拆分的粒度，一般又分为分库和分表，所以组成的拆分策略最终如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911220948216.png",alt:"image-20220911220948216"}})]),t._v(" "),s("h4",{attrs:{id:"_5-3-3-垂直拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-3-垂直拆分"}},[t._v("#")]),t._v(" 5.3.3 垂直拆分")]),t._v(" "),s("ol",[s("li",[t._v("垂直分库")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911221003953.png",alt:"image-20220911221003953"}})]),t._v(" "),s("p",[t._v("垂直分库：以表为依据，根据业务将不同表拆分到不同库中。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("每个库的表结构都不一样。")])]),t._v(" "),s("li",[s("p",[t._v("每个库的数据也不一样。")])]),t._v(" "),s("li",[s("p",[t._v("所有库的并集是全量数据。")])])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("垂直分表")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911221024489.png",alt:"image-20220911221024489"}})]),t._v(" "),s("p",[t._v("垂直分表：以字段为依据，根据字段属性将不同字段拆分到不同表中。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("每个表的结构都不一样。")])]),t._v(" "),s("li",[s("p",[t._v("每个表的数据也不一样，一般通过一列（主键/外键）关联。")])]),t._v(" "),s("li",[s("p",[t._v("所有表的并集是全量数据。")])])]),t._v(" "),s("h4",{attrs:{id:"_5-3-4-水平拆分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-4-水平拆分"}},[t._v("#")]),t._v(" 5.3.4  水平拆分")]),t._v(" "),s("ol",[s("li",[t._v("水平分库")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911221042512.png",alt:"image-20220911221042512"}})]),t._v(" "),s("p",[t._v("水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("每个库的表结构都一样。")])]),t._v(" "),s("li",[s("p",[t._v("每个库的数据都不一样。")])]),t._v(" "),s("li",[s("p",[t._v("所有库的并集是全量数据。")])])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("水平分表")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911221100744.png",alt:"image-20220911221100744"}})]),t._v(" "),s("p",[t._v("水平分表：以字段为依据，按照一定策略，将一个表的数据拆分到多个表中。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("每个表的表结构都一样。")])]),t._v(" "),s("li",[s("p",[t._v("每个表的数据都不一样。")])]),t._v(" "),s("li",[s("p",[t._v("所有表的并集是全量数据。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("在业务系统中，为了缓解磁盘IO及CPU的性能瓶颈，到底是垂直拆分，还是水平拆分；具体是分库，还是分表，都需要根据具体的业务需求具体分析。")])]),t._v(" "),s("h4",{attrs:{id:"_5-3-5-实现技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-5-实现技术"}},[t._v("#")]),t._v(" 5.3.5 实现技术")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("shardingJDBC：基于AOP原理，在应用程序中对本地执行的SQL进行拦截，解析、改写、路由处理。需要自行编码配置实现，只支持java语言，性能较高。")])]),t._v(" "),s("li",[s("p",[t._v("MyCat：数据库分库分表中间件，不用调整代码即可实现分库分表，支持多种语言，性能不及前者。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911221413349.png",alt:"image-20220911221413349"}})]),t._v(" "),s("h3",{attrs:{id:"_5-4-分库分表后id主键如何处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-分库分表后id主键如何处理"}},[t._v("#")]),t._v(" 5.4 分库分表后id主键如何处理？")]),t._v(" "),s("blockquote",[s("p",[t._v("难易程度：☆☆☆")]),t._v(" "),s("p",[t._v("出现频率：☆☆")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911221100744.png",alt:"image-20220911221100744"}})]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("主键自增")]),t._v("：数据库中间件可以设置主键的自增")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220911221829775.png",alt:"image-20220911221829775"}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("UUID")])]),t._v(" "),s("p",[t._v("好处就是本地生成，不要基于数据库来了；不好之处就是，UUID 太长了、占用空间大，"),s("strong",[t._v("作为主键性能太差")]),t._v(" 了；更重要的是，UUID 不具有有序性，会导致 B+ 树索引在写的时候有过多的随机写操作，不能产生有顺序的 append 操作，而需要进行 insert操作，将会读取整个 B+ 树节点到内存，在插入这条记录后会将整个节点写回磁盘，这种操作在记录占用空间比较 大的情况下，性能下降明显")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("snowflake")]),t._v(" "),s("strong",[t._v("算法")])])])]),t._v(" "),s("h2",{attrs:{id:"_6-mysql锁相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-mysql锁相关"}},[t._v("#")]),t._v(" 6.MySQL锁相关")]),t._v(" "),s("h3",{attrs:{id:"_6-1-mysql中有哪几种锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-mysql中有哪几种锁"}},[t._v("#")]),t._v(" 6.1 Mysql中有哪几种锁？")]),t._v(" "),s("p",[t._v("MySQL中的锁，按照锁的粒度分，分为以下三类：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("全局锁：锁定数据库中的所有表。")])]),t._v(" "),s("li",[s("p",[t._v("表级锁：每次操作锁住整张表。")])]),t._v(" "),s("li",[s("p",[t._v("行级锁：每次操作锁住对应的行数据。")])])]),t._v(" "),s("h3",{attrs:{id:"_6-3-表级锁和行级锁了解吗-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-表级锁和行级锁了解吗-有什么区别"}},[t._v("#")]),t._v(" 6.3 表级锁和行级锁了解吗？有什么区别？")]),t._v(" "),s("p",[t._v("表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。")]),t._v(" "),s("p",[t._v("行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。")]),t._v(" "),s("h3",{attrs:{id:"_6-4-意向锁有什么作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-意向锁有什么作用"}},[t._v("#")]),t._v(" 6.4 意向锁有什么作用？")]),t._v(" "),s("p",[t._v("1). 介绍")]),t._v(" "),s("p",[t._v("为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。")]),t._v(" "),s("p",[t._v("假如没有意向锁，客户端一对表加了行锁后，客户端二如何给表加表锁呢，来通过示意图简单分析一下：")]),t._v(" "),s("p",[t._v("首先客户端一，开启一个事务，然后执行DML操作，在执行DML语句时，会对涉及到的行加行锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918204320511.png",alt:"image-20220918204320511"}})]),t._v(" "),s("p",[t._v("当客户端二，想对这张表加表锁时，会检查当前表是否有对应的行锁，如果没有，则添加表锁，此时就会从第一行数据，检查到最后一行数据，效率较低。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918204337685.png",alt:"image-20220918204337685"}})]),t._v(" "),s("p",[t._v("有了意向锁之后 :")]),t._v(" "),s("p",[t._v("客户端一，在执行DML操作时，会对涉及的行加行锁，同时也会对该表加上意向锁。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918204355492.png",alt:"image-20220918204355492"}})]),t._v(" "),s("p",[t._v("而其他客户端，在对这张表加表锁的时候，会根据该表上所加的意向锁来判定是否可以成功加表锁，而不用逐行判断行锁情况了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918204413960.png",alt:"image-20220918204413960"}})]),t._v(" "),s("h3",{attrs:{id:"_6-5-共享锁和排他锁呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-共享锁和排他锁呢"}},[t._v("#")]),t._v(" 6.5 共享锁和排他锁呢？")]),t._v(" "),s("p",[t._v("InnoDB实现了以下两种类型的行锁：")]),t._v(" "),s("ul",[s("li",[t._v("共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。")]),t._v(" "),s("li",[t._v("排他锁（X）：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。")])]),t._v(" "),s("p",[t._v("常见的SQL语句，在执行时，所加的行锁如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("SQL")]),t._v(" "),s("th",[t._v("行锁类型")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("INSERT ...")]),t._v(" "),s("td",[t._v("排他锁")]),t._v(" "),s("td",[t._v("自动加锁")])]),t._v(" "),s("tr",[s("td",[t._v("UPDATE ...")]),t._v(" "),s("td",[t._v("排他锁")]),t._v(" "),s("td",[t._v("自动加锁")])]),t._v(" "),s("tr",[s("td",[t._v("DELETE ...")]),t._v(" "),s("td",[t._v("排他锁")]),t._v(" "),s("td",[t._v("自动加锁")])]),t._v(" "),s("tr",[s("td",[t._v("SELECT（正常）")]),t._v(" "),s("td",[t._v("不加任何锁")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("SELECT ...  LOCK IN SHARE   MODE")]),t._v(" "),s("td",[t._v("共享锁")]),t._v(" "),s("td",[t._v("需要手动在SELECT之后加LOCK IN   SHARE MODE")])]),t._v(" "),s("tr",[s("td",[t._v("SELECT ...  FOR UPDATE")]),t._v(" "),s("td",[t._v("排他锁")]),t._v(" "),s("td",[t._v("需要手动在SELECT之后加FOR UPDATE")])])])]),t._v(" "),s("h3",{attrs:{id:"_6-6-解释一下mvcc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-解释一下mvcc"}},[t._v("#")]),t._v(" 6.6 解释一下MVCC")]),t._v(" "),s("p",[t._v("全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。")]),t._v(" "),s("h4",{attrs:{id:"_6-6-1-隐藏字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-1-隐藏字段"}},[t._v("#")]),t._v(" 6.6.1 隐藏字段")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125155559099.png",alt:"image-20220125155559099"}})]),t._v(" "),s("p",[t._v("当我们创建了上面的这张表，我们在查看表结构的时候，就可以显式的看到这三个字段。 实际上除了这三个字段以外，InnoDB还会自动的给我们添加三个隐藏字段及其含义分别是：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("隐藏字段")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("DB_TRX_ID")]),t._v(" "),s("td",[t._v("最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID。")])]),t._v(" "),s("tr",[s("td",[t._v("DB_ROLL_PTR")]),t._v(" "),s("td",[t._v("回滚指针，指向这条记录的上一个版本，用于配合undo  log，指向上一个版本。")])]),t._v(" "),s("tr",[s("td",[t._v("DB_ROW_ID")]),t._v(" "),s("td",[t._v("隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段。")])])])]),t._v(" "),s("p",[t._v("而上述的前两个字段是肯定会添加的， 是否添加最后一个字段DB_ROW_ID，得看当前表有没有主键，如果有主键，则不会添加该隐藏字段。")]),t._v(" "),s("h4",{attrs:{id:"_6-6-2-undolog"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-2-undolog"}},[t._v("#")]),t._v(" 6.6.2 undolog")]),t._v(" "),s("p",[t._v("回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。")]),t._v(" "),s("p",[t._v("当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。")]),t._v(" "),s("p",[t._v("而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。")]),t._v(" "),s("h4",{attrs:{id:"_6-6-3-版本链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-3-版本链"}},[t._v("#")]),t._v(" 6.6.3 版本链")]),t._v(" "),s("p",[t._v("有一张表原始数据为：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125162711914.png",alt:"image-20220125162711914"}})]),t._v(" "),s("blockquote",[s("p",[t._v("DB_TRX_ID : 代表最近修改事务ID，记录插入这条记录或最后一次修改该记录的事务ID，是自增的。")]),t._v(" "),s("p",[t._v("DB_ROLL_PTR ： 由于这条数据是才插入的，没有被更新过，所以该字段值为null。")])]),t._v(" "),s("p",[t._v("然后，有四个并发事务同时在访问这张表。")]),t._v(" "),s("p",[t._v("A. 第一步")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125162202010.png",alt:"image-20220125162202010"}})]),t._v(" "),s("p",[t._v("当事务2执行第一条修改语句时，会记录undo log日志，记录数据变更之前的样子; 然后更新记录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918214543062.png",alt:"image-20220918214543062"}})]),t._v(" "),s("p",[t._v("B.第二步")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918214529046.png",alt:"image-20220918214529046"}})]),t._v(" "),s("p",[t._v("当事务3执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918214513175.png",alt:"image-20220918214513175"}})]),t._v(" "),s("p",[t._v("C. 第三步")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125163929573.png",alt:"image-20220125163929573"}})]),t._v(" "),s("p",[t._v("当事务4执行第一条修改语句时，也会记录undo log日志，记录数据变更之前的样子; 然后更新记录，并且记录本次操作的事务ID，回滚指针，回滚指针用来指定如果发生回滚，回滚到哪一个版本。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220918214457963.png",alt:"image-20220918214457963"}})]),t._v(" "),s("blockquote",[s("p",[t._v("最终我们发现，不同事务或相同事务对同一条记录进行修改，会导致该记录的undolog生成一条记录版本链表，链表的头部是最新的旧记录，链表尾部是最早的旧记录。")])]),t._v(" "),s("h4",{attrs:{id:"_6-6-4-readview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-4-readview"}},[t._v("#")]),t._v(" 6.6.4 readview")]),t._v(" "),s("p",[t._v("ReadView（读视图）是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。")]),t._v(" "),s("p",[t._v("ReadView中包含了四个核心字段：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("字段")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("m_ids")]),t._v(" "),s("td",[t._v("当前活跃的事务ID集合")])]),t._v(" "),s("tr",[s("td",[t._v("min_trx_id")]),t._v(" "),s("td",[t._v("最小活跃事务ID")])]),t._v(" "),s("tr",[s("td",[t._v("max_trx_id")]),t._v(" "),s("td",[t._v("预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）")])]),t._v(" "),s("tr",[s("td",[t._v("creator_trx_id")]),t._v(" "),s("td",[t._v("ReadView创建者的事务ID")])])])]),t._v(" "),s("p",[t._v("而在readview中就规定了版本链数据的访问规则：")]),t._v(" "),s("p",[t._v("trx_id 代表当前undolog版本链对应事务ID。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("条件")]),t._v(" "),s("th",[t._v("是否可以访问")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("trx_id == creator_trx_id")]),t._v(" "),s("td",[t._v("可以访问该版本")]),t._v(" "),s("td",[t._v("成立，说明数据是当前这个事务更改的。")])]),t._v(" "),s("tr",[s("td",[t._v("trx_id < min_trx_id")]),t._v(" "),s("td",[t._v("可以访问该版本")]),t._v(" "),s("td",[t._v("成立，说明数据已经提交了。")])]),t._v(" "),s("tr",[s("td",[t._v("trx_id > max_trx_id")]),t._v(" "),s("td",[t._v("不可以访问该版本")]),t._v(" "),s("td",[t._v("成立，说明该事务是在ReadView生成后才开启。")])]),t._v(" "),s("tr",[s("td",[t._v("min_trx_id <= trx_id <= max_trx_id")]),t._v(" "),s("td",[t._v("如果trx_id不在m_ids中，是可以访问该版本的")]),t._v(" "),s("td",[t._v("成立，说明数据已经提交。")])])])]),t._v(" "),s("p",[t._v("不同的隔离级别，生成ReadView的时机不同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("READ COMMITTED ：在事务中每一次执行快照读时生成ReadView。")])]),t._v(" "),s("li",[s("p",[t._v("REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。")])])]),t._v(" "),s("h4",{attrs:{id:"_6-6-5-原理分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-5-原理分析"}},[t._v("#")]),t._v(" 6.6.5 原理分析")]),t._v(" "),s("h5",{attrs:{id:"_6-6-5-1-rc隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-5-1-rc隔离级别"}},[t._v("#")]),t._v(" 6.6.5.1 RC隔离级别")]),t._v(" "),s("p",[t._v("RC隔离级别下，在事务中每一次执行快照读时生成ReadView。")]),t._v(" "),s("p",[t._v("我们就来分析事务5中，两次快照读读取数据，是如何获取数据的?")]),t._v(" "),s("p",[t._v("在事务5中，查询了两次id为30的记录，由于隔离级别为Read Committed，所以每一次进行快照读都会生成一个ReadView，那么两次生成的ReadView如下。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125225124616.png",alt:"image-20220125225124616"}})]),t._v(" "),s("p",[t._v("那么这两次快照读在获取数据时，就需要根据所生成的ReadView以及ReadView的版本链访问规则，到undolog版本链中匹配数据，最终决定此次快照读返回的数据。")]),t._v(" "),s("p",[t._v("A. 先来看第一次快照读具体的读取过程：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125225104133.png",alt:"image-20220125225104133"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125221055898.png",alt:"image-20220125221055898"}})]),t._v(" "),s("p",[t._v("在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("先匹配"),s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125221318271.png",alt:"image-20220125221318271"}}),t._v(" 这条记录，这条记录对应的trx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ，都不满足，则继续匹配undo log版本链的下一条。")])]),t._v(" "),s("li",[s("p",[t._v("再匹配第二条 "),s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125221613700.png",alt:"image-20220125221613700"}}),t._v(" ，这条记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②不满足 ③不满足 ④也不满足 ，都不满足，则继续匹配undo log版本链的下一条。")])]),t._v(" "),s("li",[s("p",[t._v("再匹配第三条 "),s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125222501959.png",alt:"image-20220125222501959"}}),t._v(" ，这条记录对应的trx_id为2，也就是将2带入右侧的匹配规则中。①不满足 ②满足 终止匹配，此次快照读，返回的数据就是版本链中记录的这条数据。")])])]),t._v(" "),s("p",[t._v("B. 再来看第二次快照读具体的读取过程:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125225338333.png",alt:"image-20220125225338333"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125225403552.png",alt:"image-20220125225403552"}})]),t._v(" "),s("p",[t._v("在进行匹配时，会从undo log的版本链，从上到下进行挨个匹配：")]),t._v(" "),s("ul",[s("li",[t._v("先匹配"),s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125221318271.png",alt:"image-20220125221318271"}}),t._v(" 这条记录，这条记录对应的trx_id为4，也就是将4带入右侧的匹配规则中。 ①不满足 ②不满足 ③不满足 ④也不满足 ，都不满足，则继续匹配undo log版本链的下一条。")]),t._v(" "),s("li",[t._v("再匹配第二条 "),s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125221613700.png",alt:"image-20220125221613700"}}),t._v(" ，这条记录对应的trx_id为3，也就是将3带入右侧的匹配规则中。①不满足 ②满足 。终止匹配，此次快照读，返回的数据就是版本链中记录的这条数据。")])]),t._v(" "),s("h5",{attrs:{id:"_6-6-5-2-rr隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-5-2-rr隔离级别"}},[t._v("#")]),t._v(" 6.6.5.2 RR隔离级别")]),t._v(" "),s("p",[t._v("RR隔离级别下，仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。 而RR 是可重复读，在一个事务中，执行两次相同的select语句，查询到的结果是一样的。")]),t._v(" "),s("p",[t._v("那MySQL是如何做到可重复读的呢? 我们简单分析一下就知道了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125225724902.png",alt:"image-20220125225724902"}})]),t._v(" "),s("p",[t._v("我们看到，在RR隔离级别下，只是在事务中第一次快照读时生成ReadView，后续都是复用该ReadView，那么既然ReadView都一样， ReadView的版本链匹配规则也一样， 那么最终快照读返回的结果也是一样的。")]),t._v(" "),s("p",[t._v("所以呢，MVCC的实现原理就是通过 InnoDB表的隐藏字段、UndoLog 版本链、ReadView来实现的。 而MVCC + 锁，则实现了事务的隔离性。 而一致性则是由redolog 与 undolog保证。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220125230214424.png",alt:"image-20220125230214424"}})]),t._v(" "),s("h2",{attrs:{id:"_7-面试现场"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-面试现场"}},[t._v("#")]),t._v(" 7 面试现场")]),t._v(" "),s("h3",{attrs:{id:"_7-1-sql规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-sql规范"}},[t._v("#")]),t._v(" 7.1 SQL规范")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面试官")]),t._v("：Mysql查询语句的执行顺序？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~~")]),t._v(" "),s("p",[t._v("我们一般编写sql的顺序是")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("           字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("             表名列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v("          表关联\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("            条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         分组字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v("           分组后的条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         排序字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v("            分页参数\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("其实sql的执行顺序是：")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v("             表名列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v("          表关联\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v("            条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         分组字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v("           分组后的条件列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v("           字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v("         排序字段列表\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v("            分页参数\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[s("strong",[t._v("面试官")]),t._v("：Mysql 如何实现多表查询？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，这个也分了好多种，分为内连接和外连接，还能自连接和子查询，这些都是多表查询")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("内连接又有两种")])]),t._v(" "),s("li",[s("p",[t._v("隐式："),s("code",[t._v("select ...from 表A,表B where 条件...")])])]),t._v(" "),s("li",[s("p",[t._v("显式："),s("code",[t._v("select ... from 表A inner join 表B on 条件...")])])]),t._v(" "),s("li",[s("p",[t._v("外连接也是两种")])]),t._v(" "),s("li",[s("p",[t._v("左外连接："),s("code",[t._v("select ...from 表A left join 表B on 条件...")])])]),t._v(" "),s("li",[s("p",[t._v("右外连接："),s("code",[t._v("select ...from 表A right join 表B on 条件...")])])]),t._v(" "),s("li",[s("p",[t._v("自连接，比如"),s("code",[t._v("select ...from 表A 别名1,表A 别名2 where 条件...")])])]),t._v(" "),s("li",[s("p",[t._v("子查询又包含了列子查询、行子查询、表子查询")])])]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：MYSQL内连接和外连接的区别 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~~是这样")]),t._v(" "),s("p",[t._v("内连接会取出连接表中匹配到的数据，匹配不到的不保留；")]),t._v(" "),s("p",[t._v("而外连接会取出连接表中匹配到的数据，匹配不到的也会保留，其值为NULL。")]),t._v(" "),s("ul",[s("li",[t._v("左外连接，以左边的表为主表")]),t._v(" "),s("li",[t._v("右外连接，以右边的表为主表")])]),t._v(" "),s("p",[t._v("以某一个表为主表后，进行关联查询，不管能不能关联的上，主表的数据都会保留，关联不上的以NULL显示")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：CHAR和VARCHAR的区别？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~~是这样的")]),t._v(" "),s("p",[t._v("区别主要有几个")]),t._v(" "),s("p",[t._v("第一，char最大长度是255字符，varchar最大长度是65535个字节。")]),t._v(" "),s("p",[t._v("第二，char是定长的，不足的部分用隐藏空格填充，varchar是不定长的。")]),t._v(" "),s("p",[t._v("第三，char会浪费空间，varchar会更加节省空间。")]),t._v(" "),s("p",[t._v("第四，查找效率：char查找效率会很高，varchar查找效率会更低。")]),t._v(" "),s("p",[t._v("​\t   varchar需要计算内容占用的长度，而char不会，所以char的效率稍高一些")]),t._v(" "),s("p",[t._v("在项目中的使用，这两种方式都会用到，比如像一些枚举值可以选择使用char，像一些描述信息或名字类可以选择使用varchar")])]),t._v(" "),s("h3",{attrs:{id:"_7-2-事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-事务"}},[t._v("#")]),t._v(" 7.2 事务")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面试官")]),t._v("：什么是事务？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("简单说就是由多个操作组成的一个逻辑单元，组成这个逻辑单元的多个操作要么都成功，要么都失败。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：ACID是什么？可以详细说一下吗？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~好的")]),t._v(" "),s("p",[t._v("A的意思是Atomicity原子性：就是上面说的,要么全部成功,要么全部失败，不可能只执行一部分操作。")]),t._v(" "),s("p",[t._v("C的意思是Consistency一致性：系统(数据库)总是从一个一致性的状态转移到另一个一致性的状态,不会存在中间状态。")]),t._v(" "),s("p",[t._v("I的意思是Isolation隔离性: "),s("strong",[t._v("通常")]),t._v("来说:一个事务在完全提交之前,对其他事务是不可见的.注意前面的通常来说加了红色,意味着有例外情况。")]),t._v(" "),s("p",[t._v("D的意思是Durability持久性：一旦事务提交,那么就永远是这样子了,哪怕系统崩溃也不会影响到这个事务的结果。")]),t._v(" "),s("p",[t._v("举例：转账")]),t._v(" "),s("p",[t._v("A向B转账500，转账成功，A扣除500元，B增加500元，原子操作体现在要么都成功，要么都失败")]),t._v(" "),s("p",[t._v("在转账的过程中，数据要一致，A扣除了500，B必须增加500")]),t._v(" "),s("p",[t._v("在转账的过程中，隔离性体现在A像B转账，不能受其他事务干扰")]),t._v(" "),s("p",[t._v("在转账的过程中，持久性体现在事务提交后，要把数据持久化（可以说是落盘操作）")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：并发事务带来哪些问题？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("我们在项目开发中，多个事务并发进行是经常发生的，并发也是必然的，有可能导致一些问题")]),t._v(" "),s("p",[t._v("第一是脏读（Dirty read）， 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。")]),t._v(" "),s("p",[t._v("第二是丢失修改（Lost to modify）：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。")]),t._v(" "),s("p",[t._v("第三是不可重复读（Unrepeatableread）：指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。")]),t._v(" "),s("p",[t._v("第四是幻读（Phantom read）：幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：怎么解决这些问题呢？MySQL的默认隔离级别是？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("解决方案是对事务进行隔离")]),t._v(" "),s("p",[t._v("MySQL支持四种隔离级别:")]),t._v(" "),s("p",[s("strong",[t._v("未提交读(READ UNCOMMITTED)")]),t._v("：这个隔离级别下,其他事务可以看到本事务没有提交的部分修改。因此会造成脏读的问题(读取到了其他事务未提交的部分,而之后该事务进行了回滚)。这个级别的性能没有足够大的优势,但是又有很多的问题,因此很少使用.")]),t._v(" "),s("p",[s("strong",[t._v("已提交读(READ COMMITTED)")]),t._v("：其他事务只能读取到本事务已经提交的部分。这个隔离级别有不可重复读的问题，在同一个事务内的两次读取,拿到的结果竟然不一样,因为另外一个事务对数据进行了修改。")]),t._v(" "),s("p",[s("strong",[t._v("REPEATABLE READ(可重复读)")]),t._v("：可重复读隔离级别解决了上面不可重复读的问题(看名字也知道)，但是不能完全解决幻读。MySql默认的事务隔离级别就是："),s("strong",[t._v("REPEATABLE READ")])]),t._v(" "),s("p",[s("strong",[t._v("SERIALIZABLE(可串行化)")]),t._v("：这是最高的隔离级别,可以解决上面提到的所有问题,因为他强制将所以的操作串行执行,这会导致并发性能极速下降,因此也不是很常用。")])]),t._v(" "),s("h3",{attrs:{id:"_7-3-索引"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-索引"}},[t._v("#")]),t._v(" 7.3 索引")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面试官")]),t._v("：MYSQL支持的存储引擎有哪些, 有什么区别 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("常见的存储有两个，InnoDB和MyISAM，当然mysql还支持其他的存储引擎，只是用的不多。")]),t._v(" "),s("p",[t._v("InnoDB和MyISAM主要的区别是：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("InnoDB支持事务，而MyISAM不支持事务")])]),t._v(" "),s("li",[s("p",[t._v("InnoDB支持表锁和行锁，MyISAM只支持表锁")])]),t._v(" "),s("li",[s("p",[t._v("InnoDB支持外键，MyISAM不支持外键")])])]),t._v(" "),s("p",[t._v("我们通常在创建表的时候都是使用的InnoDB作为存储引擎，而mysql5.5以后默认的引擎也是InnoDB")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：了解过Mysql的索引嘛 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，清楚的，这个是比较常用的")]),t._v(" "),s("p",[t._v("索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（B+树），这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：索引的底层数据结构了解过嘛 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，了解过~~~")]),t._v(" "),s("p",[t._v("MySQL默认使用的索引底层数据结构是B+树")]),t._v(" "),s("p",[t._v("B+树不同于二叉树，一种多叉路衡查找树，每个节点可以有多个分支")]),t._v(" "),s("p",[t._v("比如一棵5阶的B树，每一个节点最多存储4个key，对应5个指针。一旦节点存储的key数量到达5，就会裂变，中间元素向上分裂。所有的数据都会出现在叶子节点，叶子节点形成一个双向链表，利于范围查询。非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：什么是聚簇索引什么是非聚簇索引 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~~")]),t._v(" "),s("p",[t._v("在InnoDB存储引擎中，根据索引的存储形式，又可以分为以下两种：")]),t._v(" "),s("p",[t._v("聚集索引(Clustered  Index)，将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据，必须有,而且只有一个，通常情况下一个表的主键就是聚集索引，如果表不存在则会使用唯一索引作为聚集索引，如果也没有唯一索引，InnoDB会自动生成一个rowid作为隐藏的聚集索引")]),t._v(" "),s("p",[t._v("二级索引(Secondary  Index)，也可以成为非聚簇索引，将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键，可以存在多个。一般我们自己创建的复合索引这些都是二级索引")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：知道什么是回表查询嘛 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，知道的~")]),t._v(" "),s("p",[t._v("回表查询是使用二级索引中查找数据，找到主键值，然后再到聚集索引中根据主键值，获取数据的方式")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("p",[t._v("有一个user表，给user表中的name创建了索引，那这个name的索引其实就是二级索引")]),t._v(" "),s("p",[t._v("当我们select * from user where name = xx 的时候，条件name是可以走索引，但是要查询表中所有的字段，这个时候name的这个索引是没有的，但是能查询出来name这一行的id值，然后这个id值其实就是我们刚才说的聚集索引，然后根据这个id再去到索引去查一次，就相当于回表查询了")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：索引创建原则有哪些？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，这个限制很多，我想一下~~~~")]),t._v(" "),s("p",[t._v("有这么几种情况吧")]),t._v(" "),s("p",[t._v("1). 针对于数据量较大，且查询比较频繁的表建立索引。")]),t._v(" "),s("p",[t._v("2). 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。")]),t._v(" "),s("p",[t._v("3). 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。")]),t._v(" "),s("p",[t._v("4). 如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。")]),t._v(" "),s("p",[t._v("5). 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。")]),t._v(" "),s("p",[t._v("6). 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。")]),t._v(" "),s("p",[t._v("7). 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：知道什么是左前缀原则嘛 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯！！，这个是比较常见的")]),t._v(" "),s("p",[t._v("就是说如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效(后面的字段索引失效)。")]),t._v(" "),s("p",[t._v("比如有一个user表，给里面的字段创建了一个复合索引，顺序是name,age,email")]),t._v(" "),s("p",[t._v("当查询索引不包含name的时候会失效的，当然查询name和age则不会失效，查询name和email跳过了age，则只有name会命中索引")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：知道什么叫覆盖索引嘛 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~~")]),t._v(" "),s("p",[t._v("覆盖索引是指 查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。")]),t._v(" "),s("p",[t._v("比如有一个user表，给里面的字段创建了一个复合索引，顺序是name,age,email")]),t._v(" "),s("p",[t._v("当查询索引只select后面只包含name,age,email的时候就算是覆盖索引了")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：索引是越多越好嘛? 什么样的字段需要建索引, 什么样的字段不需要 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。")]),t._v(" "),s("p",[t._v("有些字段是不适合创建索引的，比如")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("更新频繁字段不适合创建索引")])]),t._v(" "),s("li",[s("p",[t._v("若是不能有效区分数据的列不适合做索引列(如性别，男女未知，最多也就三种，区分度实在太低)")])]),t._v(" "),s("li",[s("p",[t._v("对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。")])]),t._v(" "),s("li",[s("p",[t._v("比如省会，城市、月份")])]),t._v(" "),s("li",[s("p",[t._v("对于定义为text、image和bit的数据类型的列不要建立索引。")])])]),t._v(" "),s("p",[t._v("我们通常创建索引都是选择，比如")]),t._v(" "),s("ul",[s("li",[t._v("数据量较大，且查询比较频繁的表建立索引。")])]),t._v(" "),s("p",[t._v("针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。")])]),t._v(" "),s("h3",{attrs:{id:"_7-4-调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-调优"}},[t._v("#")]),t._v(" 7.4 调优")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面试官")]),t._v("：如何定位慢查询 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("可以开启mysql的慢查询日志")]),t._v(" "),s("p",[t._v("慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。")]),t._v(" "),s("p",[t._v("如果要开启慢查询日志，需要在MySQL的配置文件中开启就行了，配置完毕之后，一旦产生了慢查询可以查看慢日志文件中记录的信息 /var/lib/mysql/localhost-slow.log，然后在进行分析就行了")]),t._v(" "),s("p",[t._v("我们一般设置的一条sql执行的时间超过2秒，就会记录到慢日志文件中")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：一个SQL语句执行很慢, 如何分析 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("可以采用EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。")]),t._v(" "),s("p",[t._v("主要可以根据几个字段，判断sql是否需要优化，特别是是否能命中索引或命中索引的情况")]),t._v(" "),s("ul",[s("li",[t._v("type 通过sql的连接的类型进行优化")]),t._v(" "),s("li",[t._v("possible_key  通过它查看是否可能会命中索引")]),t._v(" "),s("li",[t._v("key 当前sql实际命中的索引")]),t._v(" "),s("li",[t._v("key_len 索引占用的大小")]),t._v(" "),s("li",[t._v("Extra 额外的优化建议")])]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：什么情况下索引会失效 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，这个情况有很多，比如：")]),t._v(" "),s("p",[t._v("1). 违反了最左前缀法则")]),t._v(" "),s("p",[t._v("2). 范围查询右边的列，不能使用索引 。")]),t._v(" "),s("p",[t._v("3). 在索引列上进行运算操作， 索引将失效。")]),t._v(" "),s("p",[t._v("4). 字符串不加单引号，造成索引失效。")]),t._v(" "),s("p",[t._v("5). 尽量使用覆盖索引，避免select *\n尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。")]),t._v(" "),s("p",[t._v("如果查询列，超出索引列，也会降低性能。")]),t._v(" "),s("p",[t._v("6). 用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。")]),t._v(" "),s("p",[t._v("7). 以%开头的Like模糊查询，索引失效。通过覆盖索引来解决")]),t._v(" "),s("p",[t._v("8). 如果MySQL评估使用索引比全表更慢，则不使用索引。")]),t._v(" "),s("p",[t._v("9). is NULL ， is NOT NULL 有时索引失效。")]),t._v(" "),s("p",[t._v("10). in 走索引， not in 索引失效。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：MYSQL超大分页怎么处理 ?")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("在数据量比较大时，如果进行limit分页查询，在查询时，越往后，分页查询效率越低。")]),t._v(" "),s("p",[t._v("一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，然后通过覆盖索引加子查询形式进行优化。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：谈谈你对sql的优化的经验")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，这个是方面的，我谈下我们的做法：")]),t._v(" "),s("p",[t._v("①选择表合适存储引擎：")]),t._v(" "),s("ul",[s("li",[t._v("myisam: 应用时以读和插入操作为主，只有少量的更新和删除，并且对事务的完整性，并发性要求不是很高的。")]),t._v(" "),s("li",[t._v("Innodb： 事务处理，以及并发条件下要求数据的一致性。除了插入和查询外，包括很多的更新和删除。尽量 设计 所有字段都得有默认值,尽量避免null。")])]),t._v(" "),s("p",[t._v("②选择合适的数据类型")]),t._v(" "),s("p",[t._v("数据库表设计时候更小的占磁盘空间尽可能使用更小的整数类型，一般来说，数据库中的表越小，在它上面执行的查询也就会越快。")]),t._v(" "),s("p",[t._v("比如设置合适的数值（tinyint   int   bigint），要根据实际情况选择")]),t._v(" "),s("p",[t._v("比如设置合适的字符串类型（char和varchar）char定长效率高，varchar可变长度，效率稍低")]),t._v(" "),s("p",[t._v("③索引优化")]),t._v(" "),s("ul",[s("li",[t._v("表的主键、外键必须有索引；")]),t._v(" "),s("li",[t._v("数据量大的表应该有索引；")]),t._v(" "),s("li",[t._v("经常与其他表进行连接的表，在连接字段上应该建立索引；")]),t._v(" "),s("li",[t._v("经常出现在Where子句中的字段，特别是大表的字段，应该建立索引；")]),t._v(" "),s("li",[t._v("索引应该建在选择性高的字段上； （sex 性别这种就不适合）")]),t._v(" "),s("li",[t._v("索引应该建在小字段上，对于大的文本字段甚至超长字段，不要建索引；")]),t._v(" "),s("li",[t._v("频繁进行数据操作的表，不要建立太多的索引；")]),t._v(" "),s("li",[t._v("删除无用的索引，避免对执行计划造成负面影响；")])]),t._v(" "),s("p",[t._v("④sql语句优化")]),t._v(" "),s("ul",[s("li",[t._v("SELECT语句务必指明字段名称（避免直接使用select * ）")]),t._v(" "),s("li",[t._v("SQL语句要避免造成索引失效的写法")]),t._v(" "),s("li",[t._v("SQL语句中IN包含的值不应过多")]),t._v(" "),s("li",[t._v("当只需要一条数据的时候，使用limit 1")]),t._v(" "),s("li",[t._v("如果排序字段没有用到索引，就尽量少排序")]),t._v(" "),s("li",[t._v("如果限制条件中其他字段没有索引，尽量少用or")]),t._v(" "),s("li",[t._v("尽量用union all代替union")]),t._v(" "),s("li",[t._v("避免在where子句中对字段进行null值判断")]),t._v(" "),s("li",[t._v("不建议使用%前缀模糊查询")]),t._v(" "),s("li",[t._v("避免在where子句中对字段进行表达式操作")]),t._v(" "),s("li",[t._v("Join优化 能用innerjoin 就不用left join right join，如必须使用 一定要已小表为驱动")])]),t._v(" "),s("p",[t._v("⑤主从复制、读写分离")]),t._v(" "),s("p",[t._v("如果数据库的使用场景读的操作比较的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构，读写分离，解决的是，数据库的写入，影响了查询的效率。读写分离的基本原理是让主数据库处理事务性增、改、删操作（INSERT、UPDATE、DELETE），而从数据库处理SELECT查询操作。 数据库复制被用来把事务性操作导致的变更同步到集群中的从数据库。")]),t._v(" "),s("p",[t._v("⑥mysql的分库分表")]),t._v(" "),s("p",[t._v("当单表的数据量太大或单库的数据量太大的话，性能会降的比较厉害，这个时候就要考虑选择合适的拆分策略，比如垂直分库和水平分库")])]),t._v(" "),s("h3",{attrs:{id:"_7-5-分库分表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-分库分表"}},[t._v("#")]),t._v(" 7.5 分库分表")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面试官")]),t._v("：说一下主从同步的原理？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，好的。")]),t._v(" "),s("p",[t._v("MySQL主从复制的核心就是二进制日志，二进制日志记录了所有的 DDL语句和 DML语句")]),t._v(" "),s("p",[t._v("具体的主从同步过程大概的流程是这样的：")]),t._v(" "),s("ol",[s("li",[t._v("Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。")]),t._v(" "),s("li",[t._v("从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。")]),t._v(" "),s("li",[t._v("slave重做中继日志中的事件，将改变反映它自己的数据。")])]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：好的，如果读写分离的时候主从同步延时怎么解决？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，我想一下~~~")]),t._v(" "),s("p",[t._v("其实在实际应用中如果数据量超大的话，可能会出现延迟，MySQL的主从复制都是单线程的操作，主库对所有DDL和DML产生的日志写进binlog，由于binlog是顺序写，所以效率很高。Slave的SQL Thread线程将主库的DDL和DML操作事件在slave中重放。DML和DDL的IO操作是随机的，不是顺序的，成本高很多。所以SQL Thread线程的速度赶不上主库写binlog的速度，就会产生主从延迟")]),t._v(" "),s("p",[t._v("第二个出现延迟的情况是由于SQL Thread也是单线程的，当主库的并发较高时，产生的DML数量超过slave的SQL Thread所能处理的速度，或者当slave中有大型query语句产生了锁等待那么延时就产生了。")]),t._v(" "),s("p",[t._v("那解决方案的可以设置并行复制\nMySQL 5.6 版本后，提供了一种并行复制的方式，通过将 SQL 线程转换为多个 work 线程来进行重放，这样就解决了主从延迟的问题。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：Mysql为什么要分库分表？分库分表的策略有哪些？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("我们当时项目业务量其实一直都在增长，有的单表就接近了2千万的数据，如果不分库分表的话，性能会直线下降。")]),t._v(" "),s("p",[t._v("那关于数据库拆分的策略有很多，比如：垂直分库，垂直分表、水平分库，水平分表。")]),t._v(" "),s("p",[t._v("因为我们现在微服务项目的开发，每个微服务都是管理的自己的业务库，在一定意义上其实已经进行了垂直分库，不过如果单库的数据量太大的话，也是装不下，所以，我们后来又进行了水平分库")]),t._v(" "),s("p",[t._v("水平分库：以字段为依据，按照一定策略，将一个库的数据拆分到多个库中。当然为了让我们的微服务刚方便的去调用多个库中的数据，我们当时采用的mycat作为我们的分库分表的中间件来使用的。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：分库分表后id主键如何处理？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，这个也有很多种方案")]),t._v(" "),s("p",[t._v("第一如果选择的主键还是自增的话，可以使用数据库中间件去解决，比如mycat，就能在配置中设置一个表是自增，由mycat帮助我们去设置自增")]),t._v(" "),s("p",[t._v("第二，如果不是自增的，可以选择UUID或雪花算法来生成id，尽可能不要使用UUID，因为UUID 太长了、占用空间大，作为主键的性能不高，也不能排序")])]),t._v(" "),s("h3",{attrs:{id:"_7-6-mysql锁相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-mysql锁相关"}},[t._v("#")]),t._v(" 7.6 MySQL锁相关")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面试官")]),t._v("：Mysql中有哪几种锁？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~~~")]),t._v(" "),s("p",[t._v("MySQL中按照锁的粒度分有三类，分别是")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("全局锁：锁定数据库中的所有表。")])]),t._v(" "),s("li",[s("p",[t._v("表级锁：每次操作锁住整张表。")])]),t._v(" "),s("li",[s("p",[t._v("行级锁：每次操作锁住对应的行数据。")])])]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：表级锁和行级锁了解吗？有什么区别？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~是这样的")]),t._v(" "),s("p",[t._v("表级锁，每次操作锁住整张表。锁定粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM、InnoDB等存储引擎中。")]),t._v(" "),s("p",[t._v("行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：意向锁有什么作用？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，是这样的")]),t._v(" "),s("p",[t._v("我们在DML操作的时候有可能会产生行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减少表锁的检查。")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：共享锁和排他锁呢？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("InnoDB实现了两种类型的行锁，第一个就是共享锁，第二个是拍他锁")]),t._v(" "),s("ul",[s("li",[t._v("共享锁是指允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。")]),t._v(" "),s("li",[t._v("排他锁是指允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。")])]),t._v(" "),s("p",[t._v("在我们平时的sql语句中，insert、update、delete都会自动添加排他锁，而select不会加锁")]),t._v(" "),s("p",[t._v("当然，如果select想要加锁也是可以的，如果是共享锁的话则可以在select之后加LOCK IN   SHARE MODE  ，如果是排他锁需要手动在SELECT之后加FOR UPDATE")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：解释一下MVCC")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯~~")]),t._v(" "),s("p",[t._v("MVCC多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MySQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("三个隐藏字段分别是隐藏主键，事务ID，回滚指针。")])]),t._v(" "),s("li",[s("p",[t._v("undo log是各个事务修改同一条记录的时候生成的历史记录，方便回滚，同时会生成一条版本链。")])]),t._v(" "),s("li",[s("p",[t._v("ReadView（读视图）是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。")])]),t._v(" "),s("li",[s("p",[t._v("ReadView中包含了四个核心字段：")]),t._v(" "),s("ul",[s("li",[t._v("m_ids：当前活跃的事务ID集合")]),t._v(" "),s("li",[t._v("min_trx_id：最小活跃事务ID")]),t._v(" "),s("li",[t._v("max_trx_id：预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）")]),t._v(" "),s("li",[t._v("creator_trx_id：ReadView创建者的事务ID")])])]),t._v(" "),s("li",[s("p",[t._v("而在readview中就规定了版本链数据的访问规则：")]),t._v(" "),s("p",[t._v("trx_id 代表当前undolog版本链对应事务ID。")]),t._v(" "),s("ul",[s("li",[t._v("trx_id == creator_trx_id 可以访问该版本，成立，说明数据是当前这个事务更改的。")]),t._v(" "),s("li",[t._v("trx_id < min_trx_id 可以访问该版本，成立，说明数据已经提交了。")]),t._v(" "),s("li",[t._v("trx_id > max_trx_id 不可以访问该版本，成立，说明该事务是在ReadView生成后才开启。")]),t._v(" "),s("li",[t._v("min_trx_id <= trx_id <= max_trx_id，如果trx_id不在m_ids中，是可以访问该版本的，成立，说明数据已经提交。")])])])]),t._v(" "),s("p",[t._v("不同的隔离级别，生成ReadView的时机不同：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("READ COMMITTED ：在事务中每一次执行快照读时生成ReadView。")])]),t._v(" "),s("li",[s("p",[t._v("REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。")])])])])])}),[],!1,null,null,null);s.default=v.exports}}]);