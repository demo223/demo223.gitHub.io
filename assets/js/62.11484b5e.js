(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{344:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"springboot面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springboot面试题"}},[t._v("#")]),t._v(" SpringBoot面试题")]),t._v(" "),a("h2",{attrs:{id:"_1、spring-的两大核心是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、spring-的两大核心是什么"}},[t._v("#")]),t._v(" 1、Spring 的两大核心是什么?")]),t._v(" "),a("p",[t._v("Spring 的两大核心是："),a("code",[t._v("IOC")]),t._v("（控制翻转）和 "),a("code",[t._v("AOP")]),t._v("（面向切面编程）")]),t._v(" "),a("p",[a("code",[t._v("DI")]),t._v("(Dependency Injection)即依赖注入，是"),a("code",[t._v("IOC")]),t._v("的一种实现方式。")]),t._v(" "),a("h2",{attrs:{id:"_2、谈一谈你对-ioc-的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、谈一谈你对-ioc-的理解"}},[t._v("#")]),t._v(" 2、谈一谈你对 IOC 的理解")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/wanghao72214/article/details/3969594",target:"_blank",rel:"noopener noreferrer"}},[t._v("资料参考地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("IOC 的意思是"),a("strong",[t._v("控制反转")]),t._v("，是指==创建对象的控制权的转移，以前创建对象的主动权和时机是由自己把控的，而现在把这种权力转移到 Spring 容器中==，并由容器根据配置文件去创建实例和管理各个实例之 间的依赖关系，对象与对象之间松散耦合，也利于功能的复用。最直观的表达就是，IOC 让对象的创建不用去 "),a("code",[t._v("new")]),t._v("了，可以由 spring 根据我们提供的配置文件自动生产，我们需要对象的时候，直接从 Spring 容器中获取即可。")]),t._v(" "),a("p",[t._v("Spring 的配置文件中配置了类的字节码位置及信息，容器生成的时候加载配置文件识别字节码信息，通过反射创建类的对象。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("IOC(Inversion of Control)是一种设计思想，它将应用程序中对象之间的控制权反转过来，由容器来负责对象的生命周期管理和依赖关系维护。这意味着对象不再自行创建和管理所需的其他对象，而是由容器自动注入。这样可以更好地管理对象之间的依赖关系，以及减少代码冗余，提高代码的可测试性和可维护性。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230208161625213.png",alt:"image-20230208161625213"}})]),t._v(" "),a("p",[t._v("由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Spring的IoC容器支持三种注入方式：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("属性注入")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Setter 注入")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Controller")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Setter 注入")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setUserService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("构造方法注入")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Controller")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  使用构造方法注入可以注入不可变对象")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserController")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" userService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userService "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" userService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])])])]),t._v(" "),a("h2",{attrs:{id:"_3、ioc的优点有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、ioc的优点有哪些"}},[t._v("#")]),t._v(" 3、IOC的优点有哪些？")]),t._v(" "),a("ol",[a("li",[t._v("解耦：对象之间的依赖关系由容器维护，而不是代码本身，因此可以减少代码间的耦合。")]),t._v(" "),a("li",[t._v("可维护性：通过IoC容器管理对象的生命周期和依赖关系，使得代码更易维护。")]),t._v(" "),a("li",[t._v("可测试性：通过注入模拟的对象，可以更方便地对单个对象进行测试，减少了对整个系统的测试难度。")]),t._v(" "),a("li",[t._v("易于重用：通过IoC容器管理对象的依赖关系，可以更方便地将对象复用到其他地方。")]),t._v(" "),a("li",[t._v("易于扩展：通过IoC容器管理对象的生命周期和依赖关系，可以更方便地对系统进行扩展。")])]),t._v(" "),a("h2",{attrs:{id:"_4、谈一下你对aop的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、谈一下你对aop的理解"}},[t._v("#")]),t._v(" 4、谈一下你对AOP的理解")]),t._v(" "),a("p",[t._v("AOP一般称为==面向切面编程==，作为面向对象OOP的一种补充，==用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”==（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。")]),t._v(" "),a("p",[t._v("在我们的项目中我们自己写AOP的场景其实很少 , 但是我们使用的很多框架的功能底层都是AOP  , 例如 ：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("统一日志处理")])]),t._v(" "),a("li",[a("p",[t._v("spring中内置的事务处理")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("得分点")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("AOP概念")])]),t._v(" "),a("li",[a("p",[t._v("AOP作用")])]),t._v(" "),a("li",[a("p",[t._v("AOP的实现方式")]),t._v(" "),a("p",[t._v("​")])])]),t._v(" "),a("p",[a("strong",[t._v("标准回答")])]),t._v(" "),a("p",[t._v("AOP是一种编程思想，是通过==预编译方式和运行期动态代理==的方式"),a("strong",[t._v("实现不修改源代码的情况下给程序动态统一添加功能的技术")]),t._v("。面向对象编程将程序抽象成各个层次的对象，而面向切面编程是将程序抽象成各个切面。所谓切面，相当于应用对象间的横切点，我们可以将其单独抽象为单独的模块。 AOP技术利用一种称为“横切”的技术，剖解开封装对象的内部，将影响多个类的公共行为封装到一个可重用的模块中，并将其命名为"),a("strong",[t._v("切面")]),t._v("。所谓的切面，简单来说就是与业务无关，却为业务模块所共同调用的逻辑，将其封装起来便于减少系统的重复代码，降低模块的耦合度，有利用未来的可操作性和可维护性。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("利用AOP可以对业务逻辑各个部分进行隔离，从而使业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高开发效率。")]),t._v(" "),a("ol",[a("li",[t._v("减少代码重复：通过抽象公共行为到单独的切面，避免了系统中重复代码的出现。")]),t._v(" "),a("li",[t._v("提高模块间的松耦合性：切面中的逻辑不直接影响业务模块，提高了模块间的松耦合性。")]),t._v(" "),a("li",[t._v("提高代码可维护性：通过抽象切面的方式，使代码变得更加清晰，提高了代码的可维护性。")]),t._v(" "),a("li",[t._v("支持动态添加功能：通过AOP技术，可以在运行期动态给程序添加功能，不需要修改源代码。")]),t._v(" "),a("li",[t._v("提高代码的可读性：通过抽象切面的方式，使代码更加清晰易懂，提高了代码的可读性。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("AOP可以有多种实现方式，而Spring AOP支持如下两种实现方式。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("JDK")]),t._v("动态代理：这是Java提供的动态代理技术，可以在运行时创建接口的代理实例。Spring AOP默认采用这种方式，在接口的代理实例中织入代码。")]),t._v(" "),a("li",[a("code",[t._v("CGLib")]),t._v("动态代理：采用底层的字节码技术，在运行时创建子类代理的实例。当目标对象不存在接口时，Spring AOP就会采用这种方式，在子类实例中织入代码。")])]),t._v(" "),a("p",[t._v("二者区别："),a("code",[t._v("JDK")]),t._v("代理只能==对实现接口的类生成代理==；"),a("code",[t._v("CGlib")]),t._v("是==针对类实现代理，对指定的类生成一个子类，并覆盖其中的方法==，这种通过继承类的实现方式，不能代理"),a("code",[t._v("final")]),t._v("修饰的类。")]),t._v(" "),a("p",[t._v("关于AOP中使用的是"),a("code",[t._v("JDK")]),t._v("代理还是"),a("code",[t._v("CGLib")]),t._v("代理")]),t._v(" "),a("p",[t._v("SpringBoot默认配置"),a("code",[t._v("spring.aop.proxy-target-class=true")]),t._v("(使用类代理，而不是接口代理。)，此时无论目标是否实现接口，都是采用"),a("code",[t._v("cglib")])]),t._v(" "),a("p",[t._v("如果设置了 "),a("code",[t._v("spring.aop.proxy-target-class=false")]),t._v("，那么又分两种情况")]),t._v(" "),a("ul",[a("li",[t._v("如果在AOP中被代理的是一个==接口的实现类==，那么AOP中使用就是"),a("code",[t._v("JDK")]),t._v("动态代理")]),t._v(" "),a("li",[t._v("如果在AOP中被代理的类是一个==普通类==，那么AOP中使用就是"),a("code",[t._v("CGlib")]),t._v("动态代理")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("动态代理")]),t._v("是23种设计模式中的一种，属于结构型模式。==动态代理类不是在编译时生成的，而是在运行时通过反射机制动态生成的==。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰。")])]),t._v(" "),a("p",[a("strong",[t._v("加分回答")])]),t._v(" "),a("p",[t._v("在应用场景方面，Spring AOP为IOC的使用提供了更多的便利，一方面，应用可以直接使用AOP的功能，设计应用的横切关注点，把跨越应用程序多个模块的功能抽象出来，并通过简单的AOP的使用，灵活地编制到模块中，比如可以通过AOP实现应用程序中的==日志功能==。另一方面，在Spring内部，例如==事务处理==之类的一些支持模块也是通过Spring AOP来实现的。 AOP不能增强的类： 1. Spring AOP只能对IOC容器中的Bean进行增强，对于不受容器管理的对象不能增强。 2. 由于CGLib采用动态创建子类的方式生成代理对象，所以不能对final修饰的类进行代理。")]),t._v(" "),a("h2",{attrs:{id:"_5、spring-bean的生命周期-高薪常问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、spring-bean的生命周期-高薪常问"}},[t._v("#")]),t._v(" 5、Spring Bean的生命周期?(高薪常问)")]),t._v(" "),a("ol",[a("li",[t._v("Bean 创建：Spring 容器通过读取配置信息并创建 Bean 对象。")]),t._v(" "),a("li",[t._v("Bean 初始化：在 Bean 创建完成后，容器将对 Bean 进行初始化，包括对 Bean 进行属性设置、对 Bean 进行任何必要的初始化操作。")]),t._v(" "),a("li",[t._v("Bean 调用：容器初始化完成后，开始调用 Bean，执行 Bean 中的业务逻辑。")]),t._v(" "),a("li",[t._v("Bean 销毁：当容器关闭时，容器将调用 Bean 的销毁方法，对 Bean 进行清理和回收资源操作。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("得分点")])]),t._v(" "),a("ul",[a("li",[t._v("Spring Bean生命周期的==四大部分==以及详细步骤")])]),t._v(" "),a("p",[a("strong",[t._v("标准回答")])]),t._v(" "),a("p",[t._v("Bean 生命周期大致分为 Bean 的"),a("strong",[t._v("创建")]),t._v("，"),a("strong",[t._v("初始化")]),t._v("，"),a("strong",[t._v("调用")]),t._v("，"),a("strong",[t._v("销毁")]),t._v("4个部分。")]),t._v(" "),a("p",[a("strong",[t._v("具体步骤如下")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Spring启动，查找并加载需要被Spring管理的bean，进行Bean的实例化")])]),t._v(" "),a("li",[a("p",[t._v("Bean实例化后对将Bean的引入和值注入到Bean的属性中")])]),t._v(" "),a("li",[a("p",[t._v("如果Bean实现了BeanNameAware接口的话，Spring将Bean的Id传递给setBeanName()方法")])]),t._v(" "),a("li",[a("p",[t._v("如果Bean实现了BeanFactoryAware接口的话，Spring将调用setBeanFactory()方法，将BeanFactory容器实例传入")])]),t._v(" "),a("li",[a("p",[t._v("如果Bean实现了ApplicationContextAware接口的话，Spring将调用Bean的setApplicationContext()方法，将bean所在应用上下文引用传入进来。")])]),t._v(" "),a("li",[a("p",[t._v("如果Bean实现了BeanPostProcessor接口，Spring就将调用他们的postProcessBeforeInitialization()方法。")])]),t._v(" "),a("li",[a("p",[t._v("如果Bean 实现了InitializingBean接口，Spring将调用他们的afterPropertiesSet()方法。类似的，如果bean使用init-method声明了初始化方法，该方法也会被调用")])]),t._v(" "),a("li",[a("p",[t._v("如果Bean 实现了BeanPostProcessor接口，Spring就将调用他们的postProcessAfterInitialization()方法。")])]),t._v(" "),a("li",[a("p",[t._v("此时，Bean已经准备就绪，可以被应用程序使用了。他们将一直驻留在应用上下文中，直到应用上下文被销毁。")])]),t._v(" "),a("li",[a("p",[t._v("如果bean实现了DisposableBean接口，Spring将调用它的destory()接口方法，同样，如果bean使用了destory-method 声明销毁方法，该方法也会被调用。")])])]),t._v(" "),a("p",[a("strong",[t._v("加分回答")])]),t._v(" "),a("p",[t._v("这个过程是由Spring容器自动管理的，其中有两个环节我们可以进行干预。 1. 我们可以自定义初始化方法，并在该方法前增加@PostConstruct注解，届时Spring容器将在调用SetBeanFactory方法之后调用该方法。 2. 我们可以自定义销毁方法，并在该方法前增加@PreDestroy注解，届时Spring容器将在自身销毁前，调用这个方法。")]),t._v(" "),a("blockquote",[a("p",[t._v("Spring Bean的生命周期包括以下阶段：")]),t._v(" "),a("ol",[a("li",[t._v("实例化（Instantiation）：当Spring容器启动时，它会读取配置文件并创建Bean的实例。")]),t._v(" "),a("li",[t._v("属性赋值（Populating properties）：Spring容器会通过将属性值或引用注入到Bean中来完成属性赋值。")]),t._v(" "),a("li",[t._v("初始化（Initialization）：在所有的属性都被设置之后，Spring容器将调用Bean的初始化方法（如果有定义的话），例如init-method 。")]),t._v(" "),a("li",[t._v("使用（Using）：此时Bean已经可以使用了，可以被其他Bean依赖注入或通过ApplicationContext.getBean()方法获取。")]),t._v(" "),a("li",[t._v("销毁（Destroying）：当应用程序关闭时，Spring容器将销毁所有的Bean，并调用其销毁方法（如果有定义的话），例如destroy-method。")])])]),t._v(" "),a("h2",{attrs:{id:"_6、spring-支持-bean-的作用域有几种-必会"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、spring-支持-bean-的作用域有几种-必会"}},[t._v("#")]),t._v(" 6、Spring 支持 bean 的作用域有几种？(必会)")]),t._v(" "),a("p",[a("code",[t._v("@Scope")]),t._v(" 用于指定bean的作用范围。")]),t._v(" "),a("p",[t._v("在类上使用"),a("code",[t._v("@Scope")]),t._v("注解定义Bean的作用域，Spring支持五种作用域，==后三种在web环境("),a("code",[t._v("Spring MVC")]),t._v(")才生效==。")]),t._v(" "),a("p",[t._v("属性：value 指定范围的取值。常用取值："),a("code",[t._v("singleton")]),t._v("(单例)和"),a("code",[t._v("prototype")]),t._v("(多例)。")]),t._v(" "),a("p",[t._v("Spring支持以下五种bean的作用域：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("singleton")]),t._v("：默认作用域，单例模式，在整个应用中，同一个bean只有一个实例存在。")]),t._v(" "),a("li",[a("code",[t._v("prototype")]),t._v("：原型作用域，每次请求都会创建一个新的bean实例。")]),t._v(" "),a("li",[a("code",[t._v("request")]),t._v("：请求作用域，在Web应用中，每一次HTTP请求都会创建一个新的bean实例。")]),t._v(" "),a("li",[a("code",[t._v("session")]),t._v("：会话作用域，在Web应用中，一个用户的一次会话中只会有一个bean实例。")]),t._v(" "),a("li",[a("code",[t._v("application")]),t._v("：应用作用域，在整个应用中，同一个bean只有一个实例存在。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("@Scope")]),t._v(" 注解默认情况下为单例模式，因此加不加"),a("code",[t._v('@Scope("singleton)')]),t._v("都是一样的。")]),t._v(" "),a("p",[t._v("spring中singleton作用域和application作用域区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("singleton")]),t._v("是 Spring Core 的作⽤域；"),a("code",[t._v("application")]),t._v("是 Spring Web 中的作⽤域；")]),t._v(" "),a("li",[a("code",[t._v("singleton")]),t._v("作⽤于 "),a("code",[t._v("IOC")]),t._v("的容器，⽽ "),a("code",[t._v("application")]),t._v("作⽤于 "),a("code",[t._v("Servlet")]),t._v("容器。")])])]),t._v(" "),a("h2",{attrs:{id:"_7、beanfactory-和-applicationcontext-区别-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、beanfactory-和-applicationcontext-区别-了解"}},[t._v("#")]),t._v(" 7、BeanFactory 和 ApplicationContext 区别(了解)")]),t._v(" "),a("p",[a("code",[t._v("BeanFactory")]),t._v("和 "),a("code",[t._v("ApplicationContext")]),t._v("是两个用于==管理 Bean 的容器==。")]),t._v(" "),a("p",[a("code",[t._v("Spring")]),t._v("框架中"),a("code",[t._v("ApplicationContext")]),t._v("与"),a("code",[t._v("BeanFactory")]),t._v("的区别。其中，"),a("code",[t._v("BeanFactory")]),t._v("为"),a("code",[t._v("ApplicationContext")]),t._v("的父类，是一种继承关系，"),a("code",[t._v("ApplicationContext")]),t._v("的功能要强于"),a("code",[t._v("BeanFactory")]),t._v("。")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("BeanFactory")]),t._v(": "),a("code",[t._v("BeanFactory")]),t._v("在启动的时候不会去实例化，"),a("code",[t._v("BeanFactory")]),t._v("实现了懒加载，在 Bean 第一次被使用时才会初始化。")]),t._v(" "),a("li",[a("code",[t._v("ApplicationContext")]),t._v(": 是 "),a("code",[t._v("BeanFactory")]),t._v("的子接口，在 "),a("code",[t._v("BeanFactory")]),t._v("的基础上添加了更多的功能。"),a("code",[t._v("ApplicationContext")]),t._v("实现了 Bean 的预加载，即==在启动容器时已经初始化所有的 Bean==。")])]),t._v(" "),a("p",[t._v("为了在服务器启动的时候就能把费时的对象创建操作执行完成，在一般使用"),a("code",[t._v("Spring")]),t._v("框架编写程序的时候使用"),a("code",[t._v("ApplicationContext")]),t._v("接口来加载配置文件并创建对象。")]),t._v(" "),a("blockquote",[a("p",[t._v("Spring中的bean是由"),a("code",[t._v("ApplicationContext")]),t._v("创建的。 "),a("code",[t._v("BeanFactory")]),t._v("是 Spring IoC 容器的基础接口，而 "),a("code",[t._v("ApplicationContext")]),t._v("是 "),a("code",[t._v("BeanFactory")]),t._v("的子接口，并且提供了更多的高级特性，如消息资源处理、国际化、事件传播、访问上下文、AOP等。因此，通常情况下我们使用的是 "),a("code",[t._v("ApplicationContext")]),t._v("而不是 "),a("code",[t._v("BeanFactory")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"_8、spring-框架中都用到了哪些设计模式-必会"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、spring-框架中都用到了哪些设计模式-必会"}},[t._v("#")]),t._v(" 8、Spring 框架中都用到了哪些设计模式?(必会)")]),t._v(" "),a("p",[t._v("Spring 框架中使用了以下几种设计模式：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("工厂模式")]),t._v(" ： Spring使用工厂模式通过 BeanFactory、ApplicationContext创建 bean 对象。")]),t._v(" "),a("li",[a("strong",[t._v("代理模式")]),t._v(" ： Spring AOP 功能的实现。")]),t._v(" "),a("li",[a("strong",[t._v("单例模式")]),t._v(" ： Spring 中的 Bean 默认都是单例的。")]),t._v(" "),a("li",[a("strong",[t._v("模板方法模式")]),t._v(" ： Spring 中 jdbcTemplate、RestTemplate等以 Template结尾的对数据库操作的类，它们就使用到了模板模式。")]),t._v(" "),a("li",[a("strong",[t._v("观察者模式")]),t._v("： Spring 事件驱动模型就是观察者模式很经典的一个应用。")]),t._v(" "),a("li",[a("strong",[t._v("包装器设计模式")]),t._v(" ： 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。")]),t._v(" "),a("li",[a("strong",[t._v("适配器模式")]),t._v(" ：Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配Controller。")])]),t._v(" "),a("h2",{attrs:{id:"_9、spring-事务的实现方式和实现原理-必会"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、spring-事务的实现方式和实现原理-必会"}},[t._v("#")]),t._v(" 9、Spring 事务的实现方式和实现原理(必会)")]),t._v(" "),a("p",[t._v("Spring 事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring 是无法提供事务功能的。真正的数据库层的事务提交和回滚是通过 "),a("code",[t._v("binlog")]),t._v("或者 "),a("code",[t._v("undolog")]),t._v("实现的。")]),t._v(" "),a("p",[t._v("spring 事务实现主要有两种方法")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("编程式事务管理")]),t._v("，基于 "),a("code",[t._v("transactionTemplate")]),t._v("的声明式事务管理，此种方式是自动的事务管理，无需手动开启、提交、回滚。")]),t._v(" "),a("li",[a("strong",[t._v("声明式事务管理")]),t._v("，利用注解 "),a("code",[t._v("@Transactional")]),t._v("或者 "),a("code",[t._v("aop")]),t._v("配置，唯一不足地方是，最细粒度只能作用到==方法级别==，无法做到像==编程式事务==那样可以作用到==代码块级别==。")])]),t._v(" "),a("p",[t._v("以上的开启事务方式，仅需要了解即可，如今在工作中，一般不会用到这几种方式，过于繁琐。一般都是直接用springboot自带的"),a("code",[t._v("@Transactional")]),t._v(" 注解，就可以完成这些事务管理操作。但是如果想知道事务底层的实现原理，以上的几种原始方式，还是可以参考一下的。")]),t._v(" "),a("h2",{attrs:{id:"_10、spring中aop的通知类型有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、spring中aop的通知类型有哪些"}},[t._v("#")]),t._v(" 10、Spring中aop的通知类型有哪些？")]),t._v(" "),a("p",[t._v("通知/增强（Advice）中提供的五中类型（非常重要）：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("通知类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("前置通知("),a("code",[t._v("@Before")]),t._v(")")]),t._v(" "),a("td",[t._v("在我们执行目标方法之前运行")])]),t._v(" "),a("tr",[a("td",[t._v("返回通知("),a("code",[t._v("@AfterReturning")]),t._v(")")]),t._v(" "),a("td",[t._v("在我们的目标方法正常返回值后运行")])]),t._v(" "),a("tr",[a("td",[t._v("异常通知("),a("code",[t._v("@AfterThrowing")]),t._v(")")]),t._v(" "),a("td",[t._v("在我们的目标方法出现异常后运行")])]),t._v(" "),a("tr",[a("td",[t._v("后置通知("),a("code",[t._v("@After")]),t._v(")")]),t._v(" "),a("td",[t._v("在我们目标方法运行结束之后 ，不管有没有异常")])]),t._v(" "),a("tr",[a("td",[t._v("环绕通知("),a("code",[t._v("@Around")]),t._v(")")]),t._v(" "),a("td",[t._v("功能最为强大的通知，能在方法调用前后自定义一些操作")])])])]),t._v(" "),a("p",[t._v("通知的执行顺序可以根据下面的代码模型判断")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通知的执行以及顺序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前置通知\t@Before")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 目标方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回通知\t@AfterReturning")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 异常通知\t@AfterThrowing")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后置通知\t@After")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("目标方法执行没有异常时，以下三个通知生效")]),t._v(" "),a("p",[a("code",[t._v("@Before")]),t._v("、"),a("code",[t._v("@After")]),t._v("、"),a("code",[t._v("@AfterReturning")])]),t._v(" "),a("p",[t._v("目标方法执行出现异常时，以下三个通知生效 "),a("code",[t._v("@Before")]),t._v("、"),a("code",[t._v("@After")]),t._v("、"),a("code",[t._v("@AfterThrowing")])]),t._v(" "),a("p",[a("strong",[t._v("通知的执行顺序")])]),t._v(" "),a("p",[t._v("当有多个切面的通知方法都被执行时，它们的执行顺序是怎样的呢？")]),t._v(" "),a("ul",[a("li",[t._v("默认按照 bean 的名称字母排序")]),t._v(" "),a("li",[t._v("用 "),a("code",[t._v("@Order")]),t._v("(数字)加在==切面类==上来控制顺序，==数字越小，优先级越高==，没有加数字的默认为"),a("code",[t._v("int")]),t._v("的最大值")])]),t._v(" "),a("h2",{attrs:{id:"_11、spring-的对象默认是单例的还是多例的-单例-bean-存不存在线程安全问题呢-必会"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、spring-的对象默认是单例的还是多例的-单例-bean-存不存在线程安全问题呢-必会"}},[t._v("#")]),t._v(" 11、Spring 的对象默认是单例的还是多例的?单例 bean 存不存在线程安全问题呢?(必会)")]),t._v(" "),a("p",[t._v("在 spring 中的对象默认是单例的，但是也可以配置为多例。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("单例 bean 对象对应的类"),a("strong",[t._v("如果存在可变的成员变量")]),t._v("并且其中存在改变这个变量的线程时，多线程操作该 bean 对象时会出现线程安全问题。但是"),a("strong",[t._v("如果该bean对象是无状态的")]),t._v("，那么在多线程环境中是安全的。")]),t._v(" "),a("p",[a("strong",[t._v("如何处理Spring Bean的线程安全问题")])]),t._v(" "),a("p",[t._v("方法1：将"),a("code",[t._v("scope")]),t._v("的模式改为"),a("code",[t._v("prototype")]),t._v("，也就是将Bean的作用域由单例改为多例模式。")]),t._v(" "),a("p",[t._v("方法2： 在 bean 对象中==避免定义可变成员变量==；")]),t._v(" "),a("p",[t._v("方法3：在类中定义 "),a("code",[t._v("ThreadLocal")]),t._v(" 的成员变量，并将需要的可变成员变量保存在 "),a("code",[t._v("ThreadLocal")]),t._v(" 中")]),t._v(" "),a("p",[a("code",[t._v("ThreadLocal")]),t._v(" 本身就具备线程隔离的特性，这就相当于为每个线程提供了一个独立的变量副本，每个线程只需要操作自己的线程副本变量，从而解决线程安全问题。")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("strong",[t._v("任何无状态单例都是线程安全的")]),t._v("。")]),t._v(" "),a("p",[t._v("Spring 的根本就是通过大量这种单例构建起系统，以事务脚本的方式提供服务。")]),t._v(" "),a("blockquote",[a("p",[t._v("问题：对于"),a("code",[t._v("@Controller")]),t._v("，"),a("code",[t._v("@Service")]),t._v("等注解如果在类中加了"),a("code",[t._v("@Scope")]),t._v("注解改为"),a("code",[t._v("prototype")]),t._v("模式是否一定是线程安全的呢？")]),t._v(" "),a("p",[t._v("不一定，在 "),a("code",[t._v("@Controller")]),t._v("/"),a("code",[t._v("@Service")]),t._v(" 等容器中定义"),a("strong",[t._v("静态变量")]),t._v("，不论是单例 (singleton) 还是多实例 (prototype) 都是线程不安全的。")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"_12、-resource-和-autowired-依赖注入的区别是什么-qualifier-使用场景是什么-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、-resource-和-autowired-依赖注入的区别是什么-qualifier-使用场景是什么-了解"}},[t._v("#")]),t._v(" 12、@Resource 和@Autowired 依赖注入的区别是什么?@Qualifier 使用场景是什么?(了解)")]),t._v(" "),a("p",[a("code",[t._v("@Resource")]),t._v("和"),a("code",[t._v("@Autowired")]),t._v("都是用于依赖注入的注解。")]),t._v(" "),a("p",[a("code",[t._v("@Resource")]),a("strong",[t._v("默认按照名称进行装配")]),t._v("，==当找不到与名称匹配的 bean 时，才会按类型进行装配==。可以通过 "),a("code",[t._v("name")]),t._v("属性指定 bean 的名称。")]),t._v(" "),a("p",[a("code",[t._v("@Autowired")]),a("strong",[t._v("默认按类型进行装配")]),t._v("，==当找不到与类型匹配的 bean 时，才会按照名称进行装配==。也可以通过 "),a("code",[t._v("@Qualifier")]),t._v("注解指定装配的 bean 名称。")]),t._v(" "),a("p",[a("code",[t._v("@Qualifier")]),t._v("注解通常与"),a("code",[t._v("@Autowired")]),t._v("一起使用，用来指定装配 bean 的名称。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("@Qualifier")]),t._v("不能单独使用，它必须和其他注解一起使用，通常配合"),a("code",[t._v("@Autowired")]),t._v("一起使用，用来解决某种类型的多个实现的情况。")])]),t._v(" "),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserService")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Qualifier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"userDaoImpl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDao")]),t._v(" userDao"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("假设在 Spring 容器中存在多个实现了 "),a("code",[t._v("UserDao")]),t._v("接口的类，而且它们的类名都以大写字母开头，为了指定装配名为 "),a("code",[t._v("userDaoImpl")]),t._v("的 "),a("code",[t._v("UserDao")]),t._v("类型的 bean，可以使用 "),a("code",[t._v("@Qualifier")]),t._v(" 注解和 "),a("code",[t._v("@Autowired")]),t._v(" 注解结合使用。")]),t._v(" "),a("p",[t._v("这样就指定了装配名为 "),a("code",[t._v("userDaoImpl")]),t._v(" 的 "),a("code",[t._v("UserDao")]),t._v(" 类型的 bean。")]),t._v(" "),a("p",[t._v("000")]),t._v(" "),a("h2",{attrs:{id:"spring事务-4种特性、7种传播行为-5种隔离级别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring事务-4种特性、7种传播行为-5种隔离级别"}},[t._v("#")]),t._v(" Spring事务（4种特性、7种传播行为，5种隔离级别）")]),t._v(" "),a("h2",{attrs:{id:"_13、spring-的7种事务传播行为-高薪常问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、spring-的7种事务传播行为-高薪常问"}},[t._v("#")]),t._v(" 13、Spring 的7种事务传播行为(高薪常问)")]),t._v(" "),a("p",[t._v("在Spring中对于事务的传播行为定义了七种类型分别是：")]),t._v(" "),a("p",[t._v("备注(方便记忆)：")]),t._v(" "),a("p",[t._v("propagation 传播 \t\trequire 必须的\t\t\tsuppor 支持\t\t\tmandatory [ˈmændətɔːri] 强制性的")]),t._v(" "),a("p",[t._v("requires-new 需要新建\t\t\tnot-supported 不支持\t\t\tnever 从不\t\t\tnested 嵌套的")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("PROPAGATION_REQUIRED")]),t._v(": 如果当前存在事务，则加入该事务；如果当前==没有==事务，则==创建一个新的事务==。")]),t._v(" "),a("li",[a("code",[t._v("PROPAGATION_SUPPORTS")]),t._v(": 如果当前存在事务，则加入该事务；如果当前==没有==事务，则==以非事务方式执行==。")]),t._v(" "),a("li",[a("code",[t._v("PROPAGATION_MANDATORY")]),t._v(": 如果当前存在事务，则加入该事务；如果当前没有事务，则==抛出异常==。")]),t._v(" "),a("li",[a("code",[t._v("PROPAGATION_REQUIRES_NEW")]),t._v(": 创建一个新的事务，如果当前存在事务，则把当前事务挂起。")]),t._v(" "),a("li",[a("code",[t._v("PROPAGATION_NOT_SUPPORTED")]),t._v(": 以==非事务==方式执行操作，如果当前==存在==事务，则把当前事务挂起。")]),t._v(" "),a("li",[a("code",[t._v("PROPAGATION_NEVER")]),t._v(": 以==非事务==方式执行，如果当前==存在==事务，则==抛出异常==。")]),t._v(" "),a("li",[a("code",[t._v("PROPAGATION_NESTED")]),t._v(": 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来进行。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("@Transactional")]),t._v("默认的事务传播行为是"),a("code",[t._v("PROPAGATION_REQUIRED")]),t._v("。这意味着如果当前存在事务，则该方法必须在该事务中运行；如果不存在事务，则新启动一个事务。")])]),t._v(" "),a("h2",{attrs:{id:"_14、spring中事务的4大特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、spring中事务的4大特征"}},[t._v("#")]),t._v(" 14、Spring中事务的4大特征")]),t._v(" "),a("p",[t._v("事务有四大特性（ACID）：")]),t._v(" "),a("p",[a("strong",[t._v("原子性（Atomicity）：")]),t._v(" ==一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节==。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。")]),t._v(" "),a("p",[a("strong",[t._v("一致性（Consistency）：")]),t._v(" ==在事务开始之前和事务结束以后，数据库的完整性没有被破坏==。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。例如，转账前A、B共5000元，A、B之间转账后，两者之和仍应该是5000元。")]),t._v(" "),a("p",[a("strong",[t._v("隔离性（Isolation）：")]),t._v(" 数据库允许多个并发事务同时对其数据进行读写和修改，==隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致==。事务隔离分为不同级别，包括未提交读（Read Uncommitted）、提交读（Read Committed）、可重复读（Repeatable Read）和串行化（Serializable）。")]),t._v(" "),a("p",[a("strong",[t._v("持久性（Durability）:")]),t._v(" 事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。")]),t._v(" "),a("h2",{attrs:{id:"_15、spring-中的5大隔离级别-高薪常问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15、spring-中的5大隔离级别-高薪常问"}},[t._v("#")]),t._v(" 15、Spring 中的5大隔离级别(高薪常问)")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("隔离级别")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ISOLATION_DEFAULT"),a("br"),a("strong",[t._v("默认隔离")])]),t._v(" "),a("td",[t._v("使用后端数据库默认的隔离级别")])]),t._v(" "),a("tr",[a("td",[t._v("ISOLATION_READ_UNCOMMITTED"),a("br"),a("strong",[t._v("读未提交")])]),t._v(" "),a("td",[t._v("最低的隔离级别，==允许读取尚未提交的数据变更==，可能会导致脏读、幻读或不可重复读")])]),t._v(" "),a("tr",[a("td",[t._v("ISOLATION_READ_COMMITTED"),a("br"),a("strong",[t._v("读已提交")])]),t._v(" "),a("td",[t._v("==允许读取并发事务已经提交的数据==，==可以阻止脏读==，但是幻读或不可重复读仍有可能发生")])]),t._v(" "),a("tr",[a("td",[t._v("ISOLATION_REPEATABLE_READ"),a("br"),a("strong",[t._v("可重复读")])]),t._v(" "),a("td",[t._v("==对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改==，==可以阻止脏读和不可重复读==，但幻读仍有可能发生")])]),t._v(" "),a("tr",[a("td",[t._v("ISOLATION_SERIALIZABLE"),a("br"),a("strong",[t._v("串行化")])]),t._v(" "),a("td",[t._v("最高的隔离级别，完全服从ACID的隔离级别，确保==阻止脏读、不可重复读以及幻读，也是最慢的事务隔离级别==，因为它通常是通过完全锁定事务相关的数据库表来实现的")])])])]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("脏读")]),t._v("（Dirty reads）——脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时。如果改写在稍后被回滚了，那么第一个事务获取的数据就是无效的。")]),t._v(" "),a("li",[a("strong",[t._v("不可重复读")]),t._v("（Nonrepeatable read）——不可重复读发生在一个事务执行相同的查询两次或两次以上，但是每次都得到不同的数据时。这通常是因为另一个并发事务在两次查询期间进行了更新。")]),t._v(" "),a("li",[a("strong",[t._v("幻读")]),t._v("（Phantom read）——幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录。")])])]),t._v(" "),a("h2",{attrs:{id:"_16、事务失效问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、事务失效问题"}},[t._v("#")]),t._v(" 16、事务失效问题")]),t._v(" "),a("p",[t._v("这个主要是针对声明式事务的，声明式事务底层其实就是 AOP，实际上就是一个AOP失效的问题")]),t._v(" "),a("p",[t._v("Spring事务失效场景：")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("数据库引擎不支持事务")]),t._v("，比如"),a("code",[t._v("MyISAM")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("方法不是"),a("code",[t._v("public")])]),t._v("，这一点由Spring的AOP特性决定的，理论上而言，不public也能切入，但spring可能是觉得private自己用的方法，应该自己控制，不应该用事务切进去吧）。另外"),a("code",[t._v("private")]),t._v("方法, "),a("code",[t._v("final")]),t._v("方法 和 "),a("code",[t._v("static")]),t._v("方法不能添加事务，加了也不生效")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("出现非运行时异常")]),t._v("，Spring事务默认只有抛出运行时异常（即 RuntimeException 及子类）或 Error 及子类时，才会回滚事务，如果抛出的是其它编译时异常，仍然会提交事务。")]),t._v(" "),a("p",[t._v("解决办法："),a("em",[t._v("配置 "),a("code",[t._v("rollbackFor = Exception.class")])])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("捕捉异常导致事务失效")]),t._v("，如果代理对象不知道出现了异常，也就没有机会去执行回滚，自己 try-catch异常，意味着代理对象认为没有发生异常，因此也会提交事务。所以我们应该将捕获的异常抛出")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("同一个类中调用事务方法")]),t._v("，"),a("code",[t._v("@Transactional")]),t._v("的事务开启 ，或者是基于接口的 或者是基于类的代理被创建。所以 ==在同一个类中一个无事务的方法调用另一个有事务的方法，事务是不会起作用的。==")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("操作事务的类/对象没有被Spring管理")]),t._v("，使用spring事务的前提是对象要被spring管理。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image.z.itpub.net/zitpub.net/JPG/2021-09-18/8CEF7F469B3856928EF1A723D6A7BCA4.jpg",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_17、springboot自动装配原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17、springboot自动装配原理"}},[t._v("#")]),t._v(" 17、SpringBoot自动装配原理")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在Spring Boot项目中的引导类上有一个注解"),a("code",[t._v("@SpringBootApplication")]),t._v("，这个注解是对三个注解进行了封装，分别是：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("@SpringBootConfiguration")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("@EnableAutoConfiguration")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("@ComponentScan")])])])]),t._v(" "),a("p",[t._v("其中"),a("code",[t._v("@EnableAutoConfiguration")]),t._v("是实现自动化配置的核心注解。")]),t._v(" "),a("p",[t._v("该注解通过"),a("code",[t._v("@Import")]),t._v("注解导入对应的配置选择器。关键的是内部就是读取了该项目和该项目引用的Jar包的的classpath路径下"),a("strong",[t._v("META-INF/spring.factories")]),t._v("文件中的所配置的类的全类名。")]),t._v(" "),a("p",[t._v("在这些配置类中所定义的Bean会根据条件注解所"),a("strong",[t._v("指定的条件来决定")]),t._v("是否需要将其导入到Spring容器中。")]),t._v(" "),a("p",[t._v("一般条件判断会有像"),a("code",[t._v("@ConditionalOnClass")]),t._v("这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。")])])]),t._v(" "),a("hr"),t._v(" "),a("p",[a("code",[t._v("@SpringBootApplication")]),t._v("的本质是一个组合注解，主要包含3个注解：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("@SpringBootConfiguration")]),t._v("（里面就是"),a("code",[t._v("@Configuration")]),t._v("，标注当前类为配置类，其实只是做了一层封装改了个名字而已）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("@EnableAutoConfiguration")]),t._v("（开启自动导入配置）(可以扫描到不在启动类所在包及其子包下面的配置类)")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("自动配置包必须在"),a("code",[t._v("META-INF")]),t._v("目录中提供一个"),a("code",[t._v("spring.factories")]),t._v("文件")]),t._v("，文件中定义所有需要加载的配置类的全类名，用逗号隔开。")]),t._v(" "),a("li",[a("code",[t._v("spring.factories")]),t._v("文件中的key是固定的："),a("code",[t._v("org.springframework.boot.autoconfigure.EnableAutoConfiguration")])])]),t._v(" "),a("p",[t._v("在引导类上使用"),a("code",[t._v("@Import")]),t._v("注解导入配置类，并从Spring容器中获取，"),a("code",[t._v("@Import({A.class, B.class})")]),t._v(" 导入指定名称的配置类")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("@ComponentScan")]),t._v("（包扫描）定义要扫描的特定包。 如果没有定义特定的包，将从声明该注解的类的所在包及其子包。")])])]),t._v(" "),a("h2",{attrs:{id:"_18、什么是spring的循环依赖-如何解决循环依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18、什么是spring的循环依赖-如何解决循环依赖"}},[t._v("#")]),t._v(" 18、什么是Spring的循环依赖？如何解决循环依赖？")]),t._v(" "),a("p",[t._v("简单的来说就是A依赖B的同时，B依赖A。在创建A对象的同时需要使用的B对象，在创建B对象的同时需要使用到A对象。如下代码所示：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A的构造方法执行了..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"给A注入B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B的构造方法执行了..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"给B注入了A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br")])]),a("p",[t._v("解决方案：使用"),a("code",[t._v("@Lazy")]),t._v("注解")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// B成员变量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Lazy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A的构造方法执行了..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("在构造参数前面加了"),a("code",[t._v("@Lazy")]),t._v("注解之后, 就不会真正的注入真实对象, 该注入对象会被延迟加载 ， 此时注入的是一个代理对象 。")]),t._v(" "),a("h2",{attrs:{id:"_19、spring-mvc中的拦截器和servlet中的filter有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19、spring-mvc中的拦截器和servlet中的filter有什么区别"}},[t._v("#")]),t._v(" 19、Spring MVC中的拦截器和Servlet中的filter有什么区别？")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/xinzhifu1/article/details/106356958",target:"_blank",rel:"noopener noreferrer"}},[t._v("拦截器和过滤器的区别"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[t._v("归属不同： "),a("code",[t._v("Filter")]),t._v("属于"),a("code",[t._v("Servlet")]),t._v("技术，"),a("code",[t._v("Interceptor")]),t._v("属于"),a("code",[t._v("SpringMVC")]),t._v("技术")]),t._v(" "),a("li",[t._v("执行顺序不同：先执行过滤器，后执行拦截器")]),t._v(" "),a("li",[t._v("拦截内容不同： "),a("code",[t._v("Filter")]),t._v("是拦截请求和响应的，"),a("code",[t._v("Interceptor")]),t._v(" 拦截访问处理器中的方法，也就是拦截Controller中的方法 调用。")]),t._v(" "),a("li",[t._v("实现原理不同："),a("code",[t._v("Filter")]),t._v(" 是基于函数回调的，"),a("code",[t._v("Interceptor")]),t._v(" 则是基于Java的反射机制 (AOP动态代理) 实现的")]),t._v(" "),a("li",[t._v("拦截的请求范围不同："),a("code",[t._v("Filter")]),t._v("几乎可以对所有进入容器的请求起作用，而"),a("code",[t._v("Interceptor")]),t._v("只会对"),a("code",[t._v("Controller")]),t._v("中请求或访问"),a("code",[t._v("static")]),t._v("目录下的资源请求起作用。")])]),t._v(" "),a("p",[t._v("详细内容查看"),a("a",{attrs:{href:"https://blog.csdn.net/xinzhifu1/article/details/106356958",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文地址"),a("OutboundLink")],1)]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("拦截器和过滤器是用于在web应用程序中实现请求和响应的处理和控制的两种机制。它们的作用相似，但是有一些区别。")]),t._v(" "),a("p",[a("strong",[t._v("位置不同")]),t._v("：")]),t._v(" "),a("p",[t._v("过滤器(Filter)是在 Servlet 容器内部执行的，它在客户端请求访问目标资源之前拦截，对请求和响应进行处理；而拦截器(Interceptor)是在 SpringMVC 执行链的处理方法之前或之后执行的，它在客户端请求访问目标资源之后拦截，对控制器方法的调用进行处理。")]),t._v(" "),a("p",[a("strong",[t._v("作用对象不同")]),t._v("：")]),t._v(" "),a("p",[t._v("过滤器(Filter)的作用对象是 Servlet 容器所管理的 web 资源，包括 JSP、静态文件等等，主要用于校验用户输入参数、管理 session 和 cookie、执行 XSS 过滤、日志记录等；而拦截器(Interceptor)的作用对象是 SpringMVC 框架中的控制器(Controller)，它主要用于检查用户认证信息、处理业务逻辑等。")]),t._v(" "),a("p",[a("strong",[t._v("工作方式不同")]),t._v("：")]),t._v(" "),a("p",[t._v("过滤器(Filter)是通过回调函数实现的，实现了 Servlet 中的 "),a("code",[t._v("Filter")]),t._v(" 接口，它的实现类是由容器调用的；而拦截器(Interceptor)是使用 AOP 实现的，拦截器实现类由 SpringMVC 框架调用。")]),t._v(" "),a("p",[a("strong",[t._v("依赖框架不同")]),t._v("：")]),t._v(" "),a("p",[t._v("过滤器(Filter)是 Servlet 规范的一部分，它是与 Web 容器绑定的，所以可以在任何 Java Web 项目中使用；而拦截器(Interceptor)是 Spring 框架的一部分，所以只有在使用 SpringMVC 框架时才可以使用。")]),t._v(" "),a("p",[t._v("综上所述，过滤器和拦截器都是用于在web应用程序中实现请求和响应的处理和控制的机制，但是它们的作用对象、位置、工作方式和依赖框架等方面有所不同。")]),t._v(" "),a("h2",{attrs:{id:"_20、springmvc的执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20、springmvc的执行流程"}},[t._v("#")]),t._v(" 20、SpringMVC的执行流程")]),t._v(" "),a("p",[t._v("Spring MVC 的三大组件")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("处理器映射器")]),t._v(" "),a("code",[t._v("HandlerMapping")]),t._v("：解析Controller中的路径，和我们客户端的路径进行匹配，找到要访问的Controller中的方法")]),t._v(" "),a("li",[a("strong",[t._v("处理器适配器")]),t._v(" "),a("code",[t._v("HandlerAdapter")]),t._v("：负责去调用Controller中的对应的方法，执行该方法，将结果封装成ModelAndView对象。")]),t._v(" "),a("li",[a("strong",[t._v("视图解析器")]),t._v(" "),a("code",[t._v("ViewResolver")]),t._v("：负责解析ModelAndView对象中的数据和页面，最终告诉前端控制器去响应。")])]),t._v(" "),a("p",[t._v("SpringMVC的执行流程图如下")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230219224112834.png",alt:"image-20230219224112834"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20221128101807670.png",alt:"image-20221128101807670"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("1、用户发送出请求到前端控制器DispatcherServlet。")]),t._v(" "),a("p",[t._v("2、DispatcherServlet收到请求调用HandlerMapping（处理器映射器）。")]),t._v(" "),a("p",[t._v("3、HandlerMapping找到具体的处理器(可查找xml配置或注解配置)，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。")]),t._v(" "),a("p",[t._v("4、DispatcherServlet调用HandlerAdapter（处理器适配器）。")]),t._v(" "),a("p",[t._v("5、HandlerAdapter经过适配调用具体的处理器（Handler/Controller）。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("6、Controller执行完成返回ModelAndView对象。")]),t._v(" "),a("p",[t._v("7、HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet。")]),t._v(" "),a("p",[t._v("8、DispatcherServlet将ModelAndView传给ViewReslover（视图解析器）。")]),t._v(" "),a("p",[t._v("9、ViewReslover解析后返回具体View（视图）。")]),t._v(" "),a("p",[t._v("10、DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。")]),t._v(" "),a("p",[t._v("11、DispatcherServlet响应用户。")]),t._v(" "),a("p",[t._v("当然现在的开发，基本都是前后端分离的开发的，并没有视图这些，一般都是handler中使用Response直接结果返回")])])}),[],!1,null,null,null);a.default=e.exports}}]);