(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{343:function(o,v,t){"use strict";t.r(v);var r=t(14),i=Object(r.a)({},(function(){var o=this,v=o._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[v("h1",{attrs:{id:"springboot面试题补充"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#springboot面试题补充"}},[o._v("#")]),o._v(" SpringBoot面试题补充")]),o._v(" "),v("h2",{attrs:{id:"一、讲一讲springboot启动流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、讲一讲springboot启动流程"}},[o._v("#")]),o._v(" 一、讲一讲SpringBoot启动流程")]),o._v(" "),v("p",[v("strong",[o._v("得分点")])]),o._v(" "),v("p",[o._v("调用run方法，run方法执行流程")]),o._v(" "),v("p",[v("strong",[o._v("标准回答")])]),o._v(" "),v("p",[o._v("当Spring Boot项目创建完成后会默认生成一个"),v("code",[o._v("Application")]),o._v("的入口类，这个类中的"),v("code",[o._v("main")]),o._v("方法可以启动Spring Boot项目，在"),v("code",[o._v("main")]),o._v("方法中，通过"),v("code",[o._v("SpringApplication")]),o._v("的静态方法，即"),v("code",[o._v("run")]),o._v("方法进行"),v("code",[o._v("SpringApplication")]),o._v("的实例化操作，然后再针对实例化对象调用另外一个"),v("code",[o._v("run")]),o._v("方法来完成整个项目的初始化和启动。")]),o._v(" "),v("p",[v("code",[o._v("SpringApplication")]),o._v("调用的"),v("code",[o._v("run")]),o._v("方法重点做了以下操作：")]),o._v(" "),v("ul",[v("li",[o._v("获取监听器参数配置")]),o._v(" "),v("li",[o._v("打印"),v("code",[o._v("Banner")]),o._v("信息")]),o._v(" "),v("li",[o._v("创建并初始化容器")]),o._v(" "),v("li",[o._v("监听器发送通知")])]),o._v(" "),v("h2",{attrs:{id:"二、你们常用的springboot起步依赖有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、你们常用的springboot起步依赖有哪些"}},[o._v("#")]),o._v(" 二、你们常用的SpringBoot起步依赖有哪些")]),o._v(" "),v("p",[o._v("Spring Boot提供了很多起步依赖，用于快速添加常用功能的依赖。")]),o._v(" "),v("p",[o._v("一些常用的起步依赖如下：")]),o._v(" "),v("ul",[v("li",[v("code",[o._v("spring-boot-starter-parent")]),o._v("：用来提供相关的Maven默认依赖，常用的包依赖可以省去"),v("code",[o._v("version")]),o._v("标签")]),o._v(" "),v("li",[v("code",[o._v("spring-boot-starter-web")]),o._v("：提供web开发所需的依赖，包括"),v("code",[o._v("Spring MVC")]),o._v("和"),v("code",[o._v("Tomcat")]),o._v("等")]),o._v(" "),v("li",[v("code",[o._v("mybatis-plus-boot-starter")]),o._v("：提供"),v("code",[o._v("Mybatis-Plus")]),o._v("开发所需要的依赖")]),o._v(" "),v("li",[v("code",[o._v("spring-boot-starter-test")]),o._v("：提供测试所需的依赖，包括"),v("code",[o._v("JUnit")]),o._v("和"),v("code",[o._v("Mockito")]),o._v("等")]),o._v(" "),v("li",[v("code",[o._v("druid-spring-boot-starter")]),o._v("：提供druid的数据源，数据库连接池等")]),o._v(" "),v("li",[v("code",[o._v("spring-boot-starter-data-redis")]),o._v("：提供整合"),v("code",[o._v("Redis")]),o._v("所需的依赖")]),o._v(" "),v("li",[v("code",[o._v("spring-boot-starter-log4j2")]),o._v("：使用 Log4j2 进行日志记录的起步依赖。")]),o._v(" "),v("li",[v("code",[o._v("spring-boot-starter-data-mongodb")]),o._v("：使用 MongoDB 进行数据持久化的起步依赖。")])]),o._v(" "),v("h2",{attrs:{id:"三、springboot支持的配置文件有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、springboot支持的配置文件有哪些"}},[o._v("#")]),o._v(" 三、springBoot支持的配置文件有哪些 ?")]),o._v(" "),v("p",[o._v("springboot项目支持很多的配置文件，在源码可以看到")]),o._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220907160806687.png",alt:"image-20220907160806687"}})]),o._v(" "),v("p",[o._v("它会按照这个不同类型的文件从上到下的顺序进行加载，也就说，会先加载"),v("code",[o._v("application.yml")]),o._v("然后加载"),v("code",[o._v("application.properties")]),o._v("文件。如果有相同的配置，先加载的会被后加载的文件覆盖")]),o._v(" "),v("p",[o._v("假如在启动项目的时候给了启动参数，则最后生效，会覆盖前面所有相同的配置")]),o._v(" "),v("p",[v("code",[o._v("java -jar --server.port=8089 xx.jar")])]),o._v(" "),v("h2",{attrs:{id:"四、运行一个springboot项目有哪些方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四、运行一个springboot项目有哪些方式"}},[o._v("#")]),o._v(" 四、运行一个SpringBoot项目有哪些方式？")]),o._v(" "),v("ol",[v("li",[v("p",[o._v("直接使用"),v("code",[o._v("java -jar")]),o._v(" 运行")])]),o._v(" "),v("li",[v("p",[o._v("开发过程中运行main方法")])]),o._v(" "),v("li",[v("p",[o._v("可以配置插件 , 将springboot项目打`包, 部署到Tomcat中运行")])]),o._v(" "),v("li",[v("p",[o._v("直接用maven插件运行 "),v("code",[o._v("maven spring-boot：run")])])])]),o._v(" "),v("h2",{attrs:{id:"五、spring-boot如何定义多套不同环境配置"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五、spring-boot如何定义多套不同环境配置"}},[o._v("#")]),o._v(" 五、Spring Boot如何定义多套不同环境配置？")]),o._v(" "),v("p",[o._v("提供多套配置文件，如：")]),o._v(" "),v("div",{staticClass:"language-properties line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-properties"}},[v("code",[o._v("applcation.properties\napplication-dev.properties\napplication-test.properties\napplication-prod.properties\n")])]),o._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[o._v("1")]),v("br"),v("span",{staticClass:"line-number"},[o._v("2")]),v("br"),v("span",{staticClass:"line-number"},[o._v("3")]),v("br"),v("span",{staticClass:"line-number"},[o._v("4")]),v("br")])]),v("blockquote",[v("p",[o._v("springboot当中，"),v("code",[o._v("application")]),o._v("是我们的主配置文件，至于是yml结尾的文件还是"),v("code",[o._v("properties")]),o._v("结尾的文件，这两种都可以的，没有实质区别，都是更改springboot全局默认值。唯一的区别就是语法区别。")])]),o._v(" "),v("p",[o._v("然后在"),v("code",[o._v("applcation.properties")]),o._v("文件中指定当前的环境"),v("code",[o._v("spring.profiles.active=test")]),o._v(",这时候读取的就是"),v("code",[o._v("application-test.properties")]),o._v("文件。")]),o._v(" "),v("blockquote",[v("p",[o._v("在Spring Boot中，这四个配置文件的优先级如下：")]),o._v(" "),v("ol",[v("li",[v("code",[o._v("application.properties")]),o._v("：默认的应用程序属性文件。如果没有指定其他配置文件，则加载此文件。")]),o._v(" "),v("li",[v("code",[o._v("application-{profile}.properties")]),o._v("：包括"),v("code",[o._v("dev")]),o._v("、"),v("code",[o._v("test")]),o._v("和"),v("code",[o._v("prod")]),o._v("等特定的环境属性文件。其中"),v("code",[o._v("{profile}")]),o._v('是激活的Spring profile的名称。例如，如果激活了名为"dev"的profile，则会加载'),v("code",[o._v("application-dev.properties")]),o._v("文件。")]),o._v(" "),v("li",[v("code",[o._v("application.yml")]),o._v("：YAML格式的应用程序属性文件。如果存在与"),v("code",[o._v("application.properties")]),o._v("相同的属性，则"),v("code",[o._v("application.yml")]),o._v("中的属性将覆盖"),v("code",[o._v("application.properties")]),o._v("中的属性。")]),o._v(" "),v("li",[v("code",[o._v("application-{profile}.yml")]),o._v("：包括特定的环境属性文件的YAML格式。与"),v("code",[o._v(".properties")]),o._v("文件类似，其中"),v("code",[o._v("{profile}")]),o._v("是激活的Spring profile的名称。")])]),o._v(" "),v("p",[o._v('当多个配置文件都存在时，按照上述顺序进行加载，并且高优先级的配置会覆盖低优先级的配置。例如，在激活名为"prod"的profile时，将首先加载'),v("code",[o._v("application.properties")]),o._v("文件，然后覆盖其中与"),v("code",[o._v("application-prod.properties")]),o._v("中相同的属性。如果两个文件中存在相同的属性，则"),v("code",[o._v("application-prod.properties")]),o._v("中的属性将覆盖"),v("code",[o._v("application.properties")]),o._v("中的属性。")])])])}),[],!1,null,null,null);v.default=i.exports}}]);