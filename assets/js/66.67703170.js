(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{346:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),s("h2",{attrs:{id:"一-、为什么要使用线程池"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-、为什么要使用线程池"}},[t._v("#")]),t._v(" 一 、为什么要使用线程池？")]),t._v(" "),s("p",[t._v("如果用户每发起一个请求，后台就创建一个新线程来处理，下次新任务来了又要创建新线程，而"),s("strong",[t._v("创建新线程的开销是很大的")]),t._v("，这样会严重影响系统的性能。")]),t._v(" "),s("p",[s("strong",[t._v("使用线程池的好处")]),t._v("：")]),t._v(" "),s("p",[t._v("线程池的好处是"),s("strong",[t._v("减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题")]),t._v("。")]),t._v(" "),s("p",[t._v('如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者"过度切换"的问题。')]),t._v(" "),s("blockquote",[s("p",[t._v("在 Java 中，使用线程池能够带来以下几个好处：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("减少线程创建和销毁的开销")]),t._v("：创建线程和销毁线程都需要消耗一定的系统资源，如果任务量较大且频繁地创建和销毁线程会导致系统开销加大。而使用线程池可以在应用启动时预先创建多个线程，并重复使用这些线程来执行任务，从而减少线程的创建和销毁开销。")]),t._v(" "),s("li",[s("strong",[t._v("限制并发数量")]),t._v("：线程池可以根据实际情况调整最大并发数量，避免过多的线程竞争导致系统性能下降或者崩溃。")]),t._v(" "),s("li",[s("strong",[t._v("提高响应速度")]),t._v("：当有新的任务需要执行时，线程池中已经存在的线程可以立即开始执行任务，从而提高任务的响应速度。")]),t._v(" "),s("li",[s("strong",[t._v("提高线程的可管理性")]),t._v("：通过线程池可以统一管理线程的状态、生命周期和资源占用情况，从而更加方便和可靠地控制多线程程序。")]),t._v(" "),s("li",[s("strong",[t._v("提供更强大的功能")]),t._v("：线程池还提供了很多额外的功能，如定时执行任务、周期性执行任务、异步执行任务等，让多线程编程变得更加灵活和高效。")])]),t._v(" "),s("p",[t._v("综上所述，使用线程池可以有效地提高多线程程序的性能和可靠性，使程序更加高效、健壮和易于维护。")])]),t._v(" "),s("h2",{attrs:{id:"二、如何创建线程池对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、如何创建线程池对象"}},[t._v("#")]),t._v(" 二、如何创建线程池对象？")]),t._v(" "),s("p",[s("strong",[t._v("方式一：使用"),s("code",[t._v("Executors")]),t._v("（线程池的工具类）调用方法返回不同特点的线程池对象")])]),t._v(" "),s("p",[t._v("线程池的工具类通过调用方法返回不同类型的线程池对象")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20221028185141274.png",alt:"image-20221028185141274"}})]),t._v(" "),s("blockquote",[s("p",[t._v("根据阿里巴巴开发手册规定")]),t._v(" "),s("p",[t._v("线程池不允许使用 "),s("code",[t._v("Executors")]),t._v(" 去创建，而是通过 "),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 的方式，这 样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。")]),t._v(" "),s("p",[t._v("说明："),s("code",[t._v("Executors")]),t._v(" 返回的线程池对象的弊端如下：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("FixedThreadPool")]),t._v(" 和 "),s("code",[t._v("SingleThreadPool")]),t._v("： 允许的请求队列长度为 "),s("code",[t._v("Integer.MAX_VALUE")]),t._v("，可能会堆积大量的请求，从而导致 "),s("code",[t._v("OOM")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("CachedThreadPool")]),t._v("： 允许的创建线程数量为 "),s("code",[t._v("Integer.MAX_VALUE")]),t._v("，可能会创建大量的线程，从而导致 "),s("code",[t._v("OOM(OutOfMemoryError)")]),t._v("(也就是内存不足)。")])])]),t._v(" "),s("p",[s("code",[t._v("Executors")]),t._v(" 并不适合做大型互联网场景的线程池方案，否则可能会出现"),s("code",[t._v("OOM")]),t._v("(内存不足)问题❌")]),t._v(" "),s("p",[s("strong",[t._v("方式二：使用"),s("code",[t._v("ExecutorService")]),t._v("的实现类"),s("code",[t._v("ThreadPoolExecutor")]),t._v("自创建一个线程池对象")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[t._v("建议使用"),s("code",[t._v("ThreadPoolExecutor")]),t._v("来指定线程池参数，这样可以明确线程池的运行规则，规避资源耗尽的风险。✅")]),t._v(" "),s("blockquote",[s("p",[t._v("在 Java 中，可以通过 "),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 类或者 "),s("code",[t._v("Executors")]),t._v(" 工厂类来创建线程池对象。其中，"),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 类提供了更加灵活和丰富的线程池配置选项，而 "),s("code",[t._v("Executors")]),t._v(" 工厂类则提供了一些常用的线程池配置模板，用于快速创建线程池对象。")]),t._v(" "),s("p",[t._v("以下是一个示例代码，展示了如何使用 "),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 类和 "),s("code",[t._v("Executors")]),t._v(" 工厂类来创建线程池对象：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 ThreadPoolExecutor 创建线程池对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程池中核心线程数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程池中最大线程数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 线程空闲时间（单位为秒）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SECONDS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空闲时间的时间单位")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 任务队列")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),t._v(" executor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 Executors 工厂类创建线程池对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" fixedThreadPool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 固定大小线程池")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" cachedThreadPool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存线程池（自动调整线程数量）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledExecutorService")]),t._v(" scheduledThreadPool "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Executors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newScheduledThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可定时执行任务的线程池")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("在上述代码中，我们首先使用 "),s("code",[t._v("ThreadPoolExecutor")]),t._v(" 类来创建一个线程池对象，并指定了线程池中的核心线程数、最大线程数、空闲时间、任务队列等参数。然后，我们使用 "),s("code",[t._v("Executors")]),t._v(" 工厂类来创建几个常用的线程池对象，包括固定大小线程池、缓存线程池和可定时执行任务的线程池。")]),t._v(" "),s("p",[t._v("需要注意的是，线程池使用完毕后应该及时关闭，以避免线程资源的浪费和占用。可以使用 "),s("code",[t._v("shutdown()")]),t._v(" 方法或者 "),s("code",[t._v("shutdownNow()")]),t._v(" 方法来关闭线程池，具体方法根据需要选择。")])]),t._v(" "),s("h2",{attrs:{id:"三、线程池的种类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、线程池的种类"}},[t._v("#")]),t._v(" 三、线程池的种类")]),t._v(" "),s("p",[t._v("参考回答：")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("newCachedThreadPool")]),t._v("创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("newFixedThreadPool")]),t._v("创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("newScheduledThreadPool")]),t._v("创建一个定长线程池，支持定时及周期性任务执行。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("newSingleThreadExecutor")]),t._v("创建一个单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20221028185141274.png",alt:"image-20221028185141274"}})]),t._v(" "),s("h2",{attrs:{id:"四、线程池的核心参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、线程池的核心参数"}},[t._v("#")]),t._v(" 四、线程池的核心参数")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maximumPoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" keepAliveTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),t._v(" unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RejectedExecutionHandler")]),t._v(" handler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("参数")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("corePoolSize")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("核心线程数的最大值")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("maximumPoolSize")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("线程数最大值(核心线程 + 临时线程)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("keepAliveTime")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("临时线程的存活时间")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("unit")]),t._v("("),s("code",[t._v("TimeUnit.SECONDS")]),t._v("表示秒)")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("keepAliveTime")]),t._v("的单位")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("workQueue")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("任务(阻塞)队列，用来储存等待执行的任务数量")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("threadFactory")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("线程工厂(用来创建线程)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[s("code",[t._v("handler")])]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("拒绝策略")])])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("当线程数小于==核心线程数==时，创建线程。")])]),t._v(" "),s("li",[s("p",[t._v("当线程数大于等于==核心线程数==，且==任务队列==未满时，将任务放入==任务队列==。")])]),t._v(" "),s("li",[s("p",[t._v("当线程数大于等于==核心线程数==，且==任务队列==已满：")]),t._v(" "),s("p",[t._v("若线程数小于==最大线程数==，创建线程。")]),t._v(" "),s("p",[t._v("若线程数等于==最大线程数==，抛出异常，拒绝任务。")])])]),t._v(" "),s("p",[s("strong",[t._v("什么时候创建临时线程？")])]),t._v(" "),s("p",[t._v("当任务提交的时候核心线程都在忙，任务队列也满了，此时还可以创建临时线程的时候，才会创建临时线程。")]),t._v(" "),s("p",[s("strong",[t._v("什么时候执行拒绝策略？")])]),t._v(" "),s("p",[t._v("核心线程和临时线程都在忙，任务队列也满了，还有新的任务过来时会拒绝任务。")]),t._v(" "),s("p",[t._v("使用"),s("code",[t._v("ThreadPoolExecutor")]),t._v("创建线程池示例")]),t._v(" "),s("h2",{attrs:{id:"五、线程池的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、线程池的生命周期"}},[t._v("#")]),t._v(" 五、线程池的生命周期")]),t._v(" "),s("p",[t._v("线程池的生命周期包含5个状态："),s("code",[t._v("RUNNING")]),t._v("、"),s("code",[t._v("SHUTDOWN")]),t._v("、"),s("code",[t._v("STOP")]),t._v("、"),s("code",[t._v("TIDING")]),t._v("、"),s("code",[t._v("TERMINATED")]),t._v("。")]),t._v(" "),s("p",[t._v("这5种状态的状态值分别是："),s("code",[t._v("-1")]),t._v("、"),s("code",[t._v("0")]),t._v("、"),s("code",[t._v("1")]),t._v("、"),s("code",[t._v("2")]),t._v("、"),s("code",[t._v("3")]),t._v("。")]),t._v(" "),s("p",[t._v("在线程池的生命周期中，它的状态只能由小到大迁移，是不可逆的。")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("RUNNING")]),t._v("：表示线程池正在运行。")]),t._v(" "),s("li",[s("code",[t._v("SHUTDOWN")]),t._v("：执行"),s("code",[t._v("shutdown")]),t._v("()时进入该状态，此时队列不会清空，线程池会等待任务执行完毕。")]),t._v(" "),s("li",[s("code",[t._v("STOP")]),t._v("：执行"),s("code",[t._v("stop")]),t._v("()时进入该状态，此时现线程池会清空队列，不再等待任务的执行。")]),t._v(" "),s("li",[s("code",[t._v("TIDING")]),t._v("：当线程池及队列为空时进入该状态，此时线程池会执行钩子函数，目前该函数是一个空的实现。")]),t._v(" "),s("li",[s("code",[t._v("TERMINATED")]),t._v("：钩子函数执行完毕后，线程进入该状态，表示线程池已经死亡。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("线程池的状态有以下 5 种：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("running")]),t._v("：运行状态，线程池创建好之后就会进入此状态，如果不手动调用关闭方法，那么线程池在整个程序运行期间都是此状态。")]),t._v(" "),s("li",[s("code",[t._v("shutdown")]),t._v("：关闭状态，不再接受新任务提交，但是会将已保存在任务队列中的任务处理完。")]),t._v(" "),s("li",[s("code",[t._v("stop")]),t._v("：停止状态，不再接受新任务提交，并且会中断当前正在执行的任务、放弃任务队列中已有的任务。")]),t._v(" "),s("li",[s("code",[t._v("tidying")]),t._v("：整理状态，所有的任务都执行完毕后（也包括任务队列中的任务执行完），当前线程池中的活动线程数降为 0 时的状态。到此状态之后，会调用线程池的 terminated() 方法。")]),t._v(" "),s("li",[s("code",[t._v("terminated")]),t._v("：销毁状态，当执行完线程池的 terminated() 方法之后就会变为此状态。")])]),t._v(" "),s("h2",{attrs:{id:"六、线程池的拒绝策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、线程池的拒绝策略"}},[t._v("#")]),t._v(" 六、线程池的拒绝策略")]),t._v(" "),s("p",[t._v("拒绝策略主要有4个：")]),t._v(" "),s("p",[t._v("让调用者自己执行任务、直接抛出异常、丢弃任务不做任何处理、删除队列中最老的任务并把当前任务加入队列。这4个拒绝策略分别对应着"),s("code",[t._v("RejectedExecutionHandler")]),t._v("接口的4个实现类，我们也可以基于这个接口实现自己的拒绝策略。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("参数")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[s("code",[t._v("AbortPolicy")]),t._v("(默认拒绝策略)")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("拒绝任务并抛出异常")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("CallerRunsPolicy")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("重试提交当前的任务，即再次调用运行该任务的execute()方法。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("DiscardOldestPolicy")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("抛弃队列头部（最旧）的一个任务，并执行当前任务。")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("code",[t._v("DiscardPolicy")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("丢弃新来的任务，但是不抛出异常")])])])]),t._v(" "),s("h2",{attrs:{id:"七、如何确定核心线程数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、如何确定核心线程数"}},[t._v("#")]),t._v(" 七、如何确定核心线程数")]),t._v(" "),s("p",[t._v("① 高并发、任务执行时间短的业务，线程池程数可以设置为CPU核数+1，减少线程上下文的切换")]),t._v(" "),s("p",[t._v("② 并发不高、任务执行时间长的业务要区分开看")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("假如是业务时间长集中在IO操作上，也就是IO密集型的任务，因为IO操作并不占用CPU，所以不要让所有的CPU闲下来，可以加大线程池中的线程数目，让CPU处理更多的业务")])]),t._v(" "),s("li",[s("p",[t._v("假如是业务时间长集中在计算操作上，也就是计算密集型任务，这个就没办法了，和（1）一样吧，线程池中的线程数设置得少一些，减少线程上下文的切换")])])]),t._v(" "),s("p",[t._v("③ 并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考（2）。最后，业务执行时间长的问题，也可能需要分析一下，看看能不能使用中间件对任务进行拆分和解耦。")]),t._v(" "),s("blockquote",[s("p",[t._v("参考回答：是这样的，我们公司当时有一些规范，为了减少线程上下文的切换，要根据当时部署的服务器的CPU核数来决定，我们规则是：CPU核数+1就是最终的核心线程数。")])]),t._v(" "),s("h2",{attrs:{id:"八、如何控制某个方法允许并发访问线程的数量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、如何控制某个方法允许并发访问线程的数量"}},[t._v("#")]),t._v(" 八、如何控制某个方法允许并发访问线程的数量？")]),t._v(" "),s("p",[t._v("Semaphore两个重要的方法就是semaphore.acquire() 请求一个信号量，这时候的信号量个数-1（一旦没有可使用的信号量，也即信号量个数变为负数时，再次请求的时候就会阻塞，直到其他线程释放了信号量）semaphore.release()释放一个信号量，此时信号量个数+1")]),t._v(" "),s("h2",{attrs:{id:"九、导致并发程序出现问题的根本原因是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#九、导致并发程序出现问题的根本原因是什么"}},[t._v("#")]),t._v(" 九、导致并发程序出现问题的根本原因是什么？")]),t._v(" "),s("p",[t._v("CPU、内存、IO 设备的读写速度差异巨大，表现为 "),s("strong",[t._v("CPU 的速度 > 内存的速度 > IO 设备")]),t._v("的速度。\n程序的性能瓶颈在于速度最慢的 IO 设备的读写，也就是说当涉及到 IO 设备的读写，再怎么提升CPU 和内存的速度也是起不到提升性能的作用。")]),t._v(" "),s("p",[t._v("为了更好地利用 CPU 的高性能计算机体系结构，给 CPU 增加了缓存，均衡 CPU 和内存的速度差异操作系统，增加了进程与线程，分时复用 CPU，均衡 CPU 和 IO 设备的速度差异编译器，增加了指令执行重排序，更好地利用缓存，提高程序的执行速度")]),t._v(" "),s("p",[t._v("基于以上原因：")]),t._v(" "),s("p",[t._v("1、 CPU 缓存，在多核 CPU 的情况下，带来了可见性问题")]),t._v(" "),s("p",[t._v("可见性：一个线程对共享变量的修改，另一个线程能够立刻看到修改后的值")]),t._v(" "),s("p",[t._v("2、操作系统对当前执行线程的切换，带来了原子性问题")]),t._v(" "),s("p",[t._v("原子性：一个或多个指令在 CPU 执行的过程中不被中断的特性")]),t._v(" "),s("p",[t._v("3、编译器指令重排优化，带来了有序性问题")]),t._v(" "),s("p",[t._v("有序性：程序按照代码执行的先后顺序")]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v("原子性指的是一个操作要么全部执行完毕，要么就不执行。如果在执行过程中发生了中断或者异常，那么就会回滚到操作之前的状态。在并发环境中，如果没有保证原子性，多个线程同时对共享资源进行修改时就可能会出现竞态条件，从而导致数据不一致问题。")]),t._v(" "),s("li",[t._v("可见性指的是当一个线程对共享变量进行修改后，其他线程可以立即看到这个修改。在并发环境中，如果没有保证可见性，就可能会导致其他线程读取到的值与预期不符。")]),t._v(" "),s("li",[t._v("有序性指的是程序执行时的指令顺序要与代码中的顺序一致。在编写代码时，我们通常会按照自己的逻辑顺序来编写程序，但是在编译器和处理器执行时，可能会对指令进行重新排序，以优化程序的执行效率。如果没有保证有序性，可能会导致程序出现意想不到的结果。")])]),t._v(" "),s("p",[t._v("综上所述，原子性、可见性和有序性都是导致并发程序出现问题的根本原因。为了避免这些问题，需要采用合适的并发控制方式，例如锁、信号量、原子变量等来保证线程安全。同时，还需要注意Java内存模型中的规范和约束，避免出现意外的结果。")])]),t._v(" "),s("h2",{attrs:{id:"十、java程序中怎么保证多线程的执行安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十、java程序中怎么保证多线程的执行安全"}},[t._v("#")]),t._v(" 十、Java程序中怎么保证多线程的执行安全")]),t._v(" "),s("p",[t._v("线程的安全性问题体现在：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("原子性")]),t._v("：一个或者多个操作在 CPU 执行的过程中不被中断的特性")]),t._v(" "),s("li",[s("strong",[t._v("可见性")]),t._v("：一个线程对共享变量的修改，另外一个线程能够立刻看到")]),t._v(" "),s("li",[s("strong",[t._v("有序性")]),t._v("：程序执行的顺序按照代码的先后顺序执行")])]),t._v(" "),s("p",[s("strong",[t._v("导致原因：")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("线程切换带来的原子性问题")])]),t._v(" "),s("li",[s("p",[t._v("cpu缓存导致的可见性问题")])]),t._v(" "),s("li",[s("p",[t._v("编译优化带来的有序性问题")])])]),t._v(" "),s("p",[s("strong",[t._v("解决办法：")])]),t._v(" "),s("ul",[s("li",[t._v("JDK Atomic开头的原子类、synchronized、LOCK，可以解决原子性问题")]),t._v(" "),s("li",[t._v("synchronized、volatile、LOCK，可以解决可见性问题")]),t._v(" "),s("li",[t._v("Happens-Before 规则可以解决有序性问题")])]),t._v(" "),s("h2",{attrs:{id:"十一、线程池使用场景-countdownlatch、future等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十一、线程池使用场景-countdownlatch、future等"}},[t._v("#")]),t._v(" 十一、线程池使用场景（CountDownLatch、Future等）")]),t._v(" "),s("p",[t._v("用来进行线程同步协作，等待所有线程完成倒计时。\n其中构造参数用来初始化等待计数值，await() 用来等待计数归零，countDown() 用来让计数减一")]),t._v(" "),s("p",[t._v("Future")]),t._v(" "),s("p",[t._v("Futrue可以监视目标线程调用call的情况，当你调用Future的get()方法以获得结果时，当前线程就开始阻塞，直接call方法结束返回结果")]),t._v(" "),s("p",[t._v("举个例子")]),t._v(" "),s("p",[t._v("在一个电商网站，当用户下单之后，我们一般会有一些后续操作，比如，需要查询订单，需要获得订单中的商品详细信息（可能是多个），需要查看物流发货信息")]),t._v(" "),s("p",[t._v("这三个操作，分别是不同的微服务中实现的，我们正常情况是，先调用查询订单，然后分别调用商品和物流，但这样的性能是不高的，因为接口需要等待所有调用成功之后才能返回数据，我们可以使用多线程解决这个性能问题，想要获取返回值，则需要使用Future")]),t._v(" "),s("h2",{attrs:{id:"十二、谈谈你对threadlocal的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十二、谈谈你对threadlocal的理解"}},[t._v("#")]),t._v(" 十二、谈谈你对ThreadLocal的理解")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("面试官")]),t._v("：好的，那你知道"),s("code",[t._v("ThreadLocal")]),t._v("的底层原理实现吗？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，知道一些~")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("ThreadLocal")]),t._v("内部维护了一个一个 "),s("code",[t._v("ThreadLocalMap")]),t._v("类型的成员变量，用来存储资源对象")]),t._v(" "),s("p",[t._v("当我们调用 "),s("code",[t._v("set")]),t._v("方法，就是以 "),s("code",[t._v("ThreadLocal")]),t._v("自己作为 "),s("code",[t._v("key")]),t._v("，资源对象作为 "),s("code",[t._v("value")]),t._v("，放入当前线程的 "),s("code",[t._v("ThreadLocalMap")]),t._v("集合中")]),t._v(" "),s("p",[t._v("当调用 "),s("code",[t._v("get")]),t._v("方法，就是以 "),s("code",[t._v("ThreadLocal")]),t._v("自己作为 "),s("code",[t._v("key")]),t._v("，到当前线程中查找关联的资源值")]),t._v(" "),s("p",[t._v("当调用 "),s("code",[t._v("remove")]),t._v("方法，就是以 "),s("code",[t._v("ThreadLocal")]),t._v("自己作为 "),s("code",[t._v("key")]),t._v("，移除当前线程关联的资源值")]),t._v(" "),s("p",[s("strong",[t._v("面试官")]),t._v("：好的，那关于"),s("code",[t._v("ThreadLocal")]),t._v("会导致内存溢出这个事情，了解吗？")]),t._v(" "),s("p",[s("strong",[t._v("候选人")]),t._v("：")]),t._v(" "),s("p",[t._v("嗯，我之前看过源码，我想一下~~")]),t._v(" "),s("p",[t._v("是因为"),s("code",[t._v("ThreadLocalMap")]),t._v("中的 "),s("code",[t._v("key")]),t._v("被设计为==弱引用==，它是被动的被"),s("code",[t._v("GC")]),t._v("调用释放"),s("code",[t._v("key")]),t._v("，不过关键的是只有key可以得到内存释放，而"),s("code",[t._v("value")]),t._v("不会，因为"),s("code",[t._v("value")]),t._v("是一个强引用。")]),t._v(" "),s("p",[t._v("在使用"),s("code",[t._v("ThreadLocal")]),t._v("时都把它作为静态变量（即强引用），因此无法被动依靠 "),s("code",[t._v("GC")]),t._v("回收，建议主动的"),s("code",[t._v("remove")]),t._v("释放 "),s("code",[t._v("key")]),t._v("，这样就能避免内存溢出。")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("ThreadLocal")]),t._v("会为每个线程创建一个副本变量，并将这个变量存储在线程的"),s("code",[t._v("ThreadLocalMap")]),t._v("中。如果没有适时地清除这些副本变量，就可能会导致内存泄漏。")]),t._v(" "),s("p",[t._v("例如，在Web应用程序中，如果每个请求对应的线程都存储了一些数据，并且这些数据没有及时清理，那么随着请求的增加，可能会导致大量的内存被占用，最终导致内存溢出。")]),t._v(" "),s("p",[t._v("此外，在一些高并发的场景下，如果频繁地创建和销毁 "),s("code",[t._v("ThreadLocal")]),t._v("变量，也可能会影响系统的性能。因此，在使用 "),s("code",[t._v("ThreadLocal")]),t._v("时需要注意控制变量的生命周期，并及时清除无用的副本，避免出现内存泄漏和性能问题。")])]),t._v(" "),s("h2",{attrs:{id:"十三、completablefuture的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十三、completablefuture的使用"}},[t._v("#")]),t._v(" 十三、CompletableFuture的使用")]),t._v(" "),s("p",[s("code",[t._v("CompletableFuture")]),t._v("是 Java 8 引入的一个异步编程工具，它主要用于在多线程环境下方便地执行异步操作、组合多个异步操作以及处理异步操作的结果。")]),t._v(" "),s("blockquote",[s("p",[t._v("下面是"),s("code",[t._v("CompletableFuture")]),t._v("的基本使用方法：")]),t._v(" "),s("ol",[s("li",[t._v("创建"),s("code",[t._v("CompletableFuture")]),t._v("对象")])]),t._v(" "),s("p",[t._v("可以通过"),s("code",[t._v("CompletableFuture")]),t._v("类的静态方法来创建一个新的"),s("code",[t._v("CompletableFuture")]),t._v("对象，例如：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ol",{attrs:{start:"2"}},[s("li",[s("strong",[t._v("异步执行任务")])])]),t._v(" "),s("p",[t._v("可以使用"),s("code",[t._v("CompletableFuture")]),t._v("的"),s("code",[t._v("supplyAsync()")]),t._v("方法或"),s("code",[t._v("runAsync()")]),t._v("方法来异步执行任务。其中，"),s("code",[t._v("supplyAsync()")]),t._v("方法用于执行有返回值的任务，而"),s("code",[t._v("runAsync()")]),t._v("方法用于执行没有返回值的任务。")]),t._v(" "),s("p",[t._v("例如，下面是一个使用"),s("code",[t._v("supplyAsync()")]),t._v("方法异步执行任务的例子：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行耗时的操作，例如查询数据库、调用远程接口等")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("ol",{attrs:{start:"3"}},[s("li",[s("strong",[t._v("处理任务结果")])])]),t._v(" "),s("p",[t._v("可以通过"),s("code",[t._v("CompletableFuture")]),t._v("的"),s("code",[t._v("thenApply()")]),t._v("、"),s("code",[t._v("thenAccept()")]),t._v("和"),s("code",[t._v("thenRun()")]),t._v("等方法来处理任务的结果。其中，"),s("code",[t._v("thenApply()")]),t._v("方法用于处理==有返回值==的任务的结果，"),s("code",[t._v("thenAccept()")]),t._v("方法用于处理==没有返回值==的任务的结果，而"),s("code",[t._v("thenRun()")]),t._v("方法则不关心任务的结果，只关心任务执行完毕后需要执行的操作。")]),t._v(" "),s("p",[t._v("例如，下面是一个使用"),s("code",[t._v("thenApply()")]),t._v("方法处理任务结果的例子：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行耗时的操作，例如查询数据库、调用远程接口等")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenApply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对任务结果进行处理，例如字符串拼接等")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("ol",{attrs:{start:"4"}},[s("li",[s("strong",[t._v("组合多个任务")])])]),t._v(" "),s("p",[t._v("可以使用"),s("code",[t._v("CompletableFuture")]),t._v("的"),s("code",[t._v("thenCombine()")]),t._v("、"),s("code",[t._v("thenCompose()")]),t._v("和"),s("code",[t._v("thenAcceptBoth()")]),t._v("等方法来组合多个任务。其中，"),s("code",[t._v("thenCombine()")]),t._v("方法用于将两个有返回值的任务的结果进行合并，"),s("code",[t._v("thenCompose()")]),t._v("方法用于将一个有返回值的任务的结果作为另一个任务的输入，而"),s("code",[t._v("thenAcceptBoth()")]),t._v("方法则用于处理两个没有返回值的任务的结果。")]),t._v(" "),s("p",[t._v("例如，下面是一个使用"),s("code",[t._v("thenCompose()")]),t._v("方法组合多个任务的例子：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行耗时的操作，例如查询数据库、调用远程接口等")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" future2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("thenCompose")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对任务结果进行处理，并返回一个新的CompletableFuture对象")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])])]),t._v(" "),s("p",[t._v("以下是一些使用 "),s("code",[t._v("CompletableFuture")]),t._v("的场景：")]),t._v(" "),s("ol",[s("li",[t._v("异步执行任务并返回结果，避免阻塞主线程。")]),t._v(" "),s("li",[t._v("处理多个异步任务的结果，例如等待所有任务完成后进行汇总处理。")]),t._v(" "),s("li",[t._v("使用回调函数处理异步操作的结果，例如将结果写入数据库或发送到远程服务。")]),t._v(" "),s("li",[t._v("超时处理，当异步操作超时后，可以取消任务并返回默认值或者抛出异常。")]),t._v(" "),s("li",[t._v("并发处理多个请求，例如从不同的数据源获取数据并聚合结果。")])]),t._v(" "),s("p",[t._v("下面是一个使用 "),s("code",[t._v("CompletableFuture")]),t._v("的例子，假设我们需要从不同的数据源获取今天的收入和订单数量，并将它们显示在智慧大屏上。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token import"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("concurrent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFutureExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" incomeFuture "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIncomeToday")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" orderCountFuture "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("supplyAsync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOrderCountToday")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CompletableFuture")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("allOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("incomeFuture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" orderCountFuture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待所有任务完成")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" income "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" incomeFuture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" orderCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" orderCountFuture"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将收入和订单数量显示在智慧大屏上")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"今日收入："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" income"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"今日订单数量："')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" orderCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getIncomeToday")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: 实际业务逻辑中，从数据库或者其他数据源中查询今天的收入数据")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOrderCountToday")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: 实际业务逻辑中，从数据库或者其他数据源中查询今天的订单数量数据")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br")])]),s("p",[t._v("在上面的代码中，我们使用了 "),s("code",[t._v("CompletableFuture.supplyAsync()")]),t._v(" 方法来异步地获取今天的收入和订单数量。因为这两个操作互不依赖，所以我们可以分别使用两个 "),s("code",[t._v("CompletableFuture")]),t._v("来执行它们。")]),t._v(" "),s("p",[t._v("接着，在主线程中使用 "),s("code",[t._v("CompletableFuture.allOf()")]),t._v(" 方法等待两个 "),s("code",[t._v("CompletableFuture")]),t._v("都完成，然后分别调用它们的 "),s("code",[t._v("get()")]),t._v(" 方法获取结果。")]),t._v(" "),s("p",[t._v("最后，我们将收入和订单数量显示在智慧大屏上。")]),t._v(" "),s("p",[t._v("当然，在实际业务中，可能会有更多的异步操作和处理逻辑，但核心思想是相同的：使用 "),s("code",[t._v("CompletableFuture")]),t._v("来执行异步操作，并在必要时组合、转换、处理异步操作的结果。")]),t._v(" "),s("h2",{attrs:{id:"十四、volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#十四、volatile"}},[t._v("#")]),t._v(" 十四、volatile")]),t._v(" "),s("p",[s("code",[t._v("volatile")]),t._v("是 Java 中的一个关键字，用于修饰变量。它主要有以下两个作用：")]),t._v(" "),s("ol",[s("li",[t._v("保证可见性：使用 "),s("code",[t._v("volatile")]),t._v("关键字修饰的变量在多线程环境中发生修改后可以立即被其他线程看到，从而保证了该变量的可见性。这是由于 "),s("code",[t._v("volatile")]),t._v("变量的值会直接存储在==主内存==中，每次读取时都会从主内存中获取最新的值。")]),t._v(" "),s("li",[t._v("禁止指令重排序优化：在不影响单线程程序执行结果的前提下，编译器和处理器可能对指令进行重排序等优化操作以提高程序的执行效率。但是这种优化可能会对多线程并发访问造成问题，因此使用 "),s("code",[t._v("volatile")]),t._v("关键字可以禁止指令重排序优化，保证多线程环境下程序的正确性。")])]),t._v(" "),s("p",[t._v("需要注意的是，"),s("code",[t._v("volatile")]),t._v("关键字不能保证多个线程共同修改变量时所带来的不一致问题，因此在涉及到多个线程同时修改变量时，仍然需要使用锁或其他并发控制工具来确保数据的正确性。")]),t._v(" "),s("blockquote",[s("p",[t._v("虽然使用 "),s("code",[t._v("volatile")]),t._v("关键字可以保证共享变量的可见性，但是它并不能保证对共享变量的操作具备原子性。")]),t._v(" "),s("p",[s("code",[t._v("volatile")]),t._v("关键字只能确保对单个 "),s("code",[t._v("volatile")]),t._v("变量的读写操作具备原子性，即在线程中读取和修改 "),s("code",[t._v("volatile")]),t._v("变量时，会从主内存中读取最新的值，并且在修改后立即刷新到主内存中。因此，当多个线程同时对同一个 "),s("code",[t._v("volatile")]),t._v("变量进行修改时，仍然可能会出现竞争条件，导致数据不一致或者错误的结果。")]),t._v(" "),s("p",[t._v("例如，假设有一个计数器变量 "),s("code",[t._v("count")]),t._v("，多个线程同时对该变量进行自增操作：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("尽管在 "),s("code",[t._v("count")]),t._v("变量上使用了 "),s("code",[t._v("volatile")]),t._v("关键字，但是在多线程并发执行时仍然可能导致计数器值不正确的问题，因为 "),s("code",[t._v("count++")]),t._v("操作实际上包含了"),s("strong",[t._v("读取")]),t._v("、"),s("strong",[t._v("增加")]),t._v("和"),s("strong",[t._v("写回")]),t._v("三个步骤，而==这三个步骤并不具备原子性==。")]),t._v(" "),s("p",[t._v("如果需要对多个操作作为一个整体来处理，必须使用锁或者其他并发控制工具来确保操作的原子性。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);