(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{347:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[s._v("#")]),s._v(" 锁")]),s._v(" "),t("h2",{attrs:{id:"一、讲一下synchronized关键字的底层原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、讲一下synchronized关键字的底层原理"}},[s._v("#")]),s._v(" 一、讲一下synchronized关键字的底层原理？")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v(" 关键字是 Java 中用于线程同步的关键字。它可以保证同一时间只有一个线程可以执行同步块或同步方法中的代码。")]),s._v(" "),t("p",[s._v("原理是利用了 JVM 中的"),t("strong",[s._v("监视器锁")]),s._v(" ("),t("code",[s._v("monitor")]),s._v(" lock) 来实现的。==每一个对象都有一个监视器锁==，当一个线程执行了一个==对象的同步块或同步方法==时，它会尝试==获取该对象的监视器锁==。如果该监视器锁被另一个线程占用，那么==当前线程会被阻塞==，直到占用该监视器锁的线程释放该锁。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedTest")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"synchronized 代码块"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("使用"),t("code",[s._v("javac -encoding UTF-8 SynchronizedTest.java")]),s._v("编译成class文件")]),s._v(" "),t("p",[s._v("使用"),t("code",[s._v("javap -v SynchronizedTest.class")]),s._v("查看字节码文件信息")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230217200944039.png",alt:"image-20230217200944039"}})]),s._v(" "),t("p",[s._v("从上面我们可以看出：")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v("同步语句块的实现使用的是 "),t("code",[s._v("monitorenter")]),s._v(" 和 "),t("code",[s._v("monitorexit")]),s._v(" 指令")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("monitorenter")]),s._v("指令指向同步代码块的开始位置")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("monitorexit")]),s._v("指令则指明同步代码块的结束位置")])])]),s._v(" "),t("p",[t("code",[s._v("monitor")]),s._v("对象存在于每个Java对象的对象头中，"),t("code",[s._v("synchronized")]),s._v("锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("monitor的结构和执行流程如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20220831195353786.png",alt:"image-20220831195353786"}})]),s._v(" "),t("p",[s._v("解释：")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("WaitSet")]),s._v("：保存处于Waiting状态的线程")]),s._v(" "),t("p",[t("code",[s._v("EntryList")]),s._v("：保存处于Blocked状态的线程")]),s._v(" "),t("p",[t("code",[s._v("Owner")]),s._v("：持有锁的线程")])]),s._v(" "),t("ol",[t("li",[s._v("刚开始 "),t("code",[s._v("Monitor")]),s._v("中 "),t("code",[s._v("Owner")]),s._v("为 "),t("code",[s._v("null")])]),s._v(" "),t("li",[s._v("当 "),t("code",[s._v("Thread-2")]),s._v("执行"),t("code",[s._v("synchronized(obj)")]),s._v(" 就会将 Monitor 的所有者 "),t("code",[s._v("Owner")]),s._v("置为 "),t("code",[s._v("Thread-2")]),s._v("，Monitor中只能有一个 "),t("code",[s._v("Owner")])]),s._v(" "),t("li",[s._v("在 "),t("code",[s._v("Thread-2")]),s._v(" 上锁的过程中，如果 "),t("code",[s._v("Thread-3")]),s._v("，"),t("code",[s._v("Thread-4")]),s._v("，"),t("code",[s._v("Thread-5")]),s._v(" 也来执行 "),t("code",[s._v("synchronized(obj)")]),s._v("，就会进入 "),t("code",[s._v("EntryList")]),s._v(" "),t("code",[s._v("BLOCKED")])]),s._v(" "),t("li",[t("code",[s._v("Thread-2")]),s._v(" 执行完同步代码块的内容，然后唤醒 "),t("code",[s._v("EntryList")]),s._v("中等待的线程来竞争锁，竞争的时是非公平的")]),s._v(" "),t("li",[s._v("图中 "),t("code",[s._v("WaitSet")]),s._v("中的 "),t("code",[s._v("Thread-0")]),s._v("，"),t("code",[s._v("Thread-1")]),s._v(" 是之前获得过锁，"),t("code",[s._v("Owner")]),s._v("线程发现==条件不满足==，调用 "),t("code",[s._v("wait")]),s._v("方法，即可进入 "),t("code",[s._v("WaitSet")]),s._v("变为 "),t("code",[s._v("WAITING")]),s._v("状态。（"),t("code",[s._v("BLOCKED")]),s._v("和 "),t("code",[s._v("WAITING")]),s._v("的线程都处于阻塞状态，不占用 CPU 时间片）")]),s._v(" "),t("li",[t("code",[s._v("BLOCKED")]),s._v("线程会在 "),t("code",[s._v("Owner")]),s._v("线程释放锁时唤醒，"),t("code",[s._v("WAITING")]),s._v("线程会在 "),t("code",[s._v("Owner")]),s._v("线程调用 "),t("code",[s._v("notify")]),s._v("或 "),t("code",[s._v("notifyAll")]),s._v("时唤醒，但")]),s._v(" "),t("li",[s._v("唤醒后并不意味者立刻获得锁，仍需进入 "),t("code",[s._v("EntryList")]),s._v("重新竞争锁的使用权。")])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("总结:")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v(" 底层使用的JVM级别中的"),t("code",[s._v("Monitor")]),s._v(" 来决定当前线程是否获得了锁，如果某一个线程获得了锁，在没有释放锁之前，其他线程是不能或得到锁的。"),t("code",[s._v("synchronized")]),s._v(" 属于悲观锁。")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v(" 因为需要依赖于JVM级别的"),t("code",[s._v("Monitor")]),s._v(" ，相对性能也比较低。")]),s._v(" "),t("p",[s._v("-------------------------------------------进阶回答-------------------------------------------------")]),s._v(" "),t("p",[s._v("在JDK6之前"),t("code",[s._v("synchronized")]),s._v("锁都属于==重量级锁==，因为底层都是使用"),t("code",[s._v("Monitor")]),s._v(" 来实现的。但是在JDK6之后对"),t("code",[s._v("synchronized")]),s._v("做了升级优化，里面主要体现在："),t("strong",[s._v("CAS 自旋")]),s._v("、"),t("strong",[s._v("锁消除")]),s._v("、"),t("strong",[s._v("锁膨胀")]),s._v("、"),t("strong",[s._v("轻量级锁")]),s._v("、"),t("strong",[s._v("偏向锁")]),s._v("等。")]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("synchronize 的三种应用方式")])]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("修饰实例方法")]),s._v("，作用于当前实例加锁，进入同步代码前要获得当前实例的锁")]),s._v(" "),t("li",[t("strong",[s._v("修饰静态方法")]),s._v("，作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁")]),s._v(" "),t("li",[t("strong",[s._v("修饰代码块")]),s._v("，并指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  1.使用synchronized修饰实例方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该方法会锁定当前对象")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  相当于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  2.使用synchronized修饰静态方法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 相当于")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3.使用synchronized修饰代码块")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" lock "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("myMethod")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("lock"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 该代码块会锁定指定对象 lock")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ...")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("h2",{attrs:{id:"二、-cas-你知道吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、-cas-你知道吗"}},[s._v("#")]),s._v(" 二、 CAS 你知道吗？")]),s._v(" "),t("p",[s._v("CAS（Compare And Swap）是一种并发编程中的技术，它是一种基于原子操作的实现方式，可以用来解决多线程访问共享资源时的竞态条件问题。")]),s._v(" "),t("p",[s._v("CAS 操作需要通过三个参数来完成，分别是要修改的==内存位置的地址 V==、==旧的期望的值 A== 和==要修改的新值 B==。CAS 操作将会在当前内存位置的值V与期望的值 A 相等时，将该位置的值更新为新的值 B。CAS 操作是原子的，它可以保证在并发环境下对共享变量的操作是安全的，避免了多个线程同时访问一个变量时发生竞争的问题。")]),s._v(" "),t("p",[s._v("在 Java 中，CAS 操作通常由 "),t("code",[s._v("AtomicInteger")]),s._v("和 "),t("code",[s._v("AtomicLong")]),s._v("等原子类提供支持，这些类中的方法都是使用了 CAS 操作来实现的。CAS 操作是一种轻量级的同步机制，它不需要使用重量级的锁来实现，因此具有更高的并发性和更好的性能。但是，CAS 操作也有一些限制，例如只能用于更新单个变量，不能用于实现复合操作，也不能解决 ABA 问题等。")]),s._v(" "),t("h2",{attrs:{id:"三、cas有什么缺陷-如何解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、cas有什么缺陷-如何解决"}},[s._v("#")]),s._v(" 三、CAS有什么缺陷？如何解决？")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("ABA问题")])]),s._v(" "),t("p",[s._v("所谓ABA问题，就是一个值原来是A，变成了B，又变回了A。这个时候使用CAS是检查不出变化的，但实际上却被更新了两次。")]),s._v(" "),t("p",[s._v("ABA问题的解决思路是在变量前面追加上==版本号或者时间戳==。从JDK 1.5开始，JDK的"),t("code",[s._v("atomic")]),s._v("包里提供了一个类"),t("code",[s._v("AtomicStampedReference")]),s._v("类来解决ABA问题。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("循环时间长开销大")])]),s._v(" "),t("p",[s._v("CAS多与自旋结合。如果自旋CAS长时间不成功，会占用大量的CPU资源。")]),s._v(" "),t("p",[s._v("解决办法就是==控制自旋的次数==。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("只能保证一个共享变量的原子操作")])]),s._v(" "),t("ol",[t("li",[s._v("使用JDK 1.5开始就提供的"),t("code",[s._v("AtomicReference")]),s._v("类保证对象之间的原子性，把多个变量放到一个对象里面进行CAS操作；")]),s._v(" "),t("li",[s._v("使用锁。锁内的临界区代码可以保证只有当前线程能操作。")])])])]),s._v(" "),t("h2",{attrs:{id:"四、什么是aqs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、什么是aqs"}},[s._v("#")]),s._v(" 四、什么是AQS？")]),s._v(" "),t("p",[s._v("AQS的话，其实就一个jdk提供的类"),t("code",[s._v("AbstractQueuedSynchronizer")]),s._v("("),t("strong",[s._v("队列同步器")]),s._v(")，是阻塞式锁和相关的同步器工具的框架。")]),s._v(" "),t("p",[s._v("AQS作为Java中同步机制的核心，提供了一种灵活高效的方式来实现同步器，为Java中各种同步机制的实现提供了基础。")]),s._v(" "),t("blockquote",[t("p",[s._v("AQS 的核心思想是：如果一个线程需要访问共享资源，则需要先获得同步状态，否则就需要被阻塞；另外一个线程访问同步代码块时，只能在等待队列中等待，当获得同步状态后才可以进入同步代码块执行。AQS 内部维护了一个阻塞队列和一个同步状态 state，其中 state 表示当前同步状态，如果为 0 则表示没有任何线程占用同步状态。")])]),s._v(" "),t("p",[s._v("AQS维护了一个volatile int "),t("code",[s._v("state")]),s._v("成员变量和一个"),t("code",[s._v("FIFO")]),s._v("线程等待队列成员变量，多线程争用资源被阻塞的时候就会进入这个队列。")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("内部有一个属性 "),t("code",[s._v("state")]),s._v("属性来表示资源的状态，默认"),t("code",[s._v("state")]),s._v("等于"),t("code",[s._v("0")]),s._v("，表示没有获取锁，"),t("code",[s._v("state")]),s._v("等于"),t("code",[s._v("1")]),s._v("的时候才表示获取到了锁。通过CAS机制设置 state 状态")]),s._v(" "),t("p",[s._v("state就是共享资源，其访问方式有如下三种：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("getState")]),s._v("- 获取 state 状态")]),s._v(" "),t("li",[t("code",[s._v("setState")]),s._v("- 设置 state 状态")]),s._v(" "),t("li",[t("code",[s._v("compareAndSetState")]),s._v("- CAS机制设置 state 状态")])]),s._v(" "),t("p",[s._v("AQS 定义了两种资源共享方式：")]),s._v(" "),t("ul",[t("li",[s._v("1."),t("code",[s._v("Exclusive")]),s._v("：独占，只有一个线程能执行，如"),t("code",[s._v("ReentrantLock")])]),s._v(" "),t("li",[s._v("2."),t("code",[s._v("Share")]),s._v("：共享，多个线程可以同时执行，如"),t("code",[s._v("Semaphore")]),s._v("、"),t("code",[s._v("CountDownLatch")]),s._v("、"),t("code",[s._v("ReadWriteLock")]),s._v("，"),t("code",[s._v("CyclicBarrier")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210628144757689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1NDA2MDky,size_16,color_FFFFFF,t_70",alt:"img"}})]),s._v(" "),t("p",[s._v("在它的内部还提供了基于 FIFO 的等待队列，是一个双向列表，其中")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("tail")]),s._v("指向队列最后一个元素")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("head")]),s._v("指向队列中最久的一个元素")])])]),s._v(" "),t("p",[s._v("当前线程如果获取同步状态失败时，AQS则会将当前线程已经等待状态等信息构造成一个节点（Node）并将其加入到CLH同步队列，同时会阻塞当前线程，当同步状态释放时，会把首节点唤醒（公平锁），使其再次尝试获取同步状态。")]),s._v(" "),t("h2",{attrs:{id:"五、reentrantlock的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、reentrantlock的实现原理"}},[s._v("#")]),s._v(" 五、ReentrantLock的实现原理")]),s._v(" "),t("p",[t("code",[s._v("ReentrantLock")]),s._v("是一个可重入锁:，调用 "),t("code",[s._v("lock()")]),s._v(" 方法获取了锁之后，再次调用 "),t("code",[s._v("lock()")]),s._v("，是不会再阻塞，内部直接增加重入次数就行了，表示这个线程已经重复获取一把锁而不需要等待锁的释放。")]),s._v(" "),t("p",[t("code",[s._v("ReentrantLock")]),s._v("是属于"),t("code",[s._v("juc")]),s._v("包下的类，属于"),t("code",[s._v("api")]),s._v("层面的锁，跟"),t("code",[s._v("synchronized")]),s._v("一样，都是==悲观锁==。通过"),t("code",[s._v("lock()")]),s._v("用来获取锁，"),t("code",[s._v("unlock()")]),s._v("释放锁。")]),s._v(" "),t("p",[s._v("它的底层实现原理主要利用"),t("strong",[s._v("CAS+AQS队列")]),s._v("来实现。它支持公平锁和非公平锁，两者的实现类似")]),s._v(" "),t("p",[s._v("构造方法接受一个可选的公平参数（"),t("strong",[s._v("默认非公平锁")]),s._v("），当设置为"),t("code",[s._v("true")]),s._v("时，表示公平锁，否则为非公平锁。公平锁的效率往往没有非公平锁的效率高。")]),s._v(" "),t("h2",{attrs:{id:"六、synchronized和lock有什么区别-加锁的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、synchronized和lock有什么区别-加锁的方式有哪些"}},[s._v("#")]),s._v(" 六、synchronized和Lock有什么区别 ? \t加锁的方式有哪些 ?")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v("和 "),t("code",[s._v("Lock")]),s._v("都可以用来保证多线程访问的同步性，它们的区别如下：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("语法层面：")]),s._v(" "),t("p",[t("code",[s._v("synchronized")]),s._v("是关键字，源码在 "),t("code",[s._v("jvm")]),s._v("中，用 "),t("code",[s._v("c++")]),s._v(" 语言实现")]),s._v(" "),t("p",[t("code",[s._v("Lock")]),s._v("是接口，源码由 "),t("code",[s._v("jdk")]),s._v("提供，用 "),t("code",[s._v("java")]),s._v("语言实现")])]),s._v(" "),t("li",[t("p",[s._v("使用方式不同："),t("code",[s._v("synchronized")]),s._v("是在方法或代码块上加锁，而 "),t("code",[s._v("Lock")]),s._v(" 是在代码中显式获取锁并在使用完成后显式释放锁。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("synchronized")]),s._v("的使用方式比较简单，只需要在需要同步的代码块或方法前加上"),t("code",[s._v("synchronized")]),s._v("关键字即可。而"),t("code",[s._v("Lock")]),s._v("的使用方式比较复杂，需要显示地获取锁、释放锁，需要使用"),t("code",[s._v("try-finally")]),s._v("语句确保在任何情况下都会释放锁。")])])]),s._v(" "),t("li",[t("p",[s._v("性能不同："),t("code",[s._v("Lock")]),s._v("比 "),t("code",[s._v("synchronized")]),s._v("更灵活、更高效，因为在高并发情况下 "),t("code",[s._v("synchronized")]),s._v("可能会导致性能问题。在 "),t("code",[s._v("JDK 1.6")]),s._v(" 以前，"),t("code",[s._v("synchronized")]),s._v("的性能明显较差，但在 "),t("code",[s._v("JDK 1.6")]),s._v("中对其进行了优化，使得==在低并发的情况下两者的性能表现基本一致，而在高并发的情况下 "),t("code",[s._v("Lock")]),s._v("的性能优势更加明显==。")])]),s._v(" "),t("li",[t("p",[s._v("功能不同："),t("code",[s._v("synchronized")]),s._v("只有两种锁的状态，即锁定和未锁定。而 "),t("code",[s._v("Lock")]),s._v("有更多的功能，例如 "),t("code",[s._v("ReentrantLock")]),s._v("可以实现可重入锁，还可以实现公平锁和非公平锁。")])])]),s._v(" "),t("h2",{attrs:{id:"七、死锁产生的条件是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、死锁产生的条件是什么"}},[s._v("#")]),s._v(" 七、死锁产生的条件是什么？")]),s._v(" "),t("p",[s._v("死锁产生的条件包括以下几个：")]),s._v(" "),t("ol",[t("li",[s._v("互斥条件：资源不能被多个线程同时持有。")]),s._v(" "),t("li",[s._v("请求与保持条件：线程在持有某个资源的同时还请求其它资源。")]),s._v(" "),t("li",[s._v("不剥夺条件：线程已经获得的资源在没有完成任务之前不能被强制性地剥夺。")]),s._v(" "),t("li",[s._v("循环等待条件：存在多个线程形成一种头尾相接的循环等待资源关系。")])]),s._v(" "),t("blockquote",[t("p",[s._v("破坏”互斥”条件：系统里取消互斥、若资源一般不被一个进程独占使用，那么死锁是肯定不会发生的，但一般“互斥”条件是无法破坏的,因此，在死锁预防里主要是破坏其他三个必要条件，而不去涉及破坏“互斥”条件。")])]),s._v(" "),t("blockquote",[t("p",[s._v("例如：")]),s._v(" "),t("p",[s._v("t1 线程获得A对象锁，接下来想获取B对象的锁")]),s._v(" "),t("p",[s._v("t2 线程获得B对象锁，接下来想获取A对象的锁")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Deadlock")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" t1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lock A"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RuntimeException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lock B"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"操作..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" t2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lock B"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throw")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RuntimeException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lock A"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n               "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"操作..."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      t1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      t2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230217222222821.png",alt:"image-20230217222222821"}})]),s._v(" "),t("p",[s._v("此时程序并没有结束，这种现象就是死锁现象...线程t1持有A的锁等待获取B锁，线程t2持有B的锁等待获取A的锁。")]),s._v(" "),t("h2",{attrs:{id:"八、如何进行死锁诊断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、如何进行死锁诊断"}},[s._v("#")]),s._v(" 八、如何进行死锁诊断？")]),s._v(" "),t("p",[s._v("当程序出现了死锁现象，我们可以使用jdk自带的工具："),t("code",[s._v("jps")]),s._v("和 "),t("code",[s._v("jstack")])]),s._v(" "),t("p",[s._v("步骤如下：")]),s._v(" "),t("p",[s._v("第一：查看运行的线程")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230217222948989.png",alt:"image-20230217222948989"}})]),s._v(" "),t("p",[s._v("第二：使用"),t("code",[s._v("jstack")]),s._v("查看线程运行的情况，下图是截图的关键信息")]),s._v(" "),t("p",[s._v("运行命令："),t("code",[s._v("jstack -l 56956")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230217223349069.png",alt:"image-20230217223349069"}})]),s._v(" "),t("h2",{attrs:{id:"九、请谈谈你对-volatile-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、请谈谈你对-volatile-的理解"}},[s._v("#")]),s._v(" 九、请谈谈你对 volatile 的理解")]),s._v(" "),t("p",[s._v("在 Java 中，"),t("code",[s._v("volatile")]),s._v("是一种轻量级的同步机制，用于保证多个线程之间对变量的"),t("strong",[s._v("可见性")]),s._v("和"),t("strong",[s._v("有序性")]),s._v("，以及防止编译器对指令进行重排序。")]),s._v(" "),t("p",[t("strong",[s._v("可见性")])]),s._v(" "),t("p",[s._v("当一个==变量被声明为 "),t("code",[s._v("volatile")]),s._v("后，任何对该变量的修改操作都会立即写回主内存，并通知其他线程刷新缓存中的值==。同时，对该变量的读操作也会从主内存中获取最新的值，而不是从缓存中获取，保证了多线程之间对变量的可见性。")]),s._v(" "),t("p",[t("strong",[s._v("有序性")])]),s._v(" "),t("p",[s._v("此外，由于 CPU 为了提高执行效率，可能会对指令进行重排序，这样就有可能导致指令执行的顺序和代码的编写顺序不一致，从而导致程序出现奇怪的行为。但是==在变量声明为 "),t("code",[s._v("volatile")]),s._v("后，会禁止编译器和 CPU 对指令进行重排序，保证了指令的有序性==。")]),s._v(" "),t("p",[s._v("需要注意的是，"),t("code",[s._v("volatile")]),s._v("并不能保证变量的操作具有原子性，例如一个 "),t("code",[s._v("long")]),s._v("类型的变量，在多线程环境下进行递增操作时，即使声明为 "),t("code",[s._v("volatile")]),s._v("，也无法保证操作的原子性。此时需要使用 "),t("code",[s._v("synchronized")]),s._v("或者 "),t("code",[s._v("Lock")]),s._v("等同步机制来保证操作的原子性。")]),s._v(" "),t("p",[s._v("另外需要注意的是，虽然 "),t("code",[s._v("volatile")]),s._v("可以保证多个线程之间对变量的"),t("strong",[s._v("可见性")]),s._v("和"),t("strong",[s._v("有序性")]),s._v("，但是如果多个线程之间的操作存在逻辑上的先后顺序，需要使用 "),t("code",[s._v("synchronized")]),s._v("或者 "),t("code",[s._v("Lock")]),s._v("等同步机制来保证线程之间的顺序性。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("AtomicInteger")]),s._v(" 是一个 Java 类，它提供了一种原子方式更新整数值的方法。其中包括 "),t("code",[s._v("incrementAndGet()")]),s._v(" 和 "),t("code",[s._v("getAndIncrement()")]),s._v(" 方法。")]),s._v(" "),t("p",[s._v("这两个方法都是用于给整数值加 1，并返回增加后的结果值。唯一的区别在于它们的操作顺序不同。")]),s._v(" "),t("p",[t("code",[s._v("incrementAndGet()")]),s._v(" 方法先将值加 1，然后返回该值。也就是说，它会先执行加法操作再返回结果值。")]),s._v(" "),t("p",[s._v("而 "),t("code",[s._v("getAndIncrement()")]),s._v(" 方法则相反。它首先返回当前值，然后再对其加 1。也就是说，它会先返回结果值再执行加法操作。")]),s._v(" "),t("p",[s._v("例如，假设初始值为 5：")]),s._v(" "),t("ul",[t("li",[s._v("调用 "),t("code",[s._v("incrementAndGet()")]),s._v(" 方法将返回 6，并将 "),t("code",[s._v("AtomicInteger")]),s._v(" 的值设置为 6。")]),s._v(" "),t("li",[s._v("调用 "),t("code",[s._v("getAndIncrement()")]),s._v(" 方法将返回 5，并将 "),t("code",[s._v("AtomicInteger")]),s._v(" 的值设置为 6。")])]),s._v(" "),t("p",[s._v("需要注意的是，由于这两个方法都是原子操作，因此多个线程可以同时调用它们，而不会出现竞争条件或死锁等问题。")])]),s._v(" "),t("h2",{attrs:{id:"十、concurrenthashmap的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#十、concurrenthashmap的原理"}},[s._v("#")]),s._v(" 十、ConcurrentHashMap的原理")]),s._v(" "),t("p",[t("code",[s._v("ConcurrentHashMap")]),s._v("是一种==线程安全==的==高效Map==集合")]),s._v(" "),t("p",[t("strong",[s._v("底层数据结构：")])]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("JDK1.7")]),s._v("的 "),t("code",[s._v("ConcurrentHashMap")]),s._v("底层采用 分段的数组+链表 实现")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("JDK1.8")]),s._v("采用的数据结构跟"),t("code",[s._v("HashMap1.8")]),s._v("的结构一样，数组+链表/红黑二叉树。")])])]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("==在JDK1.7中，"),t("code",[s._v("ConcurrentHashMap")]),s._v("采用"),t("code",[s._v("Segment")]),s._v("+ "),t("code",[s._v("HashEntry")]),s._v("的方式进行实现==")]),s._v(" "),t("p",[s._v("一个 "),t("code",[s._v("ConcurrentHashMap")]),s._v("里包含一个 "),t("code",[s._v("Segment")]),s._v("数组。"),t("code",[s._v("Segment")]),s._v("的结构和"),t("code",[s._v("HashMap")]),s._v("类似，是一 种数组和链表结构，一个 "),t("code",[s._v("Segment")]),s._v("包含一个 "),t("code",[s._v("HashEntry")]),s._v("数组，每个 "),t("code",[s._v("HashEntry")]),s._v("是一个链表结构 的元素，每个 "),t("code",[s._v("Segment")]),s._v("守护着一个"),t("code",[s._v("HashEntry")]),s._v("数组里的元素，当对 "),t("code",[s._v("HashEntry")]),s._v("数组的数据进行修改时，必须首先获得对应的 "),t("code",[s._v("Segment")]),s._v("的锁。")]),s._v(" "),t("p",[t("code",[s._v("Segment")]),s._v("是一种可重入的锁 "),t("code",[s._v("ReentrantLock")]),s._v("，每个 "),t("code",[s._v("Segment")]),s._v("守护一个"),t("code",[s._v("HashEntry")]),s._v("数组里的元素，当对 "),t("code",[s._v("HashEntry")]),s._v("数组的数据进行修改时，必须首先获得对应的 "),t("code",[s._v("Segment")]),s._v("锁。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/12/11/16ef52f1ce824293~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"jdk1.7 ConcurrentHashMap结构"}})]),s._v(" "),t("p",[s._v("==在"),t("code",[s._v("JDK1.8")]),s._v("中，放弃了"),t("code",[s._v("Segment")]),s._v("臃肿的设计，取而代之的是采用"),t("code",[s._v("Node + CAS + Synchronized")]),s._v("来保证并发安全==进行实现，"),t("code",[s._v("synchronized")]),s._v("只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲 突，就不会产生并发 , 效率得到提升")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/jdk1.8HashMap%E7%BB%93%E6%9E%84.png",alt:"jdk1.8HashMap结构"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);