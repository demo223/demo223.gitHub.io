(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{351:function(s,a,t){"use strict";t.r(a);var n=t(14),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-什么是微服务架构-有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是微服务架构-有什么特点"}},[s._v("#")]),s._v(" 1 什么是微服务架构？有什么特点？")]),s._v(" "),a("p",[s._v("简单来说，微服务架构就是将一个系统拆分成多个相对的小系统，"),a("strong",[s._v("每个小系统职能单一")]),s._v("，"),a("strong",[s._v("业务不会重复开发")]),s._v("，同时"),a("strong",[s._v("数据库也独立维护")]),s._v("，这样就能做到业务系统的高度复用，具备快速扩展应用的能力。")]),s._v(" "),a("p",[a("strong",[s._v("微服务每个项目都能独立部署")]),s._v("，这样做能"),a("strong",[s._v("大幅降低各个服务的耦合度")]),s._v("，同时各个服务拆分后，依赖库会减少，代码量也会减少，能有效降低开发的复杂度，同时还能按需动态扩容。")]),s._v(" "),a("p",[s._v("微服务虽说有很多优点，但也有一些挑战，比如"),a("strong",[s._v("架构更复杂了")]),s._v("，"),a("strong",[s._v("数据的一致性维护更难了")]),s._v("，"),a("strong",[s._v("测试的难度和运维的难度都提高了")]),s._v("。")]),s._v(" "),a("p",[s._v("微服务架构当前落地的主流技术栈是SpringCloud，SpringCloudAlibaba也提供了很多非常优秀的解决方案，比如服务注册中心Nacos、分布式事务Seata、熔断限流技术Sentinel等。")]),s._v(" "),a("h2",{attrs:{id:"_2-eureka工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-eureka工作原理"}},[s._v("#")]),s._v(" 2 Eureka工作原理")]),s._v(" "),a("p",[s._v("Eureka是一个服务注册中心，它采用了"),a("strong",[s._v("CS")]),s._v("架构，包括了"),a("code",[s._v("Eureka Server")]),s._v("（服务端），"),a("code",[s._v("EureKa client")]),s._v("（客户端）。")]),s._v(" "),a("p",[s._v("所有服务提供者启动的时候，会将自身的地址信息注册到Eureka Server，Eureka Server会将"),a("strong",[s._v("当前服务名字")]),s._v("作为"),a("code",[s._v("key")]),s._v("，将"),a("strong",[s._v("服务地址")]),s._v("作为值存储起来。同时每过"),a("code",[s._v("30")]),s._v("秒会向Eureka Server发送"),a("strong",[s._v("心跳续约")]),s._v("，Eureka Server在"),a("code",[s._v("90")]),s._v("秒没收到心跳续约，就会将服务从注册的"),a("strong",[s._v("可用服务列表中移除")]),s._v("。")]),s._v(" "),a("p",[s._v("消费者实现远程调用前，会先"),a("strong",[s._v("根据服务名字")]),s._v("从Eureka Server获取"),a("strong",[s._v("服务可用列表")]),s._v("，并根据负载均衡算法选择一个可用的服务，并将请求地址中的服务名字换成IP和端口，再发送Http请求实现远程调用。")]),s._v(" "),a("p",[s._v("Eureka Server注重高可用，遵循了CAP理论中的AP。")]),s._v(" "),a("p",[s._v("Eureka Server已经闭源了，后续新版本我们已经无法正常使用，所以工作中我们一般会建议采取一些其他替代方案，例如Nacos。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230113203415894.png",alt:"image-20230113203415894"}})]),s._v(" "),a("h2",{attrs:{id:"_3-ribbon如何切换负载均衡算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-ribbon如何切换负载均衡算法"}},[s._v("#")]),s._v(" 3 Ribbon如何切换负载均衡算法？")]),s._v(" "),a("p",[s._v("Ribbon切换负载均衡算法有2种方式。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("第1种是"),a("strong",[s._v("直接在程序中创建负载均衡的实例")]),s._v("，"),a("strong",[s._v("同时将实例交给SpringIOC容器管理")]),s._v("。")])]),s._v(" "),a("li",[a("p",[s._v("第2种是"),a("strong",[s._v("直接在配置文件中指定某个服务的负载均衡算法")]),s._v("。")])])]),s._v(" "),a("p",[s._v("这2种方式虽然都可以实现负载均衡更能管理，但第2种只支持某一个微服务的负载均衡配置，而不支持全局配置。")]),s._v(" "),a("blockquote",[a("p",[s._v("方法1")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Bean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@LoadBalanced")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  实现负载均衡")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RestTemplate")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("restTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RestTemplate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("方法2")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("NFLoadBalancerRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" com.netflix.loadbalancer.RandomRule\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"_4-如何自定义负载均衡器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何自定义负载均衡器"}},[s._v("#")]),s._v(" 4 如何自定义负载均衡器？")]),s._v(" "),a("p",[s._v("Ribbon中所有负载均衡算法都实现了"),a("code",[s._v("IRule")]),s._v("接口，所以想要实现一个自定义的负载均衡算法，只需要"),a("strong",[s._v("实现"),a("code",[s._v("IRule")]),s._v("接口")]),s._v("即可；")]),s._v(" "),a("p",[s._v("程序中其实还提供了一个相对简单的方式，可以"),a("strong",[s._v("直接继承"),a("code",[s._v("AbstractLoadBalancerRule")]),s._v("类")]),s._v("，"),a("strong",[s._v("实现"),a("code",[s._v("choose()")]),s._v("方法")]),s._v("即可自定义负载均衡算法。")]),s._v(" "),a("p",[s._v("但其实Ribbon有很多负载均衡算法，基本能满足工作需求，我们一般没有必要自己定义一个负载均衡算法。")]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Bean")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IRule")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("myRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//\t自定义负载均衡算法")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RandomRule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"_5-采用nacos做服务集群有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-采用nacos做服务集群有什么特点"}},[s._v("#")]),s._v(" 5 采用Nacos做服务集群有什么特点？")]),s._v(" "),a("p",[s._v("采用Nacos做服务集群时，当发生了服务之间调用，"),a("strong",[s._v("会优先选择调用同集群的节点")]),s._v("，同集群的节点一般都在内网，服务调用效率极高，"),a("strong",[s._v("同集群的节点都不可用时，才会去寻找其他集群的节点")]),s._v("，并且会发出告警提示。")]),s._v(" "),a("p",[s._v("程序中要想支持这种功能，需要将负载均衡算法换成Nacos自身提供的负载均衡算法"),a("code",[s._v("NacosRule")]),s._v("。")]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("userservice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 要做配置的微服务名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ribbon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("NFLoadBalancerRuleClassName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" com.alibaba.cloud.nacos.ribbon.NacosRule "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 负载均衡规则")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"_6-nacos权重负载均衡有哪些特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-nacos权重负载均衡有哪些特点"}},[s._v("#")]),s._v(" 6 Nacos权重负载均衡有哪些特点？")]),s._v(" "),a("p",[s._v("Nacos支持权重负载均衡，如果"),a("strong",[s._v("同集群内一个服务提供者有多个实例")]),s._v("，"),a("strong",[s._v("权重越高，服务被调用的比例越大，权重值越小，服务被调用的比例越小")]),s._v("。")]),s._v(" "),a("p",[s._v("Nacos控制台可以设置实例的权重值，"),a("strong",[s._v("权重值在0~1之间")]),s._v("。"),a("strong",[s._v("如果权重设置为0，则完全不会被访问")]),s._v("。")]),s._v(" "),a("p",[s._v("在真实环境中，如果某个节点所在的机器性能差，某个机器性能好，我们可以"),a("strong",[s._v("通过权重的配置，让性能好的机器处理更多请求，性能差的机器处理更少请求")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"_7-nacos命名空间有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-nacos命名空间有什么作用"}},[s._v("#")]),s._v(" 7 Nacos命名空间有什么作用？")]),s._v(" "),a("p",[s._v("在企业项目开发中，通常会有开发环境、测试环境、生产环境，每个环境的数据都需要独立管理，否则会造成数据错乱问题。nacos命名空间正好可以解决这些问题，它能"),a("strong",[s._v("隔离不同环境的数据")]),s._v("。")]),s._v(" "),a("p",[s._v("nacos命名空间最外层是"),a("code",[s._v("namespace")]),s._v("，namespace里面是"),a("code",[s._v("group")]),s._v("，group里面是"),a("code",[s._v("service")]),s._v("和"),a("code",[s._v("data")]),s._v("，我们可以把namespace理解成不同的开发环境，group理解成不同的开发组，service和data可以理解成项目和项目的数据，不同namespace中的数据是不可见的，服务之间也无法通过负载均衡机制调用。")]),s._v(" "),a("p",[s._v("在项目中使用namespace，我们需要先在nacos管理后台创建namespace，然后在程序中指定namespace的值为我们创建的namespace的id。")]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" userservice "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 服务名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("profiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("active")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" dev "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#开发环境，这里是dev")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("nacos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("server-addr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8848")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Nacos地址")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("file-extension")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" yaml "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 文件后缀名")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" e9f9be39"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("7660"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("4cb1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("b0ca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("fb5207add281\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置空间的命名空间")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("discovery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" e9f9be39"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("7660"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("4cb1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("b0ca"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("fb5207add281\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 服务发现的命名空间")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://raw.githubusercontent.com/demo223/pictures/master/img/image-20230101174255383.png",alt:"image-20230101174255383"}}),s._v(" "),a("h2",{attrs:{id:"_8-nacos如何实现配置热更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-nacos如何实现配置热更新"}},[s._v("#")]),s._v(" 8 Nacos如何实现配置热更新？")]),s._v(" "),a("p",[s._v("Nacos配置热更新有多种方式，")]),s._v(" "),a("p",[s._v("我们可以使用**"),a("code",[s._v("@Value")]),s._v("结合"),a("code",[s._v("@RefreshScope")]),s._v("**，实现配置热更新，")]),s._v(" "),a("p",[s._v("也可以使用"),a("code",[s._v("@ConfigurationProperties")]),s._v("注解实现热更新，但使用"),a("code",[s._v("@ConfigurationProperties")]),s._v("的时候，"),a("strong",[s._v("需要为指定属性创建set方法")]),s._v("。")]),s._v(" "),a("blockquote",[a("p",[s._v("方法1")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RefreshScope")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserController")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${user.name}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("方法2")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Data")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@ConfigurationProperties")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("prefix "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pattern"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PatternProperties")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" dateformat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"_9-nacos如何实现配置共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-nacos如何实现配置共享"}},[s._v("#")]),s._v(" 9 Nacos如何实现配置共享？")]),s._v(" "),a("p",[s._v("Nacos配置共享分多种情况，")]),s._v(" "),a("ul",[a("li",[s._v("比如同一个项目做集群，可以在Nacos中创建服务名字.yaml文件，把需要共享的配置写到文件中即可实现集群配置共享，")]),s._v(" "),a("li",[s._v("另外还可以使用 服务名字-环境.yaml 实现不同环境集群配置共享。")])]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("除了集群共享之外，不同项目共享也支持，可以使用"),a("code",[s._v("shared-configs")]),s._v("或者"),a("code",[s._v("extension-configs")]),s._v("实现，不过这种方式默认没有开启自动刷新，可以配置"),a("code",[s._v("refresh")]),s._v("开启自动刷新。")])]),s._v(" "),a("p",[s._v("配置共享有优先级，如果所有配置中都有相同的配置内容，那会按照一定的优先级来加载配置，优先级是：")]),s._v(" "),a("p",[s._v("服务名-环境.yaml>服务名.yaml>extension-configs>shared-configs>本地配置。")]),s._v(" "),a("h2",{attrs:{id:"_10-微服务采用什么技术实现远程调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-微服务采用什么技术实现远程调用"}},[s._v("#")]),s._v(" 10 微服务采用什么技术实现远程调用?")]),s._v(" "),a("p",[s._v("微服务之间实现远程调用，可以采用RestTemplate，但RestTemplate远程调用比较复杂，而且可读性差，我们工作中通常使用Feign替代它，Feign是一个声明式的http客户端，它能够帮助我们优雅的实现http请求的发送。")]),s._v(" "),a("p",[s._v("在工作中，一般会将Feign单独抽取到一个工程中，任何项目需要用的时候，直接依赖该工程即可，如果想跟踪Feign远程调用的过程，我们可以为Feign开启日志功能，日志能详细描述整个远程调用的过程。")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("feign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("client")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("config")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("userservice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# # 针对某个微服务的配置")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("logger-level")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" BASIC\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("logger-level")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Full "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  日志级别")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"_11-说一下feign远程调用的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-说一下feign远程调用的原理"}},[s._v("#")]),s._v(" 11 说一下Feign远程调用的原理？")]),s._v(" "),a("p",[s._v("Feign实现远程调用，底层其实是"),a("strong",[s._v("Http请求")]),s._v("，我们在使用的时候首先需要创建Feign接口，在接口上通过"),a("code",[s._v("@FeignClient")]),s._v("指定该接口远程调用的服务，在接口中定义要远程调用的方法，同时需要在启动类上添加"),a("code",[s._v("@EnableFeignClients")]),s._v("开启Feign功能。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@FeignClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"userservice"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserClient")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@GetMapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/user/{id}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("findById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@PathVariable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"id"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Long")]),s._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("它实现机制其实是通过"),a("code",[s._v("@EnableFeignClients")]),s._v("注解指定要"),a("strong",[s._v("扫描的Feign接口")]),s._v("，并为Feign接口创建代理，同时将代理对象交给IOC容器管理，当程序中要使用Feign接口远程调用的时候，会解析接口上的"),a("code",[s._v("@FeignClient")]),s._v("注解，获取远程调用的服务名字，获取到服务名字后，可以据服务名到注册中心中获取可用的服务列表，同时采用负载均衡算法选择一个可用的节点，这时程序就能拿到要调用的服务的IP和端口了。")]),s._v(" "),a("p",[s._v("调用某方法的时候，程序能解析方法上的"),a("strong",[s._v("uri地址")]),s._v("，再将服务的IP和端口以及uri组成一个完整的url地址，最后采用Http方式实现远程调用。远程调用默认采用的是URLConnection，它不支持线程池，可以集成HttpClient或者OKHttp让它支持负载均衡池，这样能提升请求的效率。")]),s._v(" "),a("h2",{attrs:{id:"_12-微服务网关有什么作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-微服务网关有什么作用"}},[s._v("#")]),s._v(" 12 微服务网关有什么作用？")]),s._v(" "),a("p",[s._v("微服务架构会有多个微服务项目，每个项目都有自己身暴露的端口，我们通常不会让用户直接访问每个微服务，这样做既不方便，也不安全，我们可以使用微服务网关来解决这些问题。")]),s._v(" "),a("p",[s._v("微服务网关是微服务项目中一个非常重要的组件，它能帮我们实现用户请求路由、分布式日志记录、用户操作鉴权、服务限流保护等功能。主流的微服务网关技术有SpringCloud Gateway和Zuul，但SpringCloudGateway功能更完善，性能更高，而且也是SpringCloud推荐的网关，所以我们工作中通常会优先使用SpringCloud Gateway。")]),s._v(" "),a("h2",{attrs:{id:"_13-springcloud-gateway有哪些过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-springcloud-gateway有哪些过滤器"}},[s._v("#")]),s._v(" 13 SpringCloud Gateway有哪些过滤器？")]),s._v(" "),a("p",[s._v("SpringCloud Gateway准确说有2类过滤器，")]),s._v(" "),a("p",[s._v("一类是"),a("code",[s._v("GatewayFilter")]),s._v("，另外一类是"),a("code",[s._v("GlobalFilter")]),s._v("，按照使用范围来说可以分为三类 ，分别是"),a("strong",[s._v("路由过滤器"),a("code",[s._v("filters")])]),s._v("、"),a("strong",[s._v("默认过滤器"),a("code",[s._v("default-filters")]),a("strong",[s._v("和")]),s._v("自定义全局过滤器"),a("code",[s._v("GlobalFilter")])]),s._v("。")]),s._v(" "),a("p",[s._v("SpringCloud Gateway内置了很多GatewayFilter，我们可以通过它们实现对请求和响应的数据处理，比如灰度发布场景下，特定用户进入游戏公测服务和稳定版服务的时候，可以给每个公测服务的用户添加一个请求添加一个请求头versin=test，后端程序可以按照公测服务流程处理。")]),s._v(" "),a("p",[a("code",[s._v("GlobalFilter")]),s._v("可以拦截所有请求，我们可以用它来实现自己的拦截业务处理，例如可以拦截所有用户请求做权限校验。")]),s._v(" "),a("p",[s._v("路由过滤器、默认过滤器和全局过滤是有特定执行顺序的，"),a("strong",[s._v("默认过滤器优先级最高，其次是路由过滤器，优先级最小的是全局过滤器")]),s._v("。")]),s._v(" "),a("p",[s._v("程序中允许有多个过滤器，我们可以通过"),a("code",[s._v("@Order")]),s._v("注解调整过滤器的顺序，"),a("code",[s._v("@Order")]),s._v("注解的"),a("strong",[s._v("值越小，执行顺序越优先")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"_14-程序中如何解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-程序中如何解决跨域问题"}},[s._v("#")]),s._v(" 14 程序中如何解决跨域问题？")]),s._v(" "),a("p",[s._v("不同域名之间实现资源访问，可能会存在不安全因素，浏览器为了阻止这种不安全因素的发生，默认禁止了"),a("strong",[s._v("不同域名")]),s._v("或者"),a("strong",[s._v("不同端口")]),s._v("或者"),a("strong",[s._v("不同协议")]),s._v("的服务之间的资源访问，可以"),a("strong",[s._v("通过CORS解决跨域问题")]),s._v("。")]),s._v(" "),a("p",[s._v("在微服务架构中，可以在微服务网管中配置跨域解决方案，跨域配置一般需要指定"),a("strong",[s._v("允许跨域的url路径")]),s._v("、"),a("strong",[s._v("允许跨域请求的域名")]),s._v("、"),a("strong",[s._v("允许跨域请求的提交方式")]),s._v("、"),a("strong",[s._v("允许跨域请求的携带信息")]),s._v("。")]),s._v(" "),a("p",[s._v("其实还有其他解决方案，比如在Nginx中可以直接配置跨域解决方案，也需要配置刚才说 的那些属性，只不过Gateway的配置是基于代码层面做处理，能根据需求灵活控制，而Nginx主要是基于代理层面做跨域，跨域配置覆盖面更广。")]),s._v(" "),a("div",{staticClass:"language-yaml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 。。。")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("globalcors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全局的跨域处理")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("add-to-simple-url-handler-mapping")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 解决options请求被拦截问题")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("corsConfigurations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("'[/**]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("allowedOrigins")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 允许哪些网站的跨域请求 ")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://localhost:8090"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("allowedMethods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 允许的跨域ajax的请求方式")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GET"')]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"POST"')]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"DELETE"')]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"PUT"')]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OPTIONS"')]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("allowedHeaders")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 允许在请求中携带的头信息")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("allowCredentials")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 是否允许携带cookie")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("maxAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("360000")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 这次跨域检测的有效期")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h1",{attrs:{id:"rabbitmq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[s._v("#")]),s._v(" RabbitMQ")]),s._v(" "),a("h2",{attrs:{id:"_1-异步通信和同步通信有哪些区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步通信和同步通信有哪些区别"}},[s._v("#")]),s._v(" 1 异步通信和同步通信有哪些区别？")]),s._v(" "),a("p",[s._v("两个程序之间数据传递通常可以用同步通信或者异步通信，但两者场景有差异，比如下单时扣减库存就不能使用异步通信，转账业务就可以使用异步通信，他们所关注的业务模式有差异，并不是能相互取代的技术。")]),s._v(" "),a("p",[s._v("两个服务通信如果使用同步机制，会造成程序耦合，并且远程调用的时候，主线程阻塞等待，会造成资源浪费，同一时间能处理的业务量也会随着下降，如果级联调用大量失败，很有可能导致雪崩效应，但同步调用也并非一无是处，比如数据的时效性很高。")]),s._v(" "),a("p",[s._v("异步调用可以解决同步调用的一些问题，可以实现服务通信的同时还能做到异步解耦，服务异步解耦了，即便远程服务宕机了也不会出现同步调用的雪崩灾难。异步通信程序不用阻塞等待，性能效率会提升。")]),s._v(" "),a("p",[s._v("异步通信在高并发场景有一个特殊的使用场景，就是队列削峰。当服务器发生高并发的时候，如果所有并发请求都直达后端程序，很有可能导致后端程序宕机，这时候可以使用MQ实现队列削峰。队列削峰其实就是缓存用户请求，当请求到达后端程序的时候的时候，并不立即处理，而是将请求缓存到MQ中，用户请求就完成了，后端程序可以根据自身处理的速度去消费MQ中的请求数据，这样避免了后端程序同时处理所有请求带来的压力。")]),s._v(" "),a("h2",{attrs:{id:"_2-rabbitmq有多少种消息模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-rabbitmq有多少种消息模式"}},[s._v("#")]),s._v(" 2 RabbitMQ有多少种消息模式？")]),s._v(" "),a("p",[s._v("RabbitMQ有"),a("code",[s._v("7")]),s._v("种消息模式，分别是")]),s._v(" "),a("ul",[a("li",[s._v("基本消息模式、")]),s._v(" "),a("li",[s._v("Work模式、")]),s._v(" "),a("li",[s._v("广播模式(Fanout)、")]),s._v(" "),a("li",[s._v("路由模式(Direct)、")]),s._v(" "),a("li",[s._v("路由通配符模式(Topics)、")]),s._v(" "),a("li",[s._v("RPC模式、")]),s._v(" "),a("li",[s._v("消息确认模式。")])]),s._v(" "),a("p",[a("strong",[s._v("基本模式")]),s._v("也就是向指定队列发消息，消费者直接消费消息。")]),s._v(" "),a("p",[a("strong",[s._v("Work模式")]),s._v("就是增加消费者的个数，加快消费速度，这里是均分了RabbitMQ的消息，消费的数据不会重复。")]),s._v(" "),a("p",[a("strong",[s._v("Fanout广播模式")]),s._v("是指多个消费者消费不同队列时，如何消费同一条消息（将消息交给所有绑定到该交换机的队列），类似给一个群发消息，群里人都能看到这条消息。")]),s._v(" "),a("p",[a("strong",[s._v("Direct模式")]),s._v("可以根据路由标识将消息路由给指定的队列。")]),s._v(" "),a("p",[a("strong",[s._v("Topics路由通配符模式")]),s._v("和Direct作用一样，但在路由标识上做了功能增强，支持通配符匹配。")]),s._v(" "),a("h2",{attrs:{id:"_3-rabbitmq有哪些组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-rabbitmq有哪些组件"}},[s._v("#")]),s._v(" 3 RabbitMQ有哪些组件？")]),s._v(" "),a("p",[s._v("RabbitMQ是一个消息中间件，它主要有"),a("strong",[s._v("队列")]),s._v("("),a("code",[s._v("Queue")]),s._v(")、"),a("strong",[s._v("虚拟机")]),s._v("("),a("code",[s._v("Virtual Host")]),s._v(")、"),a("strong",[s._v("交换机")]),s._v("("),a("code",[s._v("Exchange")]),s._v(")、"),a("strong",[s._v("消息通道")]),s._v("("),a("code",[s._v("Channel")]),s._v(")，我们每次发消息其实是给交换机发送，但交换机并不存消息，它会将消息路由给和它绑定的队列，队列负责缓存消息，程序中可以监听队列订阅消息。")]),s._v(" "),a("p",[s._v("在工作中，我们通常集成"),a("code",[s._v("SpringAMQP")]),s._v("，它提供了"),a("code",[s._v("RabbitTemplate")]),s._v("模板对象，通过它能很简单的实现消息发送。同时它提供了"),a("code",[s._v("@RabbitListener")]),s._v("注解，通过"),a("code",[s._v("@RabbitListener")]),s._v("注解，"),a("strong",[s._v("不仅可以定义队列、定义交换机，还能实现队列绑定等操作")]),s._v("。")]),s._v(" "),a("blockquote",[a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Autowired")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RabbitTemplate")]),s._v(" rabbitTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n* 将消息发送到direct交换机\n*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Test")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("testSendDirectExchange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 交换机名称")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" exchangeName "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"java.direct"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 消息")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" message1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送消息")]),s._v("\n    rabbitTemplate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("convertAndSend")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("exchangeName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" message1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("hr"),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@RabbitListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bindings "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@QueueBinding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n\t\tvalue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Queue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hotel.insert.queue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\texchange "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Exchange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hotel.topic"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExchangeTypes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TOPIC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\t\tkey "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hotel.insert"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"_4-rabbitmq防止消息重复消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-rabbitmq防止消息重复消费"}},[s._v("#")]),s._v(" 4 RabbitMQ防止消息重复消费？")]),s._v(" "),a("p",[s._v("在使用任何消息中间件的时候，如果重复发送一条消息，都有可能造成消息重复消费，消息重复消费会导致业务操作重复执行。要解决这类问题，我们可以采用==消息唯一表==的模式来处理，这就需要从消息发送的源头做数据处理了。")]),s._v(" "),a("p",[s._v("生产者每次发消息的时候，生成一个"),a("strong",[s._v("消息的唯一ID号")]),s._v("，将唯一ID号作为消息的一部分"),a("strong",[s._v("发送到远程服务")]),s._v("，远程服务接到消息后，先获取消息的唯一ID号，"),a("strong",[s._v("第1次读取该消息的时候，将唯一ID号存入到数据库中")]),s._v("，再做业务处理。如果一个消息重复发送，那它的唯一ID号也就相同，每次消费数据做业务处理之前，都可以先根据ID号到数据库中查询一下是否有改消息的消费记录，"),a("strong",[s._v("如果有，则直接跳过不做业务处理")]),s._v("，如果没有，则执行业务处理。")]),s._v(" "),a("p",[s._v("只要按照这个规则来，就可以解决消息重复消费的问题。")]),s._v(" "),a("h1",{attrs:{id:"elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[s._v("#")]),s._v(" ElasticSearch")]),s._v(" "),a("h2",{attrs:{id:"_1-为什么使用elasticsearch做数据搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么使用elasticsearch做数据搜索"}},[s._v("#")]),s._v(" 1 为什么使用ElasticSearch做数据搜索？")]),s._v(" "),a("p",[s._v("我们程序中经常要做搜索，如果数据量过大，从数据库做搜索，效率会很低，因为数据库使用的是正向索引，会逐条检索，数据量越大，检索范围越广，效率越低。")]),s._v(" "),a("p",[a("code",[s._v("ElasticSearch")]),s._v("采用的是"),a("strong",[s._v("倒牌索引")]),s._v("，存数据的时候，会将要搜索的字段做"),a("strong",[s._v("分词处理")]),s._v("，并且记录每个分词出现的"),a("strong",[s._v("文档ID")]),s._v("，"),a("strong",[s._v("词语")]),s._v("和"),a("strong",[s._v("词语出现的文档ID")]),s._v("都会记录到倒排索引中。当我们执行搜索的时候，也会对用户搜索的内容做分词，再去倒牌索引中找对应的词，获取每个词出现的文档ID，最后根据文档ID直接去获取"),a("strong",[s._v("文档数据")]),s._v("即可完成搜索。")]),s._v(" "),a("p",[s._v("我们如果有10亿文章，分出的词语其实只有几十万，使用了倒牌索引搜索，能大幅降低数据的搜索范围，所以在海量数据的情况下，能大幅提升检索效率。")]),s._v(" "),a("h2",{attrs:{id:"_2-你们程序中的数据都存在es中了吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-你们程序中的数据都存在es中了吗"}},[s._v("#")]),s._v(" 2 你们程序中的数据都存在ES中了吗？")]),s._v(" "),a("p",[s._v("其实ES擅长的是海量数据检索、分析、计算，并不擅长事务操作，而数据库是擅长事务操作，我们为了保证数据的安全，一般都会将完整数据保存在数据库中，将常常搜索的数据同步到ES中，海量数据搜索直接从ES中执行搜索，数据增删改查可以直接操作数据库。")]),s._v(" "),a("h2",{attrs:{id:"_3-elasticsearch中的查询类型有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-elasticsearch中的查询类型有哪些"}},[s._v("#")]),s._v(" 3 ElasticSearch中的查询类型有哪些？")]),s._v(" "),a("p",[a("code",[s._v("ElasticSearch")]),s._v("中支持很多查询类型，比如：")]),s._v(" "),a("ul",[a("li",[s._v("查询所有可以用"),a("code",[s._v("matchAll")])]),s._v(" "),a("li",[s._v("全文检索用"),a("code",[s._v("match")]),s._v("或者"),a("code",[s._v("multiMatch")]),s._v("，"),a("code",[s._v("multiMatch")]),s._v("支持多个字段全文检索，但多字段检索性能效率会偏低，一般可以使用"),a("code",[s._v("copy_to")]),s._v("，来取代"),a("code",[s._v("multiMatch")])]),s._v(" "),a("li",[s._v("如果需要做范围查询，我们可以使用"),a("code",[s._v("range")])]),s._v(" "),a("li",[s._v("一些数据有可能会被作为一个整体，例如品牌、城市等，可以使用"),a("code",[s._v("term")]),s._v("实现查询")]),s._v(" "),a("li",[s._v("如果需要将多条件组合到一起，可以使用"),a("code",[s._v("BoolQuery")]),s._v("，它处理不同逻辑的时候可以使用must、should、must_not、filter\n"),a("ul",[a("li",[s._v("must：必须匹配的条件，可以理解为“与”")]),s._v(" "),a("li",[s._v("should：选择性匹配的条件，可以理解为“或”")]),s._v(" "),a("li",[s._v("must_not：必须不匹配的条件，不参与打分")]),s._v(" "),a("li",[s._v("filter：必须匹配的条件，不参与打分")])])])]),s._v(" "),a("p",[s._v("工作中一般一般会根据自己的需求来选择，复杂条件通常都会用到"),a("code",[s._v("BoolQuery")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"_4-项目中如何将数据同步到elasticsearch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-项目中如何将数据同步到elasticsearch"}},[s._v("#")]),s._v(" 4 项目中如何将数据同步到ElasticSearch？")]),s._v(" "),a("p",[s._v("同步其实分为2种情况，那就是"),a("strong",[s._v("增量同步")]),s._v("和"),a("strong",[s._v("批量同步")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("增量同步")]),s._v("的方案很多，比如：")]),s._v(" "),a("ul",[a("li",[s._v("通过"),a("code",[s._v("Feign")]),s._v("远程调用，实现数据同步，这种方式耦合度高，性能效率低，不太建议使用。")]),s._v(" "),a("li",[s._v("通过MQ实现服务异步通信，比如增加数据的时候，可以将需要同步的数据发送到MQ，同步数据的微服务监听MQ数据，并将监听的数据同步到"),a("code",[s._v("ElasticSearch")]),s._v("，这种方式简单、耦合度低、性能效率也很高。")]),s._v(" "),a("li",[s._v("通过监听MySQL的"),a("code",[s._v("binlog")]),s._v("实现数据同步，也是一个不错的方案，但需要开启"),a("code",[s._v("mysql")]),s._v("的"),a("code",[s._v("binlog")]),s._v("，执行增删改，就会记录操作记录，其他程序可以通过"),a("code",[s._v("Canal")]),s._v("监听MySQL的"),a("code",[s._v("binlog")]),s._v("，再推送给其他程序，其他程序就能获取到数据，实现数据同步了。这种方案比较不错，可以降低服务耦合，同时也能做到无死角监控数据变化实现实时同步，但相比前面2种方案，它的架构要复杂一些。")])]),s._v(" "),a("p",[s._v("批量同步一般都在做"),a("strong",[s._v("数据初始化")]),s._v("的时候使用，但批量数据同步需要考虑生产环境集群任务重复执行的问题、集群各个节点压力分担的问题。我们可以采用"),a("code",[s._v("xxl-job")]),s._v("结合分页多线程批量导入数据到ES：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("xxl-job")]),s._v("是一个分布式任务调度器，可以将数据批量导入当做一个任务，"),a("code",[s._v("xxl-job")]),s._v("能将任务分发到集群的每个节点上，并携带执行任务的节点数以及当前节点是属于第几个任务节点，这就好像做分页知道了总记录数、将总数据分几页查询、当前程序处理第几页一样。根据"),a("code",[s._v("xxl-job")]),s._v("的这个功能特点，我们可以在每个集群节点中计算出当前节点要处理的数据范围，这样每个节点都能参与进来处理一部分数据分担压力。")])]),s._v(" "),a("li",[a("p",[s._v("每个节点知道自己处理的数据范围后，可以将当前节点要处理的数据以分页的方式查询出来，再使用多线程机制实现数据批量导入到ES，数据批量导入到ES需要使用到ES提供的"),a("code",[s._v("BulkRequest")]),s._v("方式操作，性能效率更高。")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://javals.oss-cn-hangzhou.aliyuncs.com//images/202301120912536.png",alt:"image-20230112091238403"}})]),s._v(" "),a("h2",{attrs:{id:"_5-如何解决elasticsearch深度分页效率低的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-如何解决elasticsearch深度分页效率低的问题"}},[s._v("#")]),s._v(" 5 如何解决ElasticSearch深度分页效率低的问题？")]),s._v(" "),a("p",[s._v("深度分页也就是查询页码很高的操作，比如查询第1000页，这就属于深度分页，深度分页效率确实很低，因为ES做分页查询，每次都会将查询的页码数据及页码前的数据都查询出来，最后只取你指定的页码，比如我们查询第3页，其实会将第1页、第2页、第3页的数据都查询出来，然后去掉去1页、第2页的数据，只留第3页的数据，这样做，一旦数据量太大，就会造成内存溢出、CPU消耗高的问题。")]),s._v(" "),a("p",[s._v("解决这个问题，我们可以使用ES的"),a("code",[s._v("search after")]),s._v("机制，这种机制需要指定排序字段，每次查询下一页的时候，都需要将排序字段的最后一个数据的值传递到ES，来查询下一页，这样做性能效率非常高。")]),s._v(" "),a("p",[s._v("search after虽然能解决深度分页的问题，但它也有缺陷，只能一页一页往下翻，不能跳到指定页码。")]),s._v(" "),a("h2",{attrs:{id:"_6-elasticsearch如何解决脑裂问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-elasticsearch如何解决脑裂问题"}},[s._v("#")]),s._v(" 6 ElasticSearch如何解决脑裂问题？")]),s._v(" "),a("p",[s._v("如果服务器网络中断或者服务器宕机，那么集群会有可能被划分为两个部分，各自与自己的master来管理，这就是脑裂，脑裂会导致ES集群中的数据不一致。")]),s._v(" "),a("p",[s._v("解决脑裂问题，主要注意两方面细节：")]),s._v(" "),a("ul",[a("li",[s._v("投票选举过程中，获得半数以上节点的票数，节点方可能成为master")]),s._v(" "),a("li",[s._v("集群中节点个数设置为奇数个，这样半数以上的条件才能成立")])]),s._v(" "),a("p",[s._v("ES7之前的版本是存在脑裂问题，ES7的版本其实就是采用这种方式来解决脑裂问题的。")])])}),[],!1,null,null,null);a.default=e.exports}}]);